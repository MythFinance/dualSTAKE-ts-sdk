/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"Registry Contract","structs":{},"methods":[{"name":"change_admin_1","desc":"admin method. first of 2-step admin change process.","args":[{"name":"new_admin","type":"address"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"change_admin_2","desc":"public method. second of 2-step admin change process. called by new admin in atomic group after change_admin_1","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"assign_contract","desc":"Register dualstake contract with registry","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"unassign_contract","desc":"Delete dualstake contract registration","args":[{"name":"key","type":"byte[]"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"withdraw_algo","desc":"Withdraw available algo from the contract escrow","args":[{"name":"amount","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"vanity_configure","desc":"Call dualSTAKE.configure2 to mint dualSTAKE token with ASA ID % 1000 === 0","args":[{"name":"app_id","type":"uint64"},{"name":"lst_asa_name","type":"byte[]"},{"name":"lst_unit_name","type":"byte[]"},{"name":"lst_url","type":"byte[]"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"log_dualstake_listings","desc":"abi_call dualstakes, log their ContractListing","args":[{"name":"app_ids","type":"uint64[]"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"get_asa_dualstake_asset_id","desc":"C2C friendly call to get dualstake ASA ID from ASA ID. e.g. COOP -> coopALGO asa ID","args":[{"name":"asa_id","type":"uint64"}],"returns":{"type":"uint64"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"get_asa_dualstake_app_id","desc":"C2C friendly call to get dualstake application ID from ASA ID. e.g. COOP -> coopALGO contract app ID","args":[{"name":"asa_id","type":"uint64"}],"returns":{"type":"uint64"},"events":[],"actions":{"create":[],"call":["NoOp"]}}],"state":{"schema":{"global":{"ints":32,"bytes":32},"local":{"ints":0,"bytes":0}},"keys":{"global":{"admin_addr":{"key":"YWRtYWRkcg==","keyType":"AVMString","valueType":"AVMBytes"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDExCmludCAwCnJldHVybg=="},"bareActions":{"create":["NoOp"],"call":[]}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the RegistryContract contract
 */
export type RegistryContractArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'change_admin_1(address)void': {
      newAdmin: string
    }
    'change_admin_2()void': Record<string, never>
    'assign_contract()void': Record<string, never>
    'unassign_contract(byte[])void': {
      key: Uint8Array
    }
    'withdraw_algo(uint64)void': {
      amount: bigint | number
    }
    'vanity_configure(uint64,byte[],byte[],byte[])void': {
      appId: bigint | number
      lstAsaName: Uint8Array
      lstUnitName: Uint8Array
      lstUrl: Uint8Array
    }
    'log_dualstake_listings(uint64[])void': {
      appIds: bigint[] | number[]
    }
    'get_asa_dualstake_asset_id(uint64)uint64': {
      asaId: bigint | number
    }
    'get_asa_dualstake_app_id(uint64)uint64': {
      asaId: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'change_admin_1(address)void': [newAdmin: string]
    'change_admin_2()void': []
    'assign_contract()void': []
    'unassign_contract(byte[])void': [key: Uint8Array]
    'withdraw_algo(uint64)void': [amount: bigint | number]
    'vanity_configure(uint64,byte[],byte[],byte[])void': [appId: bigint | number, lstAsaName: Uint8Array, lstUnitName: Uint8Array, lstUrl: Uint8Array]
    'log_dualstake_listings(uint64[])void': [appIds: bigint[] | number[]]
    'get_asa_dualstake_asset_id(uint64)uint64': [asaId: bigint | number]
    'get_asa_dualstake_app_id(uint64)uint64': [asaId: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type RegistryContractReturns = {
  'change_admin_1(address)void': void
  'change_admin_2()void': void
  'assign_contract()void': void
  'unassign_contract(byte[])void': void
  'withdraw_algo(uint64)void': void
  'vanity_configure(uint64,byte[],byte[],byte[])void': void
  'log_dualstake_listings(uint64[])void': void
  'get_asa_dualstake_asset_id(uint64)uint64': bigint
  'get_asa_dualstake_app_id(uint64)uint64': bigint
}

/**
 * Defines the types of available calls and state of the RegistryContract smart contract.
 */
export type RegistryContractTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'change_admin_1(address)void' | 'change_admin_1', {
      argsObj: RegistryContractArgs['obj']['change_admin_1(address)void']
      argsTuple: RegistryContractArgs['tuple']['change_admin_1(address)void']
      returns: RegistryContractReturns['change_admin_1(address)void']
    }>
    & Record<'change_admin_2()void' | 'change_admin_2', {
      argsObj: RegistryContractArgs['obj']['change_admin_2()void']
      argsTuple: RegistryContractArgs['tuple']['change_admin_2()void']
      returns: RegistryContractReturns['change_admin_2()void']
    }>
    & Record<'assign_contract()void' | 'assign_contract', {
      argsObj: RegistryContractArgs['obj']['assign_contract()void']
      argsTuple: RegistryContractArgs['tuple']['assign_contract()void']
      returns: RegistryContractReturns['assign_contract()void']
    }>
    & Record<'unassign_contract(byte[])void' | 'unassign_contract', {
      argsObj: RegistryContractArgs['obj']['unassign_contract(byte[])void']
      argsTuple: RegistryContractArgs['tuple']['unassign_contract(byte[])void']
      returns: RegistryContractReturns['unassign_contract(byte[])void']
    }>
    & Record<'withdraw_algo(uint64)void' | 'withdraw_algo', {
      argsObj: RegistryContractArgs['obj']['withdraw_algo(uint64)void']
      argsTuple: RegistryContractArgs['tuple']['withdraw_algo(uint64)void']
      returns: RegistryContractReturns['withdraw_algo(uint64)void']
    }>
    & Record<'vanity_configure(uint64,byte[],byte[],byte[])void' | 'vanity_configure', {
      argsObj: RegistryContractArgs['obj']['vanity_configure(uint64,byte[],byte[],byte[])void']
      argsTuple: RegistryContractArgs['tuple']['vanity_configure(uint64,byte[],byte[],byte[])void']
      returns: RegistryContractReturns['vanity_configure(uint64,byte[],byte[],byte[])void']
    }>
    & Record<'log_dualstake_listings(uint64[])void' | 'log_dualstake_listings', {
      argsObj: RegistryContractArgs['obj']['log_dualstake_listings(uint64[])void']
      argsTuple: RegistryContractArgs['tuple']['log_dualstake_listings(uint64[])void']
      returns: RegistryContractReturns['log_dualstake_listings(uint64[])void']
    }>
    & Record<'get_asa_dualstake_asset_id(uint64)uint64' | 'get_asa_dualstake_asset_id', {
      argsObj: RegistryContractArgs['obj']['get_asa_dualstake_asset_id(uint64)uint64']
      argsTuple: RegistryContractArgs['tuple']['get_asa_dualstake_asset_id(uint64)uint64']
      returns: RegistryContractReturns['get_asa_dualstake_asset_id(uint64)uint64']
    }>
    & Record<'get_asa_dualstake_app_id(uint64)uint64' | 'get_asa_dualstake_app_id', {
      argsObj: RegistryContractArgs['obj']['get_asa_dualstake_app_id(uint64)uint64']
      argsTuple: RegistryContractArgs['tuple']['get_asa_dualstake_app_id(uint64)uint64']
      returns: RegistryContractReturns['get_asa_dualstake_app_id(uint64)uint64']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        adminAddr: BinaryState
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type RegistryContractSignatures = keyof RegistryContractTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type RegistryContractNonVoidMethodSignatures = keyof RegistryContractTypes['methods'] extends infer T ? T extends keyof RegistryContractTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the RegistryContract smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends RegistryContractSignatures> = RegistryContractTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the RegistryContract smart contract to the method's return type
 */
export type MethodReturn<TSignature extends RegistryContractSignatures> = RegistryContractTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = RegistryContractTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type RegistryContractCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type RegistryContractDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: RegistryContractCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the RegistryContract smart contract
 */
export abstract class RegistryContractParamsFactory {
  /**
   * Constructs a no op call for the change_admin_1(address)void ABI method
   *
   * admin method. first of 2-step admin change process.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static changeAdmin_1(params: CallParams<RegistryContractArgs['obj']['change_admin_1(address)void'] | RegistryContractArgs['tuple']['change_admin_1(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'change_admin_1(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newAdmin],
    }
  }
  /**
   * Constructs a no op call for the change_admin_2()void ABI method
   *
   * public method. second of 2-step admin change process. called by new admin in atomic group after change_admin_1
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static changeAdmin_2(params: CallParams<RegistryContractArgs['obj']['change_admin_2()void'] | RegistryContractArgs['tuple']['change_admin_2()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'change_admin_2()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the assign_contract()void ABI method
   *
   * Register dualstake contract with registry
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static assignContract(params: CallParams<RegistryContractArgs['obj']['assign_contract()void'] | RegistryContractArgs['tuple']['assign_contract()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'assign_contract()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the unassign_contract(byte[])void ABI method
   *
   * Delete dualstake contract registration
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static unassignContract(params: CallParams<RegistryContractArgs['obj']['unassign_contract(byte[])void'] | RegistryContractArgs['tuple']['unassign_contract(byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'unassign_contract(byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.key],
    }
  }
  /**
   * Constructs a no op call for the withdraw_algo(uint64)void ABI method
   *
   * Withdraw available algo from the contract escrow
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdrawAlgo(params: CallParams<RegistryContractArgs['obj']['withdraw_algo(uint64)void'] | RegistryContractArgs['tuple']['withdraw_algo(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdraw_algo(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the vanity_configure(uint64,byte[],byte[],byte[])void ABI method
   *
   * Call dualSTAKE.configure2 to mint dualSTAKE token with ASA ID % 1000 === 0
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static vanityConfigure(params: CallParams<RegistryContractArgs['obj']['vanity_configure(uint64,byte[],byte[],byte[])void'] | RegistryContractArgs['tuple']['vanity_configure(uint64,byte[],byte[],byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'vanity_configure(uint64,byte[],byte[],byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appId, params.args.lstAsaName, params.args.lstUnitName, params.args.lstUrl],
    }
  }
  /**
   * Constructs a no op call for the log_dualstake_listings(uint64[])void ABI method
   *
   * abi_call dualstakes, log their ContractListing
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static logDualstakeListings(params: CallParams<RegistryContractArgs['obj']['log_dualstake_listings(uint64[])void'] | RegistryContractArgs['tuple']['log_dualstake_listings(uint64[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'log_dualstake_listings(uint64[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appIds],
    }
  }
  /**
   * Constructs a no op call for the get_asa_dualstake_asset_id(uint64)uint64 ABI method
   *
   * C2C friendly call to get dualstake ASA ID from ASA ID. e.g. COOP -> coopALGO asa ID
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getAsaDualstakeAssetId(params: CallParams<RegistryContractArgs['obj']['get_asa_dualstake_asset_id(uint64)uint64'] | RegistryContractArgs['tuple']['get_asa_dualstake_asset_id(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_asa_dualstake_asset_id(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asaId],
    }
  }
  /**
   * Constructs a no op call for the get_asa_dualstake_app_id(uint64)uint64 ABI method
   *
   * C2C friendly call to get dualstake application ID from ASA ID. e.g. COOP -> coopALGO contract app ID
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getAsaDualstakeAppId(params: CallParams<RegistryContractArgs['obj']['get_asa_dualstake_app_id(uint64)uint64'] | RegistryContractArgs['tuple']['get_asa_dualstake_app_id(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_asa_dualstake_app_id(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asaId],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Registry Contract smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class RegistryContractFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `RegistryContractFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new RegistryContractClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new RegistryContractClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Registry Contract smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: RegistryContractDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new RegistryContractClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Registry Contract smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Registry Contract smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Registry Contract smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new RegistryContractClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Registry Contract smart contract
 */
export class RegistryContractClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `RegistryContractClient`
   *
   * @param appClient An `AppClient` instance which has been created with the RegistryContract app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `RegistryContractClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends RegistryContractNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `RegistryContractClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<RegistryContractClient> {
    return new RegistryContractClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `RegistryContractClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<RegistryContractClient> {
    return new RegistryContractClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Registry Contract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Registry Contract smart contract using the `change_admin_1(address)void` ABI method.
     *
     * admin method. first of 2-step admin change process.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    changeAdmin_1: (params: CallParams<RegistryContractArgs['obj']['change_admin_1(address)void'] | RegistryContractArgs['tuple']['change_admin_1(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(RegistryContractParamsFactory.changeAdmin_1(params))
    },

    /**
     * Makes a call to the Registry Contract smart contract using the `change_admin_2()void` ABI method.
     *
     * public method. second of 2-step admin change process. called by new admin in atomic group after change_admin_1
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    changeAdmin_2: (params: CallParams<RegistryContractArgs['obj']['change_admin_2()void'] | RegistryContractArgs['tuple']['change_admin_2()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(RegistryContractParamsFactory.changeAdmin_2(params))
    },

    /**
     * Makes a call to the Registry Contract smart contract using the `assign_contract()void` ABI method.
     *
     * Register dualstake contract with registry
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    assignContract: (params: CallParams<RegistryContractArgs['obj']['assign_contract()void'] | RegistryContractArgs['tuple']['assign_contract()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(RegistryContractParamsFactory.assignContract(params))
    },

    /**
     * Makes a call to the Registry Contract smart contract using the `unassign_contract(byte[])void` ABI method.
     *
     * Delete dualstake contract registration
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    unassignContract: (params: CallParams<RegistryContractArgs['obj']['unassign_contract(byte[])void'] | RegistryContractArgs['tuple']['unassign_contract(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(RegistryContractParamsFactory.unassignContract(params))
    },

    /**
     * Makes a call to the Registry Contract smart contract using the `withdraw_algo(uint64)void` ABI method.
     *
     * Withdraw available algo from the contract escrow
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdrawAlgo: (params: CallParams<RegistryContractArgs['obj']['withdraw_algo(uint64)void'] | RegistryContractArgs['tuple']['withdraw_algo(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(RegistryContractParamsFactory.withdrawAlgo(params))
    },

    /**
     * Makes a call to the Registry Contract smart contract using the `vanity_configure(uint64,byte[],byte[],byte[])void` ABI method.
     *
     * Call dualSTAKE.configure2 to mint dualSTAKE token with ASA ID % 1000 === 0
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    vanityConfigure: (params: CallParams<RegistryContractArgs['obj']['vanity_configure(uint64,byte[],byte[],byte[])void'] | RegistryContractArgs['tuple']['vanity_configure(uint64,byte[],byte[],byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(RegistryContractParamsFactory.vanityConfigure(params))
    },

    /**
     * Makes a call to the Registry Contract smart contract using the `log_dualstake_listings(uint64[])void` ABI method.
     *
     * abi_call dualstakes, log their ContractListing
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    logDualstakeListings: (params: CallParams<RegistryContractArgs['obj']['log_dualstake_listings(uint64[])void'] | RegistryContractArgs['tuple']['log_dualstake_listings(uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(RegistryContractParamsFactory.logDualstakeListings(params))
    },

    /**
     * Makes a call to the Registry Contract smart contract using the `get_asa_dualstake_asset_id(uint64)uint64` ABI method.
     *
     * C2C friendly call to get dualstake ASA ID from ASA ID. e.g. COOP -> coopALGO asa ID
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getAsaDualstakeAssetId: (params: CallParams<RegistryContractArgs['obj']['get_asa_dualstake_asset_id(uint64)uint64'] | RegistryContractArgs['tuple']['get_asa_dualstake_asset_id(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(RegistryContractParamsFactory.getAsaDualstakeAssetId(params))
    },

    /**
     * Makes a call to the Registry Contract smart contract using the `get_asa_dualstake_app_id(uint64)uint64` ABI method.
     *
     * C2C friendly call to get dualstake application ID from ASA ID. e.g. COOP -> coopALGO contract app ID
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getAsaDualstakeAppId: (params: CallParams<RegistryContractArgs['obj']['get_asa_dualstake_app_id(uint64)uint64'] | RegistryContractArgs['tuple']['get_asa_dualstake_app_id(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(RegistryContractParamsFactory.getAsaDualstakeAppId(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Registry Contract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Registry Contract smart contract using the `change_admin_1(address)void` ABI method.
     *
     * admin method. first of 2-step admin change process.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    changeAdmin_1: (params: CallParams<RegistryContractArgs['obj']['change_admin_1(address)void'] | RegistryContractArgs['tuple']['change_admin_1(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(RegistryContractParamsFactory.changeAdmin_1(params))
    },

    /**
     * Makes a call to the Registry Contract smart contract using the `change_admin_2()void` ABI method.
     *
     * public method. second of 2-step admin change process. called by new admin in atomic group after change_admin_1
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    changeAdmin_2: (params: CallParams<RegistryContractArgs['obj']['change_admin_2()void'] | RegistryContractArgs['tuple']['change_admin_2()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(RegistryContractParamsFactory.changeAdmin_2(params))
    },

    /**
     * Makes a call to the Registry Contract smart contract using the `assign_contract()void` ABI method.
     *
     * Register dualstake contract with registry
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    assignContract: (params: CallParams<RegistryContractArgs['obj']['assign_contract()void'] | RegistryContractArgs['tuple']['assign_contract()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(RegistryContractParamsFactory.assignContract(params))
    },

    /**
     * Makes a call to the Registry Contract smart contract using the `unassign_contract(byte[])void` ABI method.
     *
     * Delete dualstake contract registration
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    unassignContract: (params: CallParams<RegistryContractArgs['obj']['unassign_contract(byte[])void'] | RegistryContractArgs['tuple']['unassign_contract(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(RegistryContractParamsFactory.unassignContract(params))
    },

    /**
     * Makes a call to the Registry Contract smart contract using the `withdraw_algo(uint64)void` ABI method.
     *
     * Withdraw available algo from the contract escrow
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdrawAlgo: (params: CallParams<RegistryContractArgs['obj']['withdraw_algo(uint64)void'] | RegistryContractArgs['tuple']['withdraw_algo(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(RegistryContractParamsFactory.withdrawAlgo(params))
    },

    /**
     * Makes a call to the Registry Contract smart contract using the `vanity_configure(uint64,byte[],byte[],byte[])void` ABI method.
     *
     * Call dualSTAKE.configure2 to mint dualSTAKE token with ASA ID % 1000 === 0
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    vanityConfigure: (params: CallParams<RegistryContractArgs['obj']['vanity_configure(uint64,byte[],byte[],byte[])void'] | RegistryContractArgs['tuple']['vanity_configure(uint64,byte[],byte[],byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(RegistryContractParamsFactory.vanityConfigure(params))
    },

    /**
     * Makes a call to the Registry Contract smart contract using the `log_dualstake_listings(uint64[])void` ABI method.
     *
     * abi_call dualstakes, log their ContractListing
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    logDualstakeListings: (params: CallParams<RegistryContractArgs['obj']['log_dualstake_listings(uint64[])void'] | RegistryContractArgs['tuple']['log_dualstake_listings(uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(RegistryContractParamsFactory.logDualstakeListings(params))
    },

    /**
     * Makes a call to the Registry Contract smart contract using the `get_asa_dualstake_asset_id(uint64)uint64` ABI method.
     *
     * C2C friendly call to get dualstake ASA ID from ASA ID. e.g. COOP -> coopALGO asa ID
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getAsaDualstakeAssetId: (params: CallParams<RegistryContractArgs['obj']['get_asa_dualstake_asset_id(uint64)uint64'] | RegistryContractArgs['tuple']['get_asa_dualstake_asset_id(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(RegistryContractParamsFactory.getAsaDualstakeAssetId(params))
    },

    /**
     * Makes a call to the Registry Contract smart contract using the `get_asa_dualstake_app_id(uint64)uint64` ABI method.
     *
     * C2C friendly call to get dualstake application ID from ASA ID. e.g. COOP -> coopALGO contract app ID
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getAsaDualstakeAppId: (params: CallParams<RegistryContractArgs['obj']['get_asa_dualstake_app_id(uint64)uint64'] | RegistryContractArgs['tuple']['get_asa_dualstake_app_id(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(RegistryContractParamsFactory.getAsaDualstakeAppId(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Registry Contract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Registry Contract smart contract using the `change_admin_1(address)void` ABI method.
     *
     * admin method. first of 2-step admin change process.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    changeAdmin_1: async (params: CallParams<RegistryContractArgs['obj']['change_admin_1(address)void'] | RegistryContractArgs['tuple']['change_admin_1(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(RegistryContractParamsFactory.changeAdmin_1(params))
      return {...result, return: result.return as unknown as (undefined | RegistryContractReturns['change_admin_1(address)void'])}
    },

    /**
     * Makes a call to the Registry Contract smart contract using the `change_admin_2()void` ABI method.
     *
     * public method. second of 2-step admin change process. called by new admin in atomic group after change_admin_1
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    changeAdmin_2: async (params: CallParams<RegistryContractArgs['obj']['change_admin_2()void'] | RegistryContractArgs['tuple']['change_admin_2()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(RegistryContractParamsFactory.changeAdmin_2(params))
      return {...result, return: result.return as unknown as (undefined | RegistryContractReturns['change_admin_2()void'])}
    },

    /**
     * Makes a call to the Registry Contract smart contract using the `assign_contract()void` ABI method.
     *
     * Register dualstake contract with registry
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    assignContract: async (params: CallParams<RegistryContractArgs['obj']['assign_contract()void'] | RegistryContractArgs['tuple']['assign_contract()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(RegistryContractParamsFactory.assignContract(params))
      return {...result, return: result.return as unknown as (undefined | RegistryContractReturns['assign_contract()void'])}
    },

    /**
     * Makes a call to the Registry Contract smart contract using the `unassign_contract(byte[])void` ABI method.
     *
     * Delete dualstake contract registration
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    unassignContract: async (params: CallParams<RegistryContractArgs['obj']['unassign_contract(byte[])void'] | RegistryContractArgs['tuple']['unassign_contract(byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(RegistryContractParamsFactory.unassignContract(params))
      return {...result, return: result.return as unknown as (undefined | RegistryContractReturns['unassign_contract(byte[])void'])}
    },

    /**
     * Makes a call to the Registry Contract smart contract using the `withdraw_algo(uint64)void` ABI method.
     *
     * Withdraw available algo from the contract escrow
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdrawAlgo: async (params: CallParams<RegistryContractArgs['obj']['withdraw_algo(uint64)void'] | RegistryContractArgs['tuple']['withdraw_algo(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(RegistryContractParamsFactory.withdrawAlgo(params))
      return {...result, return: result.return as unknown as (undefined | RegistryContractReturns['withdraw_algo(uint64)void'])}
    },

    /**
     * Makes a call to the Registry Contract smart contract using the `vanity_configure(uint64,byte[],byte[],byte[])void` ABI method.
     *
     * Call dualSTAKE.configure2 to mint dualSTAKE token with ASA ID % 1000 === 0
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    vanityConfigure: async (params: CallParams<RegistryContractArgs['obj']['vanity_configure(uint64,byte[],byte[],byte[])void'] | RegistryContractArgs['tuple']['vanity_configure(uint64,byte[],byte[],byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(RegistryContractParamsFactory.vanityConfigure(params))
      return {...result, return: result.return as unknown as (undefined | RegistryContractReturns['vanity_configure(uint64,byte[],byte[],byte[])void'])}
    },

    /**
     * Makes a call to the Registry Contract smart contract using the `log_dualstake_listings(uint64[])void` ABI method.
     *
     * abi_call dualstakes, log their ContractListing
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    logDualstakeListings: async (params: CallParams<RegistryContractArgs['obj']['log_dualstake_listings(uint64[])void'] | RegistryContractArgs['tuple']['log_dualstake_listings(uint64[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(RegistryContractParamsFactory.logDualstakeListings(params))
      return {...result, return: result.return as unknown as (undefined | RegistryContractReturns['log_dualstake_listings(uint64[])void'])}
    },

    /**
     * Makes a call to the Registry Contract smart contract using the `get_asa_dualstake_asset_id(uint64)uint64` ABI method.
     *
     * C2C friendly call to get dualstake ASA ID from ASA ID. e.g. COOP -> coopALGO asa ID
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getAsaDualstakeAssetId: async (params: CallParams<RegistryContractArgs['obj']['get_asa_dualstake_asset_id(uint64)uint64'] | RegistryContractArgs['tuple']['get_asa_dualstake_asset_id(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(RegistryContractParamsFactory.getAsaDualstakeAssetId(params))
      return {...result, return: result.return as unknown as (undefined | RegistryContractReturns['get_asa_dualstake_asset_id(uint64)uint64'])}
    },

    /**
     * Makes a call to the Registry Contract smart contract using the `get_asa_dualstake_app_id(uint64)uint64` ABI method.
     *
     * C2C friendly call to get dualstake application ID from ASA ID. e.g. COOP -> coopALGO contract app ID
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getAsaDualstakeAppId: async (params: CallParams<RegistryContractArgs['obj']['get_asa_dualstake_app_id(uint64)uint64'] | RegistryContractArgs['tuple']['get_asa_dualstake_app_id(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(RegistryContractParamsFactory.getAsaDualstakeAppId(params))
      return {...result, return: result.return as unknown as (undefined | RegistryContractReturns['get_asa_dualstake_app_id(uint64)uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new RegistryContractClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current Registry Contract app
   */
  state = {
    /**
     * Methods to access global state for the current Registry Contract app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          adminAddr: new BinaryStateValue(result.admin_addr),
        }
      },
      /**
       * Get the current value of the admin_addr key in global state
       */
      adminAddr: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("admin_addr")) as Uint8Array | undefined) },
    },
  }

  public newGroup(): RegistryContractComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a change_admin_1(address)void method call against the Registry Contract contract
       */
      changeAdmin_1(params: CallParams<RegistryContractArgs['obj']['change_admin_1(address)void'] | RegistryContractArgs['tuple']['change_admin_1(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.changeAdmin_1(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a change_admin_2()void method call against the Registry Contract contract
       */
      changeAdmin_2(params: CallParams<RegistryContractArgs['obj']['change_admin_2()void'] | RegistryContractArgs['tuple']['change_admin_2()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.changeAdmin_2(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a assign_contract()void method call against the Registry Contract contract
       */
      assignContract(params: CallParams<RegistryContractArgs['obj']['assign_contract()void'] | RegistryContractArgs['tuple']['assign_contract()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.assignContract(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a unassign_contract(byte[])void method call against the Registry Contract contract
       */
      unassignContract(params: CallParams<RegistryContractArgs['obj']['unassign_contract(byte[])void'] | RegistryContractArgs['tuple']['unassign_contract(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.unassignContract(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a withdraw_algo(uint64)void method call against the Registry Contract contract
       */
      withdrawAlgo(params: CallParams<RegistryContractArgs['obj']['withdraw_algo(uint64)void'] | RegistryContractArgs['tuple']['withdraw_algo(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withdrawAlgo(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a vanity_configure(uint64,byte[],byte[],byte[])void method call against the Registry Contract contract
       */
      vanityConfigure(params: CallParams<RegistryContractArgs['obj']['vanity_configure(uint64,byte[],byte[],byte[])void'] | RegistryContractArgs['tuple']['vanity_configure(uint64,byte[],byte[],byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.vanityConfigure(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a log_dualstake_listings(uint64[])void method call against the Registry Contract contract
       */
      logDualstakeListings(params: CallParams<RegistryContractArgs['obj']['log_dualstake_listings(uint64[])void'] | RegistryContractArgs['tuple']['log_dualstake_listings(uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.logDualstakeListings(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a get_asa_dualstake_asset_id(uint64)uint64 method call against the Registry Contract contract
       */
      getAsaDualstakeAssetId(params: CallParams<RegistryContractArgs['obj']['get_asa_dualstake_asset_id(uint64)uint64'] | RegistryContractArgs['tuple']['get_asa_dualstake_asset_id(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getAsaDualstakeAssetId(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_asa_dualstake_asset_id(uint64)uint64', v))
        return this
      },
      /**
       * Add a get_asa_dualstake_app_id(uint64)uint64 method call against the Registry Contract contract
       */
      getAsaDualstakeAppId(params: CallParams<RegistryContractArgs['obj']['get_asa_dualstake_app_id(uint64)uint64'] | RegistryContractArgs['tuple']['get_asa_dualstake_app_id(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getAsaDualstakeAppId(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_asa_dualstake_app_id(uint64)uint64', v))
        return this
      },
      /**
       * Add a clear state call to the Registry Contract contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as RegistryContractComposer
  }
}
export type RegistryContractComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the change_admin_1(address)void ABI method.
   *
   * admin method. first of 2-step admin change process.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  changeAdmin_1(params?: CallParams<RegistryContractArgs['obj']['change_admin_1(address)void'] | RegistryContractArgs['tuple']['change_admin_1(address)void']>): RegistryContractComposer<[...TReturns, RegistryContractReturns['change_admin_1(address)void'] | undefined]>

  /**
   * Calls the change_admin_2()void ABI method.
   *
   * public method. second of 2-step admin change process. called by new admin in atomic group after change_admin_1
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  changeAdmin_2(params?: CallParams<RegistryContractArgs['obj']['change_admin_2()void'] | RegistryContractArgs['tuple']['change_admin_2()void']>): RegistryContractComposer<[...TReturns, RegistryContractReturns['change_admin_2()void'] | undefined]>

  /**
   * Calls the assign_contract()void ABI method.
   *
   * Register dualstake contract with registry
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  assignContract(params?: CallParams<RegistryContractArgs['obj']['assign_contract()void'] | RegistryContractArgs['tuple']['assign_contract()void']>): RegistryContractComposer<[...TReturns, RegistryContractReturns['assign_contract()void'] | undefined]>

  /**
   * Calls the unassign_contract(byte[])void ABI method.
   *
   * Delete dualstake contract registration
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  unassignContract(params?: CallParams<RegistryContractArgs['obj']['unassign_contract(byte[])void'] | RegistryContractArgs['tuple']['unassign_contract(byte[])void']>): RegistryContractComposer<[...TReturns, RegistryContractReturns['unassign_contract(byte[])void'] | undefined]>

  /**
   * Calls the withdraw_algo(uint64)void ABI method.
   *
   * Withdraw available algo from the contract escrow
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawAlgo(params?: CallParams<RegistryContractArgs['obj']['withdraw_algo(uint64)void'] | RegistryContractArgs['tuple']['withdraw_algo(uint64)void']>): RegistryContractComposer<[...TReturns, RegistryContractReturns['withdraw_algo(uint64)void'] | undefined]>

  /**
   * Calls the vanity_configure(uint64,byte[],byte[],byte[])void ABI method.
   *
   * Call dualSTAKE.configure2 to mint dualSTAKE token with ASA ID % 1000 === 0
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  vanityConfigure(params?: CallParams<RegistryContractArgs['obj']['vanity_configure(uint64,byte[],byte[],byte[])void'] | RegistryContractArgs['tuple']['vanity_configure(uint64,byte[],byte[],byte[])void']>): RegistryContractComposer<[...TReturns, RegistryContractReturns['vanity_configure(uint64,byte[],byte[],byte[])void'] | undefined]>

  /**
   * Calls the log_dualstake_listings(uint64[])void ABI method.
   *
   * abi_call dualstakes, log their ContractListing
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  logDualstakeListings(params?: CallParams<RegistryContractArgs['obj']['log_dualstake_listings(uint64[])void'] | RegistryContractArgs['tuple']['log_dualstake_listings(uint64[])void']>): RegistryContractComposer<[...TReturns, RegistryContractReturns['log_dualstake_listings(uint64[])void'] | undefined]>

  /**
   * Calls the get_asa_dualstake_asset_id(uint64)uint64 ABI method.
   *
   * C2C friendly call to get dualstake ASA ID from ASA ID. e.g. COOP -> coopALGO asa ID
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAsaDualstakeAssetId(params?: CallParams<RegistryContractArgs['obj']['get_asa_dualstake_asset_id(uint64)uint64'] | RegistryContractArgs['tuple']['get_asa_dualstake_asset_id(uint64)uint64']>): RegistryContractComposer<[...TReturns, RegistryContractReturns['get_asa_dualstake_asset_id(uint64)uint64'] | undefined]>

  /**
   * Calls the get_asa_dualstake_app_id(uint64)uint64 ABI method.
   *
   * C2C friendly call to get dualstake application ID from ASA ID. e.g. COOP -> coopALGO contract app ID
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAsaDualstakeAppId(params?: CallParams<RegistryContractArgs['obj']['get_asa_dualstake_app_id(uint64)uint64'] | RegistryContractArgs['tuple']['get_asa_dualstake_app_id(uint64)uint64']>): RegistryContractComposer<[...TReturns, RegistryContractReturns['get_asa_dualstake_app_id(uint64)uint64'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the Registry Contract smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): RegistryContractComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): RegistryContractComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<RegistryContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<RegistryContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<RegistryContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<RegistryContractComposerResults<TReturns>>
}
export type RegistryContractComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

