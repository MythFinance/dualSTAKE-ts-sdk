/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"dualSTAKE Contract","structs":{"ContractListing":[{"name":"rate","type":"uint64"},{"name":"algoBalance","type":"uint64"},{"name":"asaBalance","type":"uint64"},{"name":"staked","type":"uint64"},{"name":"lstId","type":"uint64"},{"name":"lstName","type":"string"},{"name":"asaId","type":"uint64"},{"name":"asaName","type":"string"},{"name":"asaUnitName","type":"string"},{"name":"asaDecimals","type":"uint16"},{"name":"needSwap","type":"bool"},{"name":"incentiveEligible","type":"bool"},{"name":"isOnline","type":"bool"},{"name":"upgrading","type":"bool"},{"name":"userProtestingStake","type":"uint64"}]},"methods":[{"name":"queue_update_fees","desc":"Fee admin method. Changes enforced to +/- 2.5% delta max\nIf increasing fees, schedules an update of the node+platform fees in bps. Decreasing fees are applied immediately. Return timestamp of applicability as uint64","args":[{"name":"new_platform_fee_bps","type":"uint64"},{"name":"new_noderunner_fee_bps","type":"uint64"}],"returns":{"type":"uint64"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"reset_update_fees","desc":"Fee admin method. Cancel a scheudled params update","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"configure","desc":"Admin or fee admin method. Bootstrap; configure global storage except LST ID.","args":[{"name":"asa_id","type":"uint64"},{"name":"lp_type","type":"byte[]"},{"name":"lp_id","type":"byte[]"},{"name":"platform_fee_bps","type":"uint64"},{"name":"noderunner_fee_bps","type":"uint64"},{"name":"admin_addr","type":"address"},{"name":"fee_admin_addr","type":"address"},{"name":"noderunner_addr","type":"address"},{"name":"delay_optin","type":"bool"},{"name":"max_balance","type":"uint64"},{"name":"upgrade_period","type":"uint64"},{"name":"fee_update_period","type":"uint64"},{"name":"fee_update_max_delta","type":"uint64"},{"name":"rate_precision","type":"uint64"},{"name":"tm2_app_id","type":"uint64"},{"name":"arc59_app_id","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"configure2","args":[{"name":"lst_asa_name","type":"byte[]"},{"name":"lst_unit_name","type":"byte[]"},{"name":"lst_url","type":"byte[]"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"change_admin_1","desc":"admin method. first of 2-step admin change process.","args":[{"name":"new_admin","type":"address"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"change_admin_2","desc":"public method. second of 2-step admin change process. called by new admin in atomic group after change_admin_1","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"change_noderunner","desc":"fee admin/node runner method. change node runner address.\nnode runner fees must be withdrawn before this, otherwise fee admin could steal node runner fees.","args":[{"name":"new_noderunner","type":"address"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"change_feeaddr","desc":"admin/fee admin method. change fee admin address","args":[{"name":"new_feeaddr","type":"address"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"update_max_balance","desc":"Fee admin method. Updates max algo stake","args":[{"name":"new_max_balance","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"verify_nfdomains","args":[{"name":"registry_app_id","type":"uint64"},{"name":"nfd_app_id","type":"uint64"},{"name":"name","type":"byte[]"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"withdraw_node_runner_fees","desc":"fee admin/node runner method. withdraw node runner fees. hard coded to send to node runner address.\nthe fee admin may call this to pay out the current node runner before changing node runner address","args":[{"name":"amount","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"withdraw_platform_fees","desc":"fee admin method. withdraw platform fees","args":[{"name":"amount","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"keyreg_online","desc":"Fee admin or node runner only. Send keyreg online.\nRequired payment if fee is not zero. Fee must be 2A if escrow is not account eligible, otherwise zero (paid by outer) Fee amount is validated against Global eligibility fee parameter","args":[{"name":"selection_key","type":"byte[]"},{"name":"voting_key","type":"byte[]"},{"name":"sp_key","type":"byte[]"},{"name":"first_round","type":"uint64"},{"name":"last_round","type":"uint64"},{"name":"key_dilution","type":"uint64"},{"name":"fee","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"keyreg_offline","desc":"Fee admin or noderunner only. Send keyreg offline for an escrow account","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"protest_stake","desc":"public method. locks dualSTAKE LST stake on the contract as \"upgrade protest\".\nThis blocks upgrading unless it is dissolved (redeemed & returned to user) The upgrade can also be cancelled, whereafter the dualSTAKE tokens can be returned to the user unchanged","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"unprotest_stake","desc":"public method. revoke protesting stake for self. Returns dualSTAKE tokens to user who protested with them.","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"admin_unprotest_stake","desc":"fee admin method. callable when there is no upgrade scheduled. returns the protesting dualSTAKE tokens to user $user. If the user has opted out of the dualSTAKE asset, this fails and the user can undo the protest stake themselves.","args":[{"name":"user","type":"address"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"dissolve_protesting_stake","desc":"fee admin method. called before upgrading to dissolve protesting stake for user $user. Redeems & returns ALGO and ASA to user.\nIf the user has opted out of the ASA: 1) ARC59 asset inbox is used to send the ASA and 2) the transaction and MBR fees for asset inbox are subtractd from the ALGO amount.","args":[{"name":"user","type":"address"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"queue_upgrade","desc":"admin method only.\nstage a contract upgrade. time applicability 2 weeks from current timestamp. hashes are variable length, 32b each, corresponding to SHA512_256 of approval program pages","args":[{"name":"hashes","type":"byte[]"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"reset_upgrade","desc":"admin or fee admin only.\nclear a staged contract upgrade","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"mint","desc":"Public method. Mint dualSTAKE lst\nNEXT transaction in group must be payment in ALGO if rate != 0, 2 txns after must be payment in ASA will swap and apply fee updates if needed sends dualSTAKE tokens to caller","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"redeem","desc":"Public method. Redeem dualSTAKE tokens back to ALGO+ASA.\ndualSTAKE:ALGO is always 1:1 dualSTAKE:ASA is (ASA balance):(global staked) will swap and apply fee updates if needed","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"get_rate","desc":"Public method. Returns the current rate as ABI uint64:\n1e8 * (ASA Balance) / (global staked) Returns zero if staked == 0 will swap and apply fee updates if needed","args":[],"returns":{"type":"uint64"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"get_contract_listing","desc":"Public method. Returns ABI struct ContractListing:\nrate (see get_rate)     escrow algo balance     escrow asa balance     staked balance     dualstake token ID     dualstake asset name     asa asset ID     asa asset name     asa unit name     asa decimals     need_swap     incentive_eligible     is_online     user_protesting_stake will swap and apply fee updates if needed","args":[{"name":"user","type":"address"}],"returns":{"type":"(uint64,uint64,uint64,uint64,uint64,string,uint64,string,string,uint16,bool,bool,bool,bool,uint64)","struct":"ContractListing"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"get_rate_and_balances","desc":"Public method. Returns ABI tuple[3]:\nrate (see get_rate)     escrow algo balance     escrow asa balance will swap and apply fee updates if needed","args":[],"returns":{"type":"(uint64,uint64,uint64)"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"get_need_swap","desc":"Public method. Returns whether the contract thinks it needs to swap","args":[],"returns":{"type":"bool"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"swap_or_fail","desc":"Public method. Perform swap or fail","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"nullun","desc":"Public empty method for opcode budget increase","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}}],"state":{"schema":{"global":{"ints":32,"bytes":32},"local":{"ints":0,"bytes":0}},"keys":{"global":{"version":{"key":"dg==","keyType":"AVMString","valueType":"AVMUint64"},"asa_id":{"key":"YXNhX2lk","keyType":"AVMString","valueType":"AVMUint64"},"lst_id":{"key":"bHN0X2lk","keyType":"AVMString","valueType":"AVMUint64"},"staked":{"key":"c3Rha2Vk","keyType":"AVMString","valueType":"AVMUint64"},"platform_fees":{"key":"cGxhdGZvcm1fZmVlcw==","keyType":"AVMString","valueType":"AVMUint64"},"noderunner_fees":{"key":"bm9kZXJ1bm5lcl9mZWVz","keyType":"AVMString","valueType":"AVMUint64"},"platform_fee_bps":{"key":"cGxhdGZvcm1fZmVlX2Jwcw==","keyType":"AVMString","valueType":"AVMUint64"},"noderunner_fee_bps":{"key":"bm9kZXJ1bm5lcl9mZWVfYnBz","keyType":"AVMString","valueType":"AVMUint64"},"admin_addr":{"key":"YWRtaW5fYWRkcg==","keyType":"AVMString","valueType":"AVMBytes"},"fee_admin_addr":{"key":"ZmVlX2FkbWluX2FkZHI=","keyType":"AVMString","valueType":"AVMBytes"},"noderunner_addr":{"key":"bm9kZXJ1bm5lcl9hZGRy","keyType":"AVMString","valueType":"AVMBytes"},"lp_type":{"key":"bHBfdHlwZQ==","keyType":"AVMString","valueType":"AVMBytes"},"lp_id":{"key":"bHBfaWQ=","keyType":"AVMString","valueType":"AVMBytes"},"delay_optin":{"key":"ZGVsYXlfb3B0aW4=","keyType":"AVMString","valueType":"AVMUint64"},"fee_update":{"key":"ZmVlX3VwZGF0ZQ==","keyType":"AVMString","valueType":"AVMBytes"},"contract_upgrade":{"key":"Y29udHJhY3RfdXBncmFkZQ==","keyType":"AVMString","valueType":"AVMBytes"},"protest_count":{"key":"cHJvdGVzdF9jbnQ=","keyType":"AVMString","valueType":"AVMUint64"},"protest_sum":{"key":"cHJvdGVzdF9zdW0=","keyType":"AVMString","valueType":"AVMUint64"},"upgrade_period":{"key":"dXBncmFkZV9wZXJpb2Q=","keyType":"AVMString","valueType":"AVMUint64"},"fee_update_period":{"key":"ZmVlX3VwZGF0ZV9wZXJpb2Q=","keyType":"AVMString","valueType":"AVMUint64"},"fee_update_max_delta":{"key":"ZmVlX3VwZGF0ZV9tYXhfZGVsdGE=","keyType":"AVMString","valueType":"AVMUint64"},"max_balance":{"key":"bWF4X2JhbGFuY2U=","keyType":"AVMString","valueType":"AVMUint64"},"rate_precision":{"key":"cmF0ZV9wcmVjaXNpb24=","keyType":"AVMString","valueType":"AVMUint64"},"tm2_app_id":{"key":"dG0yX2FwcF9pZA==","keyType":"AVMString","valueType":"AVMUint64"},"arc59_app_id":{"key":"YXJjNTlfYXBwX2lk","keyType":"AVMString","valueType":"AVMUint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDExCnR4biBOdW1BcHBBcmdzCmludCAwCj09CmJueiBtYWluX2w1OAp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCm1ldGhvZCAicXVldWVfdXBkYXRlX2ZlZXModWludDY0LHVpbnQ2NCl1aW50NjQiCj09CmJueiBtYWluX2w1Nwp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCm1ldGhvZCAicmVzZXRfdXBkYXRlX2ZlZXMoKXZvaWQiCj09CmJueiBtYWluX2w1Ngp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCm1ldGhvZCAiY29uZmlndXJlKHVpbnQ2NCxieXRlW10sYnl0ZVtdLHVpbnQ2NCx1aW50NjQsYWRkcmVzcyxhZGRyZXNzLGFkZHJlc3MsYm9vbCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQpdm9pZCIKPT0KYm56IG1haW5fbDU1CnR4bmEgQXBwbGljYXRpb25BcmdzIDAKbWV0aG9kICJjb25maWd1cmUyKGJ5dGVbXSxieXRlW10sYnl0ZVtdKXZvaWQiCj09CmJueiBtYWluX2w1NAp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCm1ldGhvZCAiY2hhbmdlX2FkbWluXzEoYWRkcmVzcyl2b2lkIgo9PQpibnogbWFpbl9sNTMKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAptZXRob2QgImNoYW5nZV9hZG1pbl8yKCl2b2lkIgo9PQpibnogbWFpbl9sNTIKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAptZXRob2QgImNoYW5nZV9ub2RlcnVubmVyKGFkZHJlc3Mpdm9pZCIKPT0KYm56IG1haW5fbDUxCnR4bmEgQXBwbGljYXRpb25BcmdzIDAKbWV0aG9kICJjaGFuZ2VfZmVlYWRkcihhZGRyZXNzKXZvaWQiCj09CmJueiBtYWluX2w1MAp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCm1ldGhvZCAidXBkYXRlX21heF9iYWxhbmNlKHVpbnQ2NCl2b2lkIgo9PQpibnogbWFpbl9sNDkKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAptZXRob2QgInZlcmlmeV9uZmRvbWFpbnModWludDY0LHVpbnQ2NCxieXRlW10pdm9pZCIKPT0KYm56IG1haW5fbDQ4CnR4bmEgQXBwbGljYXRpb25BcmdzIDAKbWV0aG9kICJ3aXRoZHJhd19ub2RlX3J1bm5lcl9mZWVzKHVpbnQ2NCl2b2lkIgo9PQpibnogbWFpbl9sNDcKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAptZXRob2QgIndpdGhkcmF3X3BsYXRmb3JtX2ZlZXModWludDY0KXZvaWQiCj09CmJueiBtYWluX2w0Ngp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCm1ldGhvZCAia2V5cmVnX29ubGluZShieXRlW10sYnl0ZVtdLGJ5dGVbXSx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQpdm9pZCIKPT0KYm56IG1haW5fbDQ1CnR4bmEgQXBwbGljYXRpb25BcmdzIDAKbWV0aG9kICJrZXlyZWdfb2ZmbGluZSgpdm9pZCIKPT0KYm56IG1haW5fbDQ0CnR4bmEgQXBwbGljYXRpb25BcmdzIDAKbWV0aG9kICJwcm90ZXN0X3N0YWtlKCl2b2lkIgo9PQpibnogbWFpbl9sNDMKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAptZXRob2QgInVucHJvdGVzdF9zdGFrZSgpdm9pZCIKPT0KYm56IG1haW5fbDQyCnR4bmEgQXBwbGljYXRpb25BcmdzIDAKbWV0aG9kICJhZG1pbl91bnByb3Rlc3Rfc3Rha2UoYWRkcmVzcyl2b2lkIgo9PQpibnogbWFpbl9sNDEKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAptZXRob2QgImRpc3NvbHZlX3Byb3Rlc3Rpbmdfc3Rha2UoYWRkcmVzcyl2b2lkIgo9PQpibnogbWFpbl9sNDAKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAptZXRob2QgInF1ZXVlX3VwZ3JhZGUoYnl0ZVtdKXZvaWQiCj09CmJueiBtYWluX2wzOQp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCm1ldGhvZCAicmVzZXRfdXBncmFkZSgpdm9pZCIKPT0KYm56IG1haW5fbDM4CnR4bmEgQXBwbGljYXRpb25BcmdzIDAKbWV0aG9kICJtaW50KCl2b2lkIgo9PQpibnogbWFpbl9sMzcKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAptZXRob2QgInJlZGVlbSgpdm9pZCIKPT0KYm56IG1haW5fbDM2CnR4bmEgQXBwbGljYXRpb25BcmdzIDAKbWV0aG9kICJnZXRfcmF0ZSgpdWludDY0Igo9PQpibnogbWFpbl9sMzUKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAptZXRob2QgImdldF9jb250cmFjdF9saXN0aW5nKGFkZHJlc3MpKHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsc3RyaW5nLHVpbnQ2NCxzdHJpbmcsc3RyaW5nLHVpbnQxNixib29sLGJvb2wsYm9vbCxib29sLHVpbnQ2NCkiCj09CmJueiBtYWluX2wzNAp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCm1ldGhvZCAiZ2V0X3JhdGVfYW5kX2JhbGFuY2VzKCkodWludDY0LHVpbnQ2NCx1aW50NjQpIgo9PQpibnogbWFpbl9sMzMKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAptZXRob2QgImdldF9uZWVkX3N3YXAoKWJvb2wiCj09CmJueiBtYWluX2wzMgp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCm1ldGhvZCAic3dhcF9vcl9mYWlsKCl2b2lkIgo9PQpibnogbWFpbl9sMzEKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAptZXRob2QgIm51bGx1bigpdm9pZCIKPT0KYm56IG1haW5fbDMwCmVycgptYWluX2wzMDoKdHhuIE9uQ29tcGxldGlvbgppbnQgTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnQgMAohPQomJgphc3NlcnQKY2FsbHN1YiBudWxsdW5jYXN0ZXJfNzkKaW50IDEKcmV0dXJuCm1haW5fbDMxOgp0eG4gT25Db21wbGV0aW9uCmludCBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludCAwCiE9CiYmCmFzc2VydApjYWxsc3ViIHN3YXBvcmZhaWxjYXN0ZXJfNzgKaW50IDEKcmV0dXJuCm1haW5fbDMyOgp0eG4gT25Db21wbGV0aW9uCmludCBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludCAwCiE9CiYmCmFzc2VydApjYWxsc3ViIGdldG5lZWRzd2FwY2FzdGVyXzc3CmludCAxCnJldHVybgptYWluX2wzMzoKdHhuIE9uQ29tcGxldGlvbgppbnQgTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnQgMAohPQomJgphc3NlcnQKY2FsbHN1YiBnZXRyYXRlYW5kYmFsYW5jZXNjYXN0ZXJfNzYKaW50IDEKcmV0dXJuCm1haW5fbDM0Ogp0eG4gT25Db21wbGV0aW9uCmludCBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludCAwCiE9CiYmCmFzc2VydApjYWxsc3ViIGdldGNvbnRyYWN0bGlzdGluZ2Nhc3Rlcl83NQppbnQgMQpyZXR1cm4KbWFpbl9sMzU6CnR4biBPbkNvbXBsZXRpb24KaW50IE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50IDAKIT0KJiYKYXNzZXJ0CmNhbGxzdWIgZ2V0cmF0ZWNhc3Rlcl83NAppbnQgMQpyZXR1cm4KbWFpbl9sMzY6CnR4biBPbkNvbXBsZXRpb24KaW50IE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50IDAKIT0KJiYKYXNzZXJ0CmNhbGxzdWIgcmVkZWVtY2FzdGVyXzczCmludCAxCnJldHVybgptYWluX2wzNzoKdHhuIE9uQ29tcGxldGlvbgppbnQgTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnQgMAohPQomJgphc3NlcnQKY2FsbHN1YiBtaW50Y2FzdGVyXzcyCmludCAxCnJldHVybgptYWluX2wzODoKdHhuIE9uQ29tcGxldGlvbgppbnQgTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnQgMAohPQomJgphc3NlcnQKY2FsbHN1YiByZXNldHVwZ3JhZGVjYXN0ZXJfNzEKaW50IDEKcmV0dXJuCm1haW5fbDM5Ogp0eG4gT25Db21wbGV0aW9uCmludCBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludCAwCiE9CiYmCmFzc2VydApjYWxsc3ViIHF1ZXVldXBncmFkZWNhc3Rlcl83MAppbnQgMQpyZXR1cm4KbWFpbl9sNDA6CnR4biBPbkNvbXBsZXRpb24KaW50IE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50IDAKIT0KJiYKYXNzZXJ0CmNhbGxzdWIgZGlzc29sdmVwcm90ZXN0aW5nc3Rha2VjYXN0ZXJfNjkKaW50IDEKcmV0dXJuCm1haW5fbDQxOgp0eG4gT25Db21wbGV0aW9uCmludCBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludCAwCiE9CiYmCmFzc2VydApjYWxsc3ViIGFkbWludW5wcm90ZXN0c3Rha2VjYXN0ZXJfNjgKaW50IDEKcmV0dXJuCm1haW5fbDQyOgp0eG4gT25Db21wbGV0aW9uCmludCBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludCAwCiE9CiYmCmFzc2VydApjYWxsc3ViIHVucHJvdGVzdHN0YWtlY2FzdGVyXzY3CmludCAxCnJldHVybgptYWluX2w0MzoKdHhuIE9uQ29tcGxldGlvbgppbnQgTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnQgMAohPQomJgphc3NlcnQKY2FsbHN1YiBwcm90ZXN0c3Rha2VjYXN0ZXJfNjYKaW50IDEKcmV0dXJuCm1haW5fbDQ0Ogp0eG4gT25Db21wbGV0aW9uCmludCBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludCAwCiE9CiYmCmFzc2VydApjYWxsc3ViIGtleXJlZ29mZmxpbmVjYXN0ZXJfNjUKaW50IDEKcmV0dXJuCm1haW5fbDQ1Ogp0eG4gT25Db21wbGV0aW9uCmludCBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludCAwCiE9CiYmCmFzc2VydApjYWxsc3ViIGtleXJlZ29ubGluZWNhc3Rlcl82NAppbnQgMQpyZXR1cm4KbWFpbl9sNDY6CnR4biBPbkNvbXBsZXRpb24KaW50IE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50IDAKIT0KJiYKYXNzZXJ0CmNhbGxzdWIgd2l0aGRyYXdwbGF0Zm9ybWZlZXNjYXN0ZXJfNjMKaW50IDEKcmV0dXJuCm1haW5fbDQ3Ogp0eG4gT25Db21wbGV0aW9uCmludCBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludCAwCiE9CiYmCmFzc2VydApjYWxsc3ViIHdpdGhkcmF3bm9kZXJ1bm5lcmZlZXNjYXN0ZXJfNjIKaW50IDEKcmV0dXJuCm1haW5fbDQ4Ogp0eG4gT25Db21wbGV0aW9uCmludCBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludCAwCiE9CiYmCmFzc2VydApjYWxsc3ViIHZlcmlmeW5mZG9tYWluc2Nhc3Rlcl82MQppbnQgMQpyZXR1cm4KbWFpbl9sNDk6CnR4biBPbkNvbXBsZXRpb24KaW50IE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50IDAKIT0KJiYKYXNzZXJ0CmNhbGxzdWIgdXBkYXRlbWF4YmFsYW5jZWNhc3Rlcl82MAppbnQgMQpyZXR1cm4KbWFpbl9sNTA6CnR4biBPbkNvbXBsZXRpb24KaW50IE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50IDAKIT0KJiYKYXNzZXJ0CmNhbGxzdWIgY2hhbmdlZmVlYWRkcmNhc3Rlcl81OQppbnQgMQpyZXR1cm4KbWFpbl9sNTE6CnR4biBPbkNvbXBsZXRpb24KaW50IE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50IDAKIT0KJiYKYXNzZXJ0CmNhbGxzdWIgY2hhbmdlbm9kZXJ1bm5lcmNhc3Rlcl81OAppbnQgMQpyZXR1cm4KbWFpbl9sNTI6CnR4biBPbkNvbXBsZXRpb24KaW50IE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50IDAKIT0KJiYKYXNzZXJ0CmNhbGxzdWIgY2hhbmdlYWRtaW4yY2FzdGVyXzU3CmludCAxCnJldHVybgptYWluX2w1MzoKdHhuIE9uQ29tcGxldGlvbgppbnQgTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnQgMAohPQomJgphc3NlcnQKY2FsbHN1YiBjaGFuZ2VhZG1pbjFjYXN0ZXJfNTYKaW50IDEKcmV0dXJuCm1haW5fbDU0Ogp0eG4gT25Db21wbGV0aW9uCmludCBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludCAwCiE9CiYmCmFzc2VydApjYWxsc3ViIGNvbmZpZ3VyZTJjYXN0ZXJfNTUKaW50IDEKcmV0dXJuCm1haW5fbDU1Ogp0eG4gT25Db21wbGV0aW9uCmludCBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludCAwCiE9CiYmCmFzc2VydApjYWxsc3ViIGNvbmZpZ3VyZWNhc3Rlcl81NAppbnQgMQpyZXR1cm4KbWFpbl9sNTY6CnR4biBPbkNvbXBsZXRpb24KaW50IE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50IDAKIT0KJiYKYXNzZXJ0CmNhbGxzdWIgcmVzZXR1cGRhdGVmZWVzY2FzdGVyXzUzCmludCAxCnJldHVybgptYWluX2w1NzoKdHhuIE9uQ29tcGxldGlvbgppbnQgTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnQgMAohPQomJgphc3NlcnQKY2FsbHN1YiBxdWV1ZXVwZGF0ZWZlZXNjYXN0ZXJfNTIKaW50IDEKcmV0dXJuCm1haW5fbDU4Ogp0eG4gT25Db21wbGV0aW9uCmludCBOb09wCj09CmJueiBtYWluX2w4Nwp0eG4gT25Db21wbGV0aW9uCmludCBPcHRJbgo9PQpibnogbWFpbl9sODYKdHhuIE9uQ29tcGxldGlvbgppbnQgQ2xvc2VPdXQKPT0KYm56IG1haW5fbDg1CnR4biBPbkNvbXBsZXRpb24KaW50IFVwZGF0ZUFwcGxpY2F0aW9uCj09CmJueiBtYWluX2w3MQp0eG4gT25Db21wbGV0aW9uCmludCBEZWxldGVBcHBsaWNhdGlvbgo9PQpibnogbWFpbl9sNjQKZXJyCm1haW5fbDY0Ogp0eG4gQXBwbGljYXRpb25JRAppbnQgMAohPQphc3NlcnQKY2FsbHN1YiBhc3NlcnRhZG1pbl80CmJ5dGUgInN0YWtlZCIKYXBwX2dsb2JhbF9nZXQKaW50IDAKPT0KIQpibnogbWFpbl9sNzAKYnl0ZSAibm9kZXJ1bm5lcl9mZWVzIgphcHBfZ2xvYmFsX2dldAppbnQgMAo9PQohCmJueiBtYWluX2w2OQppdHhuX2JlZ2luCmludCBhY2ZnCml0eG5fZmllbGQgVHlwZUVudW0KYnl0ZSAibHN0X2lkIgphcHBfZ2xvYmFsX2dldAppdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0Cml0eG5fc3VibWl0Cmdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCmJ5dGUgImFzYV9pZCIKYXBwX2dsb2JhbF9nZXQKYXNzZXRfaG9sZGluZ19nZXQgQXNzZXRCYWxhbmNlCnN0b3JlIDMKc3RvcmUgMgpsb2FkIDMKYm56IG1haW5fbDY4Cm1haW5fbDY3OgppdHhuX2JlZ2luCmludCBwYXkKaXR4bl9maWVsZCBUeXBlRW51bQppbnQgMAppdHhuX2ZpZWxkIEFtb3VudAp0eG4gU2VuZGVyCml0eG5fZmllbGQgQ2xvc2VSZW1haW5kZXJUbwp0eG4gU2VuZGVyCml0eG5fZmllbGQgUmVjZWl2ZXIKaXR4bl9zdWJtaXQKaW50IDEKcmV0dXJuCm1haW5fbDY4OgppdHhuX2JlZ2luCmludCBheGZlcgppdHhuX2ZpZWxkIFR5cGVFbnVtCmJ5dGUgImFzYV9pZCIKYXBwX2dsb2JhbF9nZXQKaXR4bl9maWVsZCBYZmVyQXNzZXQKdHhuIFNlbmRlcgppdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKdHhuIFNlbmRlcgppdHhuX2ZpZWxkIEFzc2V0Q2xvc2VUbwppbnQgMAppdHhuX2ZpZWxkIEFzc2V0QW1vdW50Cml0eG5fc3VibWl0CmIgbWFpbl9sNjcKbWFpbl9sNjk6CmJ5dGUgIkVSUiBORiIKbG9nCmVycgptYWluX2w3MDoKYnl0ZSAiRVJSIFNUSyIKbG9nCmVycgptYWluX2w3MToKdHhuIEFwcGxpY2F0aW9uSUQKaW50IDAKIT0KYXNzZXJ0CmNhbGxzdWIgYXNzZXJ0YWRtaW5vcmZlZWFkbWluXzYKYnl0ZSAiY29udHJhY3RfdXBncmFkZSIKYXBwX2dsb2JhbF9nZXQKYnl0ZSAiIgohPQohCmJueiBtYWluX2w4NApieXRlICJjb250cmFjdF91cGdyYWRlIgphcHBfZ2xvYmFsX2dldAppbnQgMApleHRyYWN0X3VpbnQzMgpnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCjwKIQpibnogbWFpbl9sODMKYnl0ZSAicHJvdGVzdF9zdW0iCmFwcF9nbG9iYWxfZ2V0CmludCAwCj09CiEKYm56IG1haW5fbDgyCmJ5dGUgImNvbnRyYWN0X3VwZ3JhZGUiCmFwcF9nbG9iYWxfZ2V0CmV4dHJhY3QgNCAwCnN0b3JlIDAKYnl0ZSAweDQyNTEzN2FjCmxvYWQgMApsZW4KaW50IDMyCi8KaXRvYgpjb25jYXQKdHhuIE51bUFwcHJvdmFsUHJvZ3JhbVBhZ2VzCml0b2IKY29uY2F0CmxvZwp0eG4gTnVtQXBwcm92YWxQcm9ncmFtUGFnZXMKbG9hZCAwCmxlbgppbnQgMzIKLwo9PQohCmJueiBtYWluX2w4MQppbnQgMApzdG9yZSAxCm1haW5fbDc2Ogpsb2FkIDEKdHhuIE51bUFwcHJvdmFsUHJvZ3JhbVBhZ2VzCjwKYm56IG1haW5fbDc4CmJ5dGUgImNvbnRyYWN0X3VwZ3JhZGUiCmJ5dGUgIiIKYXBwX2dsb2JhbF9wdXQKaW50IDEKcmV0dXJuCm1haW5fbDc4Ogpsb2FkIDAKaW50IDMyCmxvYWQgMQoqCmludCAzMgpleHRyYWN0Mwpsb2FkIDEKdHhuYXMgQXBwcm92YWxQcm9ncmFtUGFnZXMKc2hhNTEyXzI1Ngo9PQohCmJueiBtYWluX2w4MApieXRlIDB4Mjg4MmI0MGUKbG9hZCAxCml0b2IKY29uY2F0CmxvZwpsb2FkIDEKaW50IDEKKwpzdG9yZSAxCmIgbWFpbl9sNzYKbWFpbl9sODA6CmJ5dGUgIkVSUiBIQVNIIgpsb2cKZXJyCm1haW5fbDgxOgpieXRlICJFUlIgU0laRSIKbG9nCmVycgptYWluX2w4MjoKYnl0ZSAiRVJSIFBSVFNUIgpsb2cKZXJyCm1haW5fbDgzOgpieXRlICJFUlIgRUFSTFkiCmxvZwplcnIKbWFpbl9sODQ6CmJ5dGUgIkVSUiBOTyBVUEciCmxvZwplcnIKbWFpbl9sODU6CmludCAwCnJldHVybgptYWluX2w4NjoKaW50IDAKcmV0dXJuCm1haW5fbDg3Ogp0eG4gQXBwbGljYXRpb25JRAppbnQgMAo9PQphc3NlcnQKY2FsbHN1YiBjcmVhdGVzdG9yYWdlXzgKaW50IDEKcmV0dXJuCgovLyBpbnRfdG9fYXNjaWkKaW50dG9hc2NpaV8wOgpwcm90byAxIDEKYnl0ZSAiMDEyMzQ1Njc4OSIKZnJhbWVfZGlnIC0xCmludCAxCmV4dHJhY3QzCnJldHN1YgoKLy8gaXRvYQppdG9hXzE6CnByb3RvIDEgMQpmcmFtZV9kaWcgLTEKaW50IDAKPT0KYm56IGl0b2FfMV9sNQpmcmFtZV9kaWcgLTEKaW50IDEwCi8KaW50IDAKPgpibnogaXRvYV8xX2w0CmJ5dGUgIiIKaXRvYV8xX2wzOgpmcmFtZV9kaWcgLTEKaW50IDEwCiUKY2FsbHN1YiBpbnR0b2FzY2lpXzAKY29uY2F0CmIgaXRvYV8xX2w2Cml0b2FfMV9sNDoKZnJhbWVfZGlnIC0xCmludCAxMAovCmNhbGxzdWIgaXRvYV8xCmIgaXRvYV8xX2wzCml0b2FfMV9sNToKYnl0ZSAiMCIKaXRvYV8xX2w2OgpyZXRzdWIKCi8vIHNlbmRfYWxnbwpzZW5kYWxnb18yOgpwcm90byAzIDAKaXR4bl9iZWdpbgppbnQgcGF5Cml0eG5fZmllbGQgVHlwZUVudW0KZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKaXR4bl9maWVsZCBTZW5kZXIKZnJhbWVfZGlnIC0zCml0eG5fZmllbGQgUmVjZWl2ZXIKZnJhbWVfZGlnIC0yCml0eG5fZmllbGQgQW1vdW50CmZyYW1lX2RpZyAtMQppdHhuX2ZpZWxkIEZlZQppdHhuX3N1Ym1pdApyZXRzdWIKCi8vIHNlbmRfYXNhCnNlbmRhc2FfMzoKcHJvdG8gNCAwCml0eG5fYmVnaW4KaW50IGF4ZmVyCml0eG5fZmllbGQgVHlwZUVudW0KZnJhbWVfZGlnIC0zCml0eG5fZmllbGQgWGZlckFzc2V0CmZyYW1lX2RpZyAtNAppdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKZnJhbWVfZGlnIC0yCml0eG5fZmllbGQgQXNzZXRBbW91bnQKZnJhbWVfZGlnIC0xCml0eG5fZmllbGQgRmVlCml0eG5fc3VibWl0CnJldHN1YgoKLy8gYXNzZXJ0X2FkbWluCmFzc2VydGFkbWluXzQ6CnByb3RvIDAgMAp0eG4gU2VuZGVyCmJ5dGUgImFkbWluX2FkZHIiCmFwcF9nbG9iYWxfZ2V0Cj09CiEKYnogYXNzZXJ0YWRtaW5fNF9sMgpieXRlICJFUlIgVU5BVVRIIgpsb2cKZXJyCmFzc2VydGFkbWluXzRfbDI6CnJldHN1YgoKLy8gYXNzZXJ0X2ZlZV9hZG1pbgphc3NlcnRmZWVhZG1pbl81Ogpwcm90byAwIDAKdHhuIFNlbmRlcgpieXRlICJmZWVfYWRtaW5fYWRkciIKYXBwX2dsb2JhbF9nZXQKPT0KIQpieiBhc3NlcnRmZWVhZG1pbl81X2wyCmJ5dGUgIkVSUiBVTkFVVEgiCmxvZwplcnIKYXNzZXJ0ZmVlYWRtaW5fNV9sMjoKcmV0c3ViCgovLyBhc3NlcnRfYWRtaW5fb3JfZmVlX2FkbWluCmFzc2VydGFkbWlub3JmZWVhZG1pbl82Ogpwcm90byAwIDAKdHhuIFNlbmRlcgpieXRlICJmZWVfYWRtaW5fYWRkciIKYXBwX2dsb2JhbF9nZXQKPT0KYm56IGFzc2VydGFkbWlub3JmZWVhZG1pbl82X2wyCmNhbGxzdWIgYXNzZXJ0YWRtaW5fNApiIGFzc2VydGFkbWlub3JmZWVhZG1pbl82X2wzCmFzc2VydGFkbWlub3JmZWVhZG1pbl82X2wyOgpyZXRzdWIKYXNzZXJ0YWRtaW5vcmZlZWFkbWluXzZfbDM6CnJldHN1YgoKLy8gYXNzZXJ0X2ZlZV9hZG1pbl9vcl9ub2RlX3J1bm5lcgphc3NlcnRmZWVhZG1pbm9ybm9kZXJ1bm5lcl83Ogpwcm90byAwIDAKdHhuIFNlbmRlcgpieXRlICJub2RlcnVubmVyX2FkZHIiCmFwcF9nbG9iYWxfZ2V0Cj09CmJueiBhc3NlcnRmZWVhZG1pbm9ybm9kZXJ1bm5lcl83X2wyCmNhbGxzdWIgYXNzZXJ0ZmVlYWRtaW5fNQpiIGFzc2VydGZlZWFkbWlub3Jub2RlcnVubmVyXzdfbDMKYXNzZXJ0ZmVlYWRtaW5vcm5vZGVydW5uZXJfN19sMjoKcmV0c3ViCmFzc2VydGZlZWFkbWlub3Jub2RlcnVubmVyXzdfbDM6CnJldHN1YgoKLy8gY3JlYXRlX3N0b3JhZ2UKY3JlYXRlc3RvcmFnZV84Ogpwcm90byAwIDAKYnl0ZSAiYXNhX2lkIgphcHBfZ2xvYmFsX2dldAppbnQgMAo9PQohCmJ6IGNyZWF0ZXN0b3JhZ2VfOF9sMgpieXRlICJFUlIgSSIKbG9nCmVycgpjcmVhdGVzdG9yYWdlXzhfbDI6CmJ5dGUgInYiCmludCAxCmFwcF9nbG9iYWxfcHV0CmJ5dGUgImFzYV9pZCIKaW50IDAKYXBwX2dsb2JhbF9wdXQKYnl0ZSAibHN0X2lkIgppbnQgMAphcHBfZ2xvYmFsX3B1dApieXRlICJkZWxheV9vcHRpbiIKaW50IDAKYXBwX2dsb2JhbF9wdXQKYnl0ZSAic3Rha2VkIgppbnQgMAphcHBfZ2xvYmFsX3B1dApieXRlICJwbGF0Zm9ybV9mZWVzIgppbnQgMAphcHBfZ2xvYmFsX3B1dApieXRlICJub2RlcnVubmVyX2ZlZXMiCmludCAwCmFwcF9nbG9iYWxfcHV0CmJ5dGUgInBsYXRmb3JtX2ZlZV9icHMiCmludCAwCmFwcF9nbG9iYWxfcHV0CmJ5dGUgIm5vZGVydW5uZXJfZmVlX2JwcyIKaW50IDAKYXBwX2dsb2JhbF9wdXQKYnl0ZSAiYWRtaW5fYWRkciIKdHhuIFNlbmRlcgphcHBfZ2xvYmFsX3B1dApieXRlICJmZWVfYWRtaW5fYWRkciIKdHhuIFNlbmRlcgphcHBfZ2xvYmFsX3B1dApieXRlICJub2RlcnVubmVyX2FkZHIiCnR4biBTZW5kZXIKYXBwX2dsb2JhbF9wdXQKYnl0ZSAibHBfdHlwZSIKYnl0ZSAiIgphcHBfZ2xvYmFsX3B1dApieXRlICJscF9pZCIKYnl0ZSAiIgphcHBfZ2xvYmFsX3B1dApieXRlICJmZWVfdXBkYXRlIgpieXRlICIiCmFwcF9nbG9iYWxfcHV0CmJ5dGUgImNvbnRyYWN0X3VwZ3JhZGUiCmJ5dGUgIiIKYXBwX2dsb2JhbF9wdXQKYnl0ZSAicHJvdGVzdF9jbnQiCmludCAwCmFwcF9nbG9iYWxfcHV0CmJ5dGUgInByb3Rlc3Rfc3VtIgppbnQgMAphcHBfZ2xvYmFsX3B1dApieXRlICJ1cGdyYWRlX3BlcmlvZCIKaW50IDAKYXBwX2dsb2JhbF9wdXQKYnl0ZSAiZmVlX3VwZGF0ZV9wZXJpb2QiCmludCAwCmFwcF9nbG9iYWxfcHV0CmJ5dGUgImZlZV91cGRhdGVfbWF4X2RlbHRhIgppbnQgMAphcHBfZ2xvYmFsX3B1dApieXRlICJtYXhfYmFsYW5jZSIKaW50IDAKYXBwX2dsb2JhbF9wdXQKYnl0ZSAicmF0ZV9wcmVjaXNpb24iCmludCAwCmFwcF9nbG9iYWxfcHV0CmJ5dGUgInRtMl9hcHBfaWQiCmludCAwCmFwcF9nbG9iYWxfcHV0CmJ5dGUgImFyYzU5X2FwcF9pZCIKaW50IDAKYXBwX2dsb2JhbF9wdXQKcmV0c3ViCgovLyBtYXliZV9hcHBseV9mZWVfdXBkYXRlCm1heWJlYXBwbHlmZWV1cGRhdGVfOToKcHJvdG8gMCAwCmJ5dGUgImZlZV91cGRhdGUiCmFwcF9nbG9iYWxfZ2V0CmJ5dGUgIiIKIT0KYnogbWF5YmVhcHBseWZlZXVwZGF0ZV85X2wzCmJ5dGUgImZlZV91cGRhdGUiCmFwcF9nbG9iYWxfZ2V0CmludCAwCmV4dHJhY3RfdWludDY0Cmdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKPApieiBtYXliZWFwcGx5ZmVldXBkYXRlXzlfbDMKYnl0ZSAiZmVlX3VwZGF0ZSIKYXBwX2dsb2JhbF9nZXQKaW50IDgKZXh0cmFjdF91aW50NjQKYnl0ZSAiZmVlX3VwZGF0ZSIKYXBwX2dsb2JhbF9nZXQKaW50IDE2CmV4dHJhY3RfdWludDY0CmNhbGxzdWIgYXBwbHlmZWV1cGRhdGVzXzEwCmJ5dGUgImZlZV91cGRhdGUiCmJ5dGUgIiIKYXBwX2dsb2JhbF9wdXQKbWF5YmVhcHBseWZlZXVwZGF0ZV85X2wzOgpyZXRzdWIKCi8vIGFwcGx5X2ZlZV91cGRhdGVzCmFwcGx5ZmVldXBkYXRlc18xMDoKcHJvdG8gMiAwCmJ5dGUgIm5vZGVydW5uZXJfZmVlX2JwcyIKZnJhbWVfZGlnIC0yCmFwcF9nbG9iYWxfcHV0CmJ5dGUgInBsYXRmb3JtX2ZlZV9icHMiCmZyYW1lX2RpZyAtMQphcHBfZ2xvYmFsX3B1dApieXRlIDB4MDMxMGMyZWQKZnJhbWVfZGlnIC0yCml0b2IKY29uY2F0CmZyYW1lX2RpZyAtMQppdG9iCmNvbmNhdApsb2cKcmV0c3ViCgovLyBxdWV1ZV91cGRhdGVfZmVlcwpxdWV1ZXVwZGF0ZWZlZXNfMTE6CnByb3RvIDIgMQppbnQgMApjYWxsc3ViIGFzc2VydGZlZWFkbWluXzUKYnl0ZSAibm9kZXJ1bm5lcl9mZWVfYnBzIgphcHBfZ2xvYmFsX2dldApmcmFtZV9kaWcgLTEKPgpibnogcXVldWV1cGRhdGVmZWVzXzExX2wxMgpmcmFtZV9kaWcgLTEKYnl0ZSAibm9kZXJ1bm5lcl9mZWVfYnBzIgphcHBfZ2xvYmFsX2dldAotCnF1ZXVldXBkYXRlZmVlc18xMV9sMjoKYnl0ZSAiZmVlX3VwZGF0ZV9tYXhfZGVsdGEiCmFwcF9nbG9iYWxfZ2V0Cjw9CiEKYm56IHF1ZXVldXBkYXRlZmVlc18xMV9sMTEKYnl0ZSAicGxhdGZvcm1fZmVlX2JwcyIKYXBwX2dsb2JhbF9nZXQKZnJhbWVfZGlnIC0yCj4KYm56IHF1ZXVldXBkYXRlZmVlc18xMV9sMTAKZnJhbWVfZGlnIC0yCmJ5dGUgInBsYXRmb3JtX2ZlZV9icHMiCmFwcF9nbG9iYWxfZ2V0Ci0KcXVldWV1cGRhdGVmZWVzXzExX2w1OgpieXRlICJmZWVfdXBkYXRlX21heF9kZWx0YSIKYXBwX2dsb2JhbF9nZXQKPD0KIQpibnogcXVldWV1cGRhdGVmZWVzXzExX2w5CmZyYW1lX2RpZyAtMQpieXRlICJub2RlcnVubmVyX2ZlZV9icHMiCmFwcF9nbG9iYWxfZ2V0Cjw9CmZyYW1lX2RpZyAtMgpieXRlICJwbGF0Zm9ybV9mZWVfYnBzIgphcHBfZ2xvYmFsX2dldAo8PQomJgpibnogcXVldWV1cGRhdGVmZWVzXzExX2w4Cmdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKYnl0ZSAiZmVlX3VwZGF0ZV9wZXJpb2QiCmFwcF9nbG9iYWxfZ2V0CisKc3RvcmUgNApieXRlICJmZWVfdXBkYXRlIgpsb2FkIDQKaXRvYgpmcmFtZV9kaWcgLTEKaXRvYgpjb25jYXQKZnJhbWVfZGlnIC0yCml0b2IKY29uY2F0CmFwcF9nbG9iYWxfcHV0CmJ5dGUgMHg1MDYzOTM0MQpsb2FkIDQKaXRvYgpjb25jYXQKZnJhbWVfZGlnIC0xCml0b2IKY29uY2F0CmZyYW1lX2RpZyAtMgppdG9iCmNvbmNhdApsb2cKbG9hZCA0CmZyYW1lX2J1cnkgMApiIHF1ZXVldXBkYXRlZmVlc18xMV9sMTMKcXVldWV1cGRhdGVmZWVzXzExX2w4OgpmcmFtZV9kaWcgLTEKZnJhbWVfZGlnIC0yCmNhbGxzdWIgYXBwbHlmZWV1cGRhdGVzXzEwCmludCAwCmZyYW1lX2J1cnkgMApiIHF1ZXVldXBkYXRlZmVlc18xMV9sMTMKcXVldWV1cGRhdGVmZWVzXzExX2w5OgpieXRlICJFUlIgREVMVEEgUCIKbG9nCmVycgpxdWV1ZXVwZGF0ZWZlZXNfMTFfbDEwOgpieXRlICJwbGF0Zm9ybV9mZWVfYnBzIgphcHBfZ2xvYmFsX2dldApmcmFtZV9kaWcgLTIKLQpiIHF1ZXVldXBkYXRlZmVlc18xMV9sNQpxdWV1ZXVwZGF0ZWZlZXNfMTFfbDExOgpieXRlICJFUlIgREVMVEEgTiIKbG9nCmVycgpxdWV1ZXVwZGF0ZWZlZXNfMTFfbDEyOgpieXRlICJub2RlcnVubmVyX2ZlZV9icHMiCmFwcF9nbG9iYWxfZ2V0CmZyYW1lX2RpZyAtMQotCmIgcXVldWV1cGRhdGVmZWVzXzExX2wyCnF1ZXVldXBkYXRlZmVlc18xMV9sMTM6CnJldHN1YgoKLy8gcmVzZXRfdXBkYXRlX2ZlZXMKcmVzZXR1cGRhdGVmZWVzXzEyOgpwcm90byAwIDAKY2FsbHN1YiBhc3NlcnRmZWVhZG1pbl81CmJ5dGUgImZlZV91cGRhdGUiCmFwcF9nbG9iYWxfZ2V0CmJ5dGUgIiIKIT0KIQpieiByZXNldHVwZGF0ZWZlZXNfMTJfbDIKYnl0ZSAiRVJSIE5PVSIKbG9nCmVycgpyZXNldHVwZGF0ZWZlZXNfMTJfbDI6CmJ5dGUgImZlZV91cGRhdGUiCmJ5dGUgIiIKYXBwX2dsb2JhbF9wdXQKcmV0c3ViCgovLyBwcmVfbWludF9vcl9yZWRlZW0KcHJlbWludG9ycmVkZWVtXzEzOgpwcm90byAwIDEKaW50IDI1NTI1NTI1NQpzdG9yZSAyNTUKY2FsbHN1YiBtYXliZWFwcGx5ZmVldXBkYXRlXzkKYnl0ZSAiZGVsYXlfb3B0aW4iCmFwcF9nbG9iYWxfZ2V0CmludCAwCj09Cmdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCmJhbGFuY2UKZ2xvYmFsIFBheW91dHNNaW5CYWxhbmNlCj4KfHwKYnl0ZSAic3Rha2VkIgphcHBfZ2xvYmFsX2dldAppbnQgMAo+CiYmCmNhbGxzdWIgZ2V0YWN0dWFsZXhwZWN0ZWRiYWxhbmNlZGVsdGFfMTcKZ2xvYmFsIE1pblR4bkZlZQppbnQgMTAwMAoqCj4KJiYKYm56IHByZW1pbnRvcnJlZGVlbV8xM19sMgppbnQgMApyZXRzdWIKcHJlbWludG9ycmVkZWVtXzEzX2wyOgpjYWxsc3ViIG1heWJlb3B0aW5fMTUKY2FsbHN1YiBzd2FwXzE0CnJldHN1YgoKLy8gc3dhcApzd2FwXzE0Ogpwcm90byAwIDEKY2FsbHN1YiBnZXRhY3R1YWxleHBlY3RlZGJhbGFuY2VkZWx0YV8xNwppbnQgMwpnbG9iYWwgTWluVHhuRmVlCioKLQpzdG9yZSAxMQpieXRlICJwbGF0Zm9ybV9mZWVfYnBzIgphcHBfZ2xvYmFsX2dldApsb2FkIDExCioKaW50IDEwMDAwCi8Kc3RvcmUgMTIKYnl0ZSAicGxhdGZvcm1fZmVlcyIKbG9hZCAxMgpieXRlICJwbGF0Zm9ybV9mZWVzIgphcHBfZ2xvYmFsX2dldAorCmFwcF9nbG9iYWxfcHV0CmJ5dGUgIm5vZGVydW5uZXJfZmVlX2JwcyIKYXBwX2dsb2JhbF9nZXQKbG9hZCAxMQoqCmludCAxMDAwMAovCnN0b3JlIDE0CmJ5dGUgIm5vZGVydW5uZXJfZmVlcyIKbG9hZCAxNApieXRlICJub2RlcnVubmVyX2ZlZXMiCmFwcF9nbG9iYWxfZ2V0CisKYXBwX2dsb2JhbF9wdXQKbG9hZCAxMQpsb2FkIDE0Ci0KbG9hZCAxMgotCnN0b3JlIDE1CmJ5dGUgImxwX3R5cGUiCmFwcF9nbG9iYWxfZ2V0CmJ5dGUgInRtMiIKPT0KYm56IHN3YXBfMTRfbDIKYnl0ZSAiRVJSICFJTVBMIgpsb2cKZXJyCmludCAwCnN3YXBfMTRfbDI6CmJ5dGUgImxwX2lkIgphcHBfZ2xvYmFsX2dldApieXRlICJ0bTJfYXBwX2lkIgphcHBfZ2xvYmFsX2dldApieXRlICJhc3NldF8xX2lkIgphcHBfbG9jYWxfZ2V0X2V4CnN0b3JlIDE4CnN0b3JlIDE3CmJ5dGUgImxwX2lkIgphcHBfZ2xvYmFsX2dldApieXRlICJ0bTJfYXBwX2lkIgphcHBfZ2xvYmFsX2dldApieXRlICJhc3NldF8xX3Jlc2VydmVzIgphcHBfbG9jYWxfZ2V0X2V4CnN0b3JlIDIwCnN0b3JlIDE5CmJ5dGUgImxwX2lkIgphcHBfZ2xvYmFsX2dldApieXRlICJ0bTJfYXBwX2lkIgphcHBfZ2xvYmFsX2dldApieXRlICJhc3NldF8yX3Jlc2VydmVzIgphcHBfbG9jYWxfZ2V0X2V4CnN0b3JlIDIyCnN0b3JlIDIxCmxvYWQgMTgKbG9hZCAyMgomJgpsb2FkIDIwCiYmCiEKYm56IHN3YXBfMTRfbDkKbG9hZCAxNwppbnQgMAo9PQpibnogc3dhcF8xNF9sOApsb2FkIDE5CmludCAxCi0KbG9hZCAyMQpsb2FkIDE5Cm11bHcKaW50IDAKbG9hZCAyMQpsb2FkIDE1CmludCAzMApsb2FkIDE1CioKaW50IDEwMDAwCi8KLQorCmRpdm1vZHcKcG9wCnBvcApzd2FwCiEKYXNzZXJ0Ci0Kc3dhcF8xNF9sNToKc3RvcmUgMTYKbG9hZCAxNgppbnQgMAo9PQpibnogc3dhcF8xNF9sNwppdHhuX2JlZ2luCmludCBwYXkKaXR4bl9maWVsZCBUeXBlRW51bQpieXRlICJscF9pZCIKYXBwX2dsb2JhbF9nZXQKaXR4bl9maWVsZCBSZWNlaXZlcgpsb2FkIDE1Cml0eG5fZmllbGQgQW1vdW50Cmdsb2JhbCBNaW5UeG5GZWUKaXR4bl9maWVsZCBGZWUKaXR4bl9uZXh0CmludCBhcHBsCml0eG5fZmllbGQgVHlwZUVudW0KaW50IE5vT3AKaXR4bl9maWVsZCBPbkNvbXBsZXRpb24KYnl0ZSAidG0yX2FwcF9pZCIKYXBwX2dsb2JhbF9nZXQKaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECmJ5dGUgInN3YXAiCml0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCmJ5dGUgImZpeGVkLWlucHV0IgppdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwpsb2FkIDE2Cml0b2IKaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKYnl0ZSAiYXNhX2lkIgphcHBfZ2xvYmFsX2dldAppdHhuX2ZpZWxkIEFzc2V0cwpieXRlICJscF9pZCIKYXBwX2dsb2JhbF9nZXQKaXR4bl9maWVsZCBBY2NvdW50cwppbnQgMgpnbG9iYWwgTWluVHhuRmVlCioKaXR4bl9maWVsZCBGZWUKaXR4bl9zdWJtaXQKYnl0ZSAweDkwMGU1YmJiCmxvYWQgMTUKaXRvYgpjb25jYXQKbG9hZCAxNgppdG9iCmNvbmNhdApsb2cKYnl0ZSAweDNmMjM1ZWUxCmdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCmJ5dGUgImFzYV9pZCIKYXBwX2dsb2JhbF9nZXQKYXNzZXRfaG9sZGluZ19nZXQgQXNzZXRCYWxhbmNlCnN0b3JlIDIzCml0b2IKY29uY2F0CmxvZwppbnQgMQpiIHN3YXBfMTRfbDEwCnN3YXBfMTRfbDc6CmludCAwCmIgc3dhcF8xNF9sMTAKc3dhcF8xNF9sODoKbG9hZCAyMQppbnQgMQotCmxvYWQgMTkKbG9hZCAyMQptdWx3CmludCAwCmxvYWQgMTkKbG9hZCAxNQppbnQgMzAKbG9hZCAxNQoqCmludCAxMDAwMAovCi0KKwpkaXZtb2R3CnBvcApwb3AKc3dhcAohCmFzc2VydAotCmIgc3dhcF8xNF9sNQpzd2FwXzE0X2w5OgpieXRlICJFUlIgTFAiCmxvZwplcnIKc3dhcF8xNF9sMTA6CnJldHN1YgoKLy8gbWF5YmVfb3B0aW4KbWF5YmVvcHRpbl8xNToKcHJvdG8gMCAwCmJ5dGUgImRlbGF5X29wdGluIgphcHBfZ2xvYmFsX2dldApieiBtYXliZW9wdGluXzE1X2wyCmdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCmJ5dGUgImFzYV9pZCIKYXBwX2dsb2JhbF9nZXQKaW50IDAKZ2xvYmFsIE1pblR4bkZlZQpjYWxsc3ViIHNlbmRhc2FfMwpieXRlICJkZWxheV9vcHRpbiIKaW50IDAKYXBwX2dsb2JhbF9wdXQKbWF5YmVvcHRpbl8xNV9sMjoKcmV0c3ViCgovLyBnZXRfZXhwZWN0ZWRfYmFsYW5jZQpnZXRleHBlY3RlZGJhbGFuY2VfMTY6CnByb3RvIDAgMQpieXRlICJzdGFrZWQiCmFwcF9nbG9iYWxfZ2V0CmJ5dGUgInBsYXRmb3JtX2ZlZXMiCmFwcF9nbG9iYWxfZ2V0CisKYnl0ZSAibm9kZXJ1bm5lcl9mZWVzIgphcHBfZ2xvYmFsX2dldAorCmdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCm1pbl9iYWxhbmNlCmJ5dGUgImRlbGF5X29wdGluIgphcHBfZ2xvYmFsX2dldApibnogZ2V0ZXhwZWN0ZWRiYWxhbmNlXzE2X2wyCmludCAwCmIgZ2V0ZXhwZWN0ZWRiYWxhbmNlXzE2X2wzCmdldGV4cGVjdGVkYmFsYW5jZV8xNl9sMjoKZ2xvYmFsIEFzc2V0T3B0SW5NaW5CYWxhbmNlCmdsb2JhbCBNaW5UeG5GZWUKKwpnZXRleHBlY3RlZGJhbGFuY2VfMTZfbDM6CisKKwpyZXRzdWIKCi8vIGdldF9hY3R1YWxfZXhwZWN0ZWRfYmFsYW5jZV9kZWx0YQpnZXRhY3R1YWxleHBlY3RlZGJhbGFuY2VkZWx0YV8xNzoKcHJvdG8gMCAxCmdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCmJhbGFuY2UKc3RvcmUgMjQKY2FsbHN1YiBnZXRleHBlY3RlZGJhbGFuY2VfMTYKc3RvcmUgMjUKbG9hZCAyNApsb2FkIDI1Cj4KYm56IGdldGFjdHVhbGV4cGVjdGVkYmFsYW5jZWRlbHRhXzE3X2wyCmludCAwCmIgZ2V0YWN0dWFsZXhwZWN0ZWRiYWxhbmNlZGVsdGFfMTdfbDMKZ2V0YWN0dWFsZXhwZWN0ZWRiYWxhbmNlZGVsdGFfMTdfbDI6CmxvYWQgMjQKbG9hZCAyNQotCmdldGFjdHVhbGV4cGVjdGVkYmFsYW5jZWRlbHRhXzE3X2wzOgpyZXRzdWIKCi8vIGNvbmZpZ3VyZQpjb25maWd1cmVfMTg6CnByb3RvIDE2IDAKY2FsbHN1YiBhc3NlcnRhZG1pbm9yZmVlYWRtaW5fNgpieXRlICJsc3RfaWQiCmFwcF9nbG9iYWxfZ2V0CmludCAwCj09CiEKYm56IGNvbmZpZ3VyZV8xOF9sOApieXRlICJhc2FfaWQiCmZyYW1lX2RpZyAtMTYKYXBwX2dsb2JhbF9wdXQKYnl0ZSAibHBfdHlwZSIKZnJhbWVfZGlnIC0xNQpleHRyYWN0IDIgMAphcHBfZ2xvYmFsX3B1dApieXRlICJscF9pZCIKZnJhbWVfZGlnIC0xNApleHRyYWN0IDIgMAphcHBfZ2xvYmFsX3B1dApieXRlICJwbGF0Zm9ybV9mZWVfYnBzIgpmcmFtZV9kaWcgLTEzCmFwcF9nbG9iYWxfcHV0CmJ5dGUgIm5vZGVydW5uZXJfZmVlX2JwcyIKZnJhbWVfZGlnIC0xMgphcHBfZ2xvYmFsX3B1dApieXRlICJhZG1pbl9hZGRyIgpmcmFtZV9kaWcgLTExCmFwcF9nbG9iYWxfcHV0CmJ5dGUgImZlZV9hZG1pbl9hZGRyIgpmcmFtZV9kaWcgLTEwCmFwcF9nbG9iYWxfcHV0CmJ5dGUgIm5vZGVydW5uZXJfYWRkciIKZnJhbWVfZGlnIC05CmFwcF9nbG9iYWxfcHV0CmJ5dGUgImRlbGF5X29wdGluIgpmcmFtZV9kaWcgLTgKYXBwX2dsb2JhbF9wdXQKYnl0ZSAidXBncmFkZV9wZXJpb2QiCmZyYW1lX2RpZyAtNgphcHBfZ2xvYmFsX3B1dApieXRlICJmZWVfdXBkYXRlX3BlcmlvZCIKZnJhbWVfZGlnIC01CmFwcF9nbG9iYWxfcHV0CmJ5dGUgImZlZV91cGRhdGVfbWF4X2RlbHRhIgpmcmFtZV9kaWcgLTQKYXBwX2dsb2JhbF9wdXQKYnl0ZSAibWF4X2JhbGFuY2UiCmZyYW1lX2RpZyAtNwphcHBfZ2xvYmFsX3B1dApieXRlICJyYXRlX3ByZWNpc2lvbiIKZnJhbWVfZGlnIC0zCmFwcF9nbG9iYWxfcHV0CmJ5dGUgInRtMl9hcHBfaWQiCmZyYW1lX2RpZyAtMgphcHBfZ2xvYmFsX3B1dApieXRlICJhcmM1OV9hcHBfaWQiCmZyYW1lX2RpZyAtMQphcHBfZ2xvYmFsX3B1dApmcmFtZV9kaWcgLTgKIQpibnogY29uZmlndXJlXzE4X2w3CmNvbmZpZ3VyZV8xOF9sMjoKZnJhbWVfZGlnIC0xNQpleHRyYWN0IDIgMApieXRlICJ0bTIiCj09CmJueiBjb25maWd1cmVfMThfbDUKY29uZmlndXJlXzE4X2wzOgpmcmFtZV9kaWcgLTEKYXBwX3BhcmFtc19nZXQgQXBwQXBwcm92YWxQcm9ncmFtCnN0b3JlIDUKc2hhNTEyXzI1NgpieXRlIDB4ZTY1MGIyZWQzZjI1NGI3YzhiNzFhOGJkNzU1MGZiNzgzOTExZWRlZWZkNDUxZmU0NmMzNjllYjQyOWZlZjBhNwo9PQohCmJ6IGNvbmZpZ3VyZV8xOF9sOQpieXRlICJFUlIgQVJDNTkiCmxvZwplcnIKY29uZmlndXJlXzE4X2w1OgpmcmFtZV9kaWcgLTE0CmV4dHJhY3QgMiAwCmZyYW1lX2RpZyAtMgpieXRlICJhc3NldF8xX2lkIgphcHBfbG9jYWxfZ2V0X2V4CnN0b3JlIDcKc3RvcmUgNgpmcmFtZV9kaWcgLTE0CmV4dHJhY3QgMiAwCmZyYW1lX2RpZyAtMgpieXRlICJhc3NldF8yX2lkIgphcHBfbG9jYWxfZ2V0X2V4CnN0b3JlIDkKc3RvcmUgOApsb2FkIDYKZnJhbWVfZGlnIC0xNgo9PQpsb2FkIDgKaW50IDAKPT0KJiYKbG9hZCA4CmZyYW1lX2RpZyAtMTYKPT0KbG9hZCA2CmludCAwCj09CiYmCnx8CiEKYnogY29uZmlndXJlXzE4X2wzCmJ5dGUgIkVSUiBUTTIiCmxvZwplcnIKY29uZmlndXJlXzE4X2w3OgpnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwpmcmFtZV9kaWcgLTE2CmludCAwCmdsb2JhbCBNaW5UeG5GZWUKY2FsbHN1YiBzZW5kYXNhXzMKYiBjb25maWd1cmVfMThfbDIKY29uZmlndXJlXzE4X2w4OgpieXRlICJFUlIgQ0ZHRCIKbG9nCmVycgpjb25maWd1cmVfMThfbDk6CnJldHN1YgoKLy8gY29uZmlndXJlMgpjb25maWd1cmUyXzE5Ogpwcm90byAzIDAKYnl0ZSAibHN0X2lkIgphcHBfZ2xvYmFsX2dldAppbnQgMAo9PQohCmJueiBjb25maWd1cmUyXzE5X2wzCnR4biBTZW5kZXIKYnl0ZSAiYWRtaW5fYWRkciIKYXBwX2dsb2JhbF9nZXQKPT0KZ2xvYmFsIENhbGxlckFwcGxpY2F0aW9uSUQKYXBwX3BhcmFtc19nZXQgQXBwQ3JlYXRvcgpzdG9yZSAxMApieXRlICJhZG1pbl9hZGRyIgphcHBfZ2xvYmFsX2dldAo9PQp8fAohCmJ6IGNvbmZpZ3VyZTJfMTlfbDQKYnl0ZSAiRVJSIFVOQVVUSCIKbG9nCmVycgpjb25maWd1cmUyXzE5X2wzOgpieXRlICJFUlIgQ0ZHRCIKbG9nCmVycgpjb25maWd1cmUyXzE5X2w0OgpieXRlICJsc3RfaWQiCml0eG5fYmVnaW4KaW50IGFwcGwKaXR4bl9maWVsZCBUeXBlRW51bQppbnQgRGVsZXRlQXBwbGljYXRpb24KaXR4bl9maWVsZCBPbkNvbXBsZXRpb24KYnl0ZSBiYXNlNjQoQzRFQlF3PT0pCml0eG5fZmllbGQgQXBwcm92YWxQcm9ncmFtCmJ5dGUgYmFzZTY0KEM0RUJRdz09KQppdHhuX2ZpZWxkIENsZWFyU3RhdGVQcm9ncmFtCml0eG5fc3VibWl0Cml0eG5fYmVnaW4KaW50IGFjZmcKaXR4bl9maWVsZCBUeXBlRW51bQpmcmFtZV9kaWcgLTMKZXh0cmFjdCAyIDAKaXR4bl9maWVsZCBDb25maWdBc3NldE5hbWUKZnJhbWVfZGlnIC0yCmV4dHJhY3QgMiAwCml0eG5fZmllbGQgQ29uZmlnQXNzZXRVbml0TmFtZQpmcmFtZV9kaWcgLTEKZXh0cmFjdCAyIDAKaXR4biBDcmVhdGVkQXBwbGljYXRpb25JRAppbnQgMQorCmNhbGxzdWIgaXRvYV8xCmNvbmNhdAppdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0VVJMCmludCA2Cml0eG5fZmllbGQgQ29uZmlnQXNzZXREZWNpbWFscwppbnQgMTAwMDAwMDAwMDAwMDAwMDAKaXR4bl9maWVsZCBDb25maWdBc3NldFRvdGFsCmdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCml0eG5fZmllbGQgQ29uZmlnQXNzZXRNYW5hZ2VyCmdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCml0eG5fZmllbGQgQ29uZmlnQXNzZXRSZXNlcnZlCml0eG5fc3VibWl0Cml0eG4gQ3JlYXRlZEFzc2V0SUQKYXBwX2dsb2JhbF9wdXQKcmV0c3ViCgovLyBjaGFuZ2VfYWRtaW5fMQpjaGFuZ2VhZG1pbjFfMjA6CnByb3RvIDEgMApjYWxsc3ViIGFzc2VydGFkbWluXzQKZnJhbWVfZGlnIC0xCnN0b3JlIDEzCnJldHN1YgoKLy8gY2hhbmdlX2FkbWluXzIKY2hhbmdlYWRtaW4yXzIxOgpwcm90byAwIDAKdHhuIEdyb3VwSW5kZXgKaW50IDEKLQpndHhucyBUeXBlRW51bQppbnQgYXBwbAo9PQohCmJueiBjaGFuZ2VhZG1pbjJfMjFfbDkKdHhuIEdyb3VwSW5kZXgKaW50IDEKLQpndHhucyBPbkNvbXBsZXRpb24KaW50IE5vT3AKPT0KIQpibnogY2hhbmdlYWRtaW4yXzIxX2w4CnR4biBHcm91cEluZGV4CmludCAxCi0KZ3R4bnMgQXBwbGljYXRpb25JRApnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uSUQKPT0KIQpibnogY2hhbmdlYWRtaW4yXzIxX2w3CnR4biBHcm91cEluZGV4CmludCAxCi0KZ3R4bnNhIEFwcGxpY2F0aW9uQXJncyAwCm1ldGhvZCAiY2hhbmdlX2FkbWluXzEoYWRkcmVzcyl2b2lkIgo9PQohCmJueiBjaGFuZ2VhZG1pbjJfMjFfbDYKdHhuIFNlbmRlcgpnbG9hZCAwIDEzCj09CiEKYnogY2hhbmdlYWRtaW4yXzIxX2wxMApieXRlICJFUlIgTkEiCmxvZwplcnIKY2hhbmdlYWRtaW4yXzIxX2w2OgpieXRlICJFUlIgQVJHIgpsb2cKZXJyCmNoYW5nZWFkbWluMl8yMV9sNzoKYnl0ZSAiRVJSIEFQSUQiCmxvZwplcnIKY2hhbmdlYWRtaW4yXzIxX2w4OgpieXRlICJFUlIgT0MiCmxvZwplcnIKY2hhbmdlYWRtaW4yXzIxX2w5OgpieXRlICJFUlIgVFhUIgpsb2cKZXJyCmNoYW5nZWFkbWluMl8yMV9sMTA6CmJ5dGUgImFkbWluX2FkZHIiCmdsb2FkIDAgMTMKYXBwX2dsb2JhbF9wdXQKcmV0c3ViCgovLyBjaGFuZ2Vfbm9kZXJ1bm5lcgpjaGFuZ2Vub2RlcnVubmVyXzIyOgpwcm90byAxIDAKY2FsbHN1YiBhc3NlcnRmZWVhZG1pbm9ybm9kZXJ1bm5lcl83CmNhbGxzdWIgcHJlbWludG9ycmVkZWVtXzEzCnBvcApieXRlICJub2RlcnVubmVyX2ZlZXMiCmFwcF9nbG9iYWxfZ2V0CmludCAwCj09CiEKYnogY2hhbmdlbm9kZXJ1bm5lcl8yMl9sMgpieXRlICJFUlIgRkVFIgpsb2cKZXJyCmNoYW5nZW5vZGVydW5uZXJfMjJfbDI6CmJ5dGUgIm5vZGVydW5uZXJfYWRkciIKZnJhbWVfZGlnIC0xCmFwcF9nbG9iYWxfcHV0CnJldHN1YgoKLy8gY2hhbmdlX2ZlZWFkZHIKY2hhbmdlZmVlYWRkcl8yMzoKcHJvdG8gMSAwCmNhbGxzdWIgYXNzZXJ0YWRtaW5vcmZlZWFkbWluXzYKYnl0ZSAiZmVlX2FkbWluX2FkZHIiCmZyYW1lX2RpZyAtMQphcHBfZ2xvYmFsX3B1dApyZXRzdWIKCi8vIHVwZGF0ZV9tYXhfYmFsYW5jZQp1cGRhdGVtYXhiYWxhbmNlXzI0Ogpwcm90byAxIDAKY2FsbHN1YiBhc3NlcnRmZWVhZG1pbl81CmZyYW1lX2RpZyAtMQppbnQgNjU0MzIxMDAwMDAwMDAKPD0KIQpieiB1cGRhdGVtYXhiYWxhbmNlXzI0X2wyCmJ5dGUgIkVSUiBNQVgiCmxvZwplcnIKdXBkYXRlbWF4YmFsYW5jZV8yNF9sMjoKYnl0ZSAibWF4X2JhbGFuY2UiCmZyYW1lX2RpZyAtMQphcHBfZ2xvYmFsX3B1dApyZXRzdWIKCi8vIHZlcmlmeV9uZmRvbWFpbnMKdmVyaWZ5bmZkb21haW5zXzI1Ogpwcm90byAzIDAKY2FsbHN1YiBhc3NlcnRmZWVhZG1pbl81Cml0eG5fYmVnaW4KaW50IGFwcGwKaXR4bl9maWVsZCBUeXBlRW51bQppbnQgTm9PcAppdHhuX2ZpZWxkIE9uQ29tcGxldGlvbgpmcmFtZV9kaWcgLTMKaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECmJ5dGUgInZlcmlmeV9uZmRfYWRkciIKaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKZnJhbWVfZGlnIC0xCmV4dHJhY3QgMiAwCmJ5dGUgIi5kdWFsc3Rha2UuYWxnbyIKY29uY2F0Cml0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCmZyYW1lX2RpZyAtMgppdG9iCml0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCmdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCml0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCmZyYW1lX2RpZyAtMgppdHhuX2ZpZWxkIEFwcGxpY2F0aW9ucwppbnQgMAppdHhuX2ZpZWxkIEZlZQppdHhuX3N1Ym1pdApyZXRzdWIKCi8vIHdpdGhkcmF3X25vZGVfcnVubmVyX2ZlZXMKd2l0aGRyYXdub2RlcnVubmVyZmVlc18yNjoKcHJvdG8gMSAwCmNhbGxzdWIgYXNzZXJ0ZmVlYWRtaW5vcm5vZGVydW5uZXJfNwpmcmFtZV9kaWcgLTEKaW50IDAKPgohCmJueiB3aXRoZHJhd25vZGVydW5uZXJmZWVzXzI2X2wzCmZyYW1lX2RpZyAtMQpieXRlICJub2RlcnVubmVyX2ZlZXMiCmFwcF9nbG9iYWxfZ2V0Cjw9CiEKYnogd2l0aGRyYXdub2RlcnVubmVyZmVlc18yNl9sNApieXRlICJFUlIgT1ZFUiIKbG9nCmVycgp3aXRoZHJhd25vZGVydW5uZXJmZWVzXzI2X2wzOgpieXRlICJFUlIgWkVSTyIKbG9nCmVycgp3aXRoZHJhd25vZGVydW5uZXJmZWVzXzI2X2w0OgpieXRlICJub2RlcnVubmVyX2FkZHIiCmFwcF9nbG9iYWxfZ2V0CmZyYW1lX2RpZyAtMQppbnQgMApjYWxsc3ViIHNlbmRhbGdvXzIKYnl0ZSAibm9kZXJ1bm5lcl9mZWVzIgpieXRlICJub2RlcnVubmVyX2ZlZXMiCmFwcF9nbG9iYWxfZ2V0CmZyYW1lX2RpZyAtMQotCmFwcF9nbG9iYWxfcHV0CnJldHN1YgoKLy8gd2l0aGRyYXdfcGxhdGZvcm1fZmVlcwp3aXRoZHJhd3BsYXRmb3JtZmVlc18yNzoKcHJvdG8gMSAwCmNhbGxzdWIgYXNzZXJ0ZmVlYWRtaW5fNQpmcmFtZV9kaWcgLTEKaW50IDAKPgohCmJueiB3aXRoZHJhd3BsYXRmb3JtZmVlc18yN19sMwpmcmFtZV9kaWcgLTEKYnl0ZSAicGxhdGZvcm1fZmVlcyIKYXBwX2dsb2JhbF9nZXQKPD0KIQpieiB3aXRoZHJhd3BsYXRmb3JtZmVlc18yN19sNApieXRlICJFUlIgT1ZFUiIKbG9nCmVycgp3aXRoZHJhd3BsYXRmb3JtZmVlc18yN19sMzoKYnl0ZSAiRVJSIFpFUk8iCmxvZwplcnIKd2l0aGRyYXdwbGF0Zm9ybWZlZXNfMjdfbDQ6CnR4biBTZW5kZXIKZnJhbWVfZGlnIC0xCmludCAwCmNhbGxzdWIgc2VuZGFsZ29fMgpieXRlICJwbGF0Zm9ybV9mZWVzIgpieXRlICJwbGF0Zm9ybV9mZWVzIgphcHBfZ2xvYmFsX2dldApmcmFtZV9kaWcgLTEKLQphcHBfZ2xvYmFsX3B1dApyZXRzdWIKCi8vIHZhbGlkYXRlX2FzYV9wYXltZW50X2FmdGVyCnZhbGlkYXRlYXNhcGF5bWVudGFmdGVyXzI4Ogpwcm90byAyIDEKdHhuIEdyb3VwSW5kZXgKZnJhbWVfZGlnIC0yCisKZ3R4bnMgVHlwZUVudW0KaW50IGF4ZmVyCj09CiEKYm56IHZhbGlkYXRlYXNhcGF5bWVudGFmdGVyXzI4X2w1CnR4biBHcm91cEluZGV4CmZyYW1lX2RpZyAtMgorCmd0eG5zIEFzc2V0UmVjZWl2ZXIKZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKPT0KIQpibnogdmFsaWRhdGVhc2FwYXltZW50YWZ0ZXJfMjhfbDQKdHhuIEdyb3VwSW5kZXgKZnJhbWVfZGlnIC0yCisKZ3R4bnMgWGZlckFzc2V0CmZyYW1lX2RpZyAtMQo9PQohCmJ6IHZhbGlkYXRlYXNhcGF5bWVudGFmdGVyXzI4X2w2CmJ5dGUgIkVSUiBBSUQiCmxvZwplcnIKdmFsaWRhdGVhc2FwYXltZW50YWZ0ZXJfMjhfbDQ6CmJ5dGUgIkVSUiBQQVkiCmxvZwplcnIKdmFsaWRhdGVhc2FwYXltZW50YWZ0ZXJfMjhfbDU6CmJ5dGUgIkVSUiBQQVkiCmxvZwplcnIKdmFsaWRhdGVhc2FwYXltZW50YWZ0ZXJfMjhfbDY6CnR4biBHcm91cEluZGV4CmZyYW1lX2RpZyAtMgorCmd0eG5zIEFzc2V0QW1vdW50CnJldHN1YgoKLy8gdmFsaWRhdGVfYXNhX3BheW1lbnRfYmVmb3JlCnZhbGlkYXRlYXNhcGF5bWVudGJlZm9yZV8yOToKcHJvdG8gMiAxCnR4biBHcm91cEluZGV4CmZyYW1lX2RpZyAtMgotCmd0eG5zIFR5cGVFbnVtCmludCBheGZlcgo9PQohCmJueiB2YWxpZGF0ZWFzYXBheW1lbnRiZWZvcmVfMjlfbDUKdHhuIEdyb3VwSW5kZXgKZnJhbWVfZGlnIC0yCi0KZ3R4bnMgQXNzZXRSZWNlaXZlcgpnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwo9PQohCmJueiB2YWxpZGF0ZWFzYXBheW1lbnRiZWZvcmVfMjlfbDQKdHhuIEdyb3VwSW5kZXgKZnJhbWVfZGlnIC0yCi0KZ3R4bnMgWGZlckFzc2V0CmZyYW1lX2RpZyAtMQo9PQohCmJ6IHZhbGlkYXRlYXNhcGF5bWVudGJlZm9yZV8yOV9sNgpieXRlICJFUlIgQUlEIgpsb2cKZXJyCnZhbGlkYXRlYXNhcGF5bWVudGJlZm9yZV8yOV9sNDoKYnl0ZSAiRVJSIFBBWSIKbG9nCmVycgp2YWxpZGF0ZWFzYXBheW1lbnRiZWZvcmVfMjlfbDU6CmJ5dGUgIkVSUiBQQVkiCmxvZwplcnIKdmFsaWRhdGVhc2FwYXltZW50YmVmb3JlXzI5X2w2Ogp0eG4gR3JvdXBJbmRleApmcmFtZV9kaWcgLTIKLQpndHhucyBBc3NldEFtb3VudApyZXRzdWIKCi8vIHZhbGlkYXRlX2FsZ29fcGF5bWVudF9hZnRlcgp2YWxpZGF0ZWFsZ29wYXltZW50YWZ0ZXJfMzA6CnByb3RvIDEgMQp0eG4gR3JvdXBJbmRleApmcmFtZV9kaWcgLTEKKwpndHhucyBUeXBlRW51bQppbnQgcGF5Cj09CiEKYm56IHZhbGlkYXRlYWxnb3BheW1lbnRhZnRlcl8zMF9sNQp0eG4gR3JvdXBJbmRleApmcmFtZV9kaWcgLTEKKwpndHhucyBSZWNlaXZlcgpnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwo9PQohCmJueiB2YWxpZGF0ZWFsZ29wYXltZW50YWZ0ZXJfMzBfbDQKdHhuIEdyb3VwSW5kZXgKZnJhbWVfZGlnIC0xCisKZ3R4bnMgQW1vdW50CmludCAxMDAwMDAwCj49CiEKYnogdmFsaWRhdGVhbGdvcGF5bWVudGFmdGVyXzMwX2w2CmJ5dGUgIkVSUiBNSU4gQU1UIgpsb2cKZXJyCnZhbGlkYXRlYWxnb3BheW1lbnRhZnRlcl8zMF9sNDoKYnl0ZSAiRVJSIFBBWSIKbG9nCmVycgp2YWxpZGF0ZWFsZ29wYXltZW50YWZ0ZXJfMzBfbDU6CmJ5dGUgIkVSUiBQQVkiCmxvZwplcnIKdmFsaWRhdGVhbGdvcGF5bWVudGFmdGVyXzMwX2w2Ogp0eG4gR3JvdXBJbmRleApmcmFtZV9kaWcgLTEKKwpndHhucyBBbW91bnQKcmV0c3ViCgovLyBrZXlyZWdfb25saW5lCmtleXJlZ29ubGluZV8zMToKcHJvdG8gNyAwCmNhbGxzdWIgYXNzZXJ0ZmVlYWRtaW5vcm5vZGVydW5uZXJfNwpnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwphY2N0X3BhcmFtc19nZXQgQWNjdEluY2VudGl2ZUVsaWdpYmxlCnN0b3JlIDI3CnN0b3JlIDI2CmZyYW1lX2RpZyAtMQppbnQgMAo+CmJueiBrZXlyZWdvbmxpbmVfMzFfbDcKa2V5cmVnb25saW5lXzMxX2wxOgpsb2FkIDI2CmludCAxCj09CmJueiBrZXlyZWdvbmxpbmVfMzFfbDUKZnJhbWVfZGlnIC0xCmdsb2JhbCBQYXlvdXRzR29PbmxpbmVGZWUKPT0KIQpibnoga2V5cmVnb25saW5lXzMxX2w0CmJ5dGUgMHg2NTJjYjAwNApieXRlIDB4MDEKY29uY2F0CmxvZwpiIGtleXJlZ29ubGluZV8zMV9sOQprZXlyZWdvbmxpbmVfMzFfbDQ6CmJ5dGUgIkVSUiAhSUUiCmxvZwplcnIKa2V5cmVnb25saW5lXzMxX2w1OgpieXRlIDB4NjUyY2IwMDQKYnl0ZSAweDAwCmNvbmNhdApsb2cKZnJhbWVfZGlnIC0xCmludCAwCj09CiEKYnoga2V5cmVnb25saW5lXzMxX2w5CmJ5dGUgIkVSUiBJRSIKbG9nCmVycgprZXlyZWdvbmxpbmVfMzFfbDc6CmludCAxCmNhbGxzdWIgdmFsaWRhdGVhbGdvcGF5bWVudGFmdGVyXzMwCmZyYW1lX2RpZyAtMQo9PQohCmJ6IGtleXJlZ29ubGluZV8zMV9sMQpieXRlICJFUlIgUEFZIEFNVCIKbG9nCmVycgprZXlyZWdvbmxpbmVfMzFfbDk6Cml0eG5fYmVnaW4KaW50IGtleXJlZwppdHhuX2ZpZWxkIFR5cGVFbnVtCmZyYW1lX2RpZyAtNwpleHRyYWN0IDIgMAppdHhuX2ZpZWxkIFNlbGVjdGlvblBLCmZyYW1lX2RpZyAtNgpleHRyYWN0IDIgMAppdHhuX2ZpZWxkIFZvdGVQSwpmcmFtZV9kaWcgLTUKZXh0cmFjdCAyIDAKaXR4bl9maWVsZCBTdGF0ZVByb29mUEsKZnJhbWVfZGlnIC00Cml0eG5fZmllbGQgVm90ZUZpcnN0CmZyYW1lX2RpZyAtMwppdHhuX2ZpZWxkIFZvdGVMYXN0CmZyYW1lX2RpZyAtMgppdHhuX2ZpZWxkIFZvdGVLZXlEaWx1dGlvbgpmcmFtZV9kaWcgLTEKaXR4bl9maWVsZCBGZWUKaXR4bl9zdWJtaXQKcmV0c3ViCgovLyBrZXlyZWdfb2ZmbGluZQprZXlyZWdvZmZsaW5lXzMyOgpwcm90byAwIDAKY2FsbHN1YiBhc3NlcnRmZWVhZG1pbm9ybm9kZXJ1bm5lcl83CmJ5dGUgMHgyYzlkYWNlNgpsb2cKaXR4bl9iZWdpbgppbnQga2V5cmVnCml0eG5fZmllbGQgVHlwZUVudW0KaW50IDAKaXR4bl9maWVsZCBGZWUKaXR4bl9zdWJtaXQKcmV0c3ViCgovLyBhcmM1OV9zZW5kX2FzYV9hbmRfYWxnbwphcmM1OXNlbmRhc2FhbmRhbGdvXzMzOgpwcm90byA0IDAKYnl0ZSAiIgppbnQgMApkdXBuIDIKYnl0ZSAiIgpnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwpiYWxhbmNlCnN0b3JlIDQzCml0eG5fYmVnaW4KaW50IGFwcGwKaXR4bl9maWVsZCBUeXBlRW51bQpieXRlICJhcmM1OV9hcHBfaWQiCmFwcF9nbG9iYWxfZ2V0Cml0eG5fZmllbGQgQXBwbGljYXRpb25JRAptZXRob2QgImFyYzU5X2dldFNlbmRBc3NldEluZm8oYWRkcmVzcyx1aW50NjQpKHVpbnQ2NCx1aW50NjQsYm9vbCxib29sLHVpbnQ2NCx1aW50NjQpIgppdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwpmcmFtZV9kaWcgLTQKaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKZnJhbWVfZGlnIC0yCml0b2IKaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKaXR4bl9zdWJtaXQKaXR4biBMYXN0TG9nCmludCA0Cml0eG4gTGFzdExvZwpsZW4Kc3Vic3RyaW5nMwpmcmFtZV9idXJ5IDAKZnJhbWVfZGlnIDAKaW50IDAKZXh0cmFjdF91aW50NjQKZnJhbWVfYnVyeSAxCmZyYW1lX2RpZyAwCmludCA4CmV4dHJhY3RfdWludDY0CmZyYW1lX2J1cnkgMgpmcmFtZV9kaWcgMAppbnQgMTI4CmdldGJpdApmcmFtZV9idXJ5IDMKYnl0ZSAiYXJjNTlfYXBwX2lkIgphcHBfZ2xvYmFsX2dldAphcHBfcGFyYW1zX2dldCBBcHBBZGRyZXNzCnN0b3JlIDQyCnN0b3JlIDQxCmZyYW1lX2RpZyAyCmludCAwCj4KYm56IGFyYzU5c2VuZGFzYWFuZGFsZ29fMzNfbDkKYXJjNTlzZW5kYXNhYW5kYWxnb18zM19sMToKZnJhbWVfZGlnIDMKIQpibnogYXJjNTlzZW5kYXNhYW5kYWxnb18zM19sOAphcmM1OXNlbmRhc2FhbmRhbGdvXzMzX2wyOgpmcmFtZV9kaWcgMQppbnQgNQo+PQpibnogYXJjNTlzZW5kYXNhYW5kYWxnb18zM19sNwppdHhuX2JlZ2luCmludCBhcHBsCml0eG5fZmllbGQgVHlwZUVudW0KYnl0ZSAiYXJjNTlfYXBwX2lkIgphcHBfZ2xvYmFsX2dldAppdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKbWV0aG9kICJhcmM1OV9nZXRPckNyZWF0ZUluYm94KGFkZHJlc3MpYWRkcmVzcyIKaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKZnJhbWVfZGlnIC00Cml0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCml0eG5fc3VibWl0Cml0eG4gTGFzdExvZwppbnQgNAppdHhuIExhc3RMb2cKbGVuCnN1YnN0cmluZzMKZnJhbWVfYnVyeSA0CmFyYzU5c2VuZGFzYWFuZGFsZ29fMzNfbDQ6Cml0eG5fYmVnaW4KaW50IGF4ZmVyCml0eG5fZmllbGQgVHlwZUVudW0KbG9hZCA0MQppdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKZnJhbWVfZGlnIC0yCml0eG5fZmllbGQgWGZlckFzc2V0CmZyYW1lX2RpZyAtMQppdHhuX2ZpZWxkIEFzc2V0QW1vdW50Cmdsb2JhbCBNaW5UeG5GZWUKaXR4bl9maWVsZCBGZWUKaXR4bl9uZXh0CmludCBhcHBsCml0eG5fZmllbGQgVHlwZUVudW0KYnl0ZSAiYXJjNTlfYXBwX2lkIgphcHBfZ2xvYmFsX2dldAppdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKbWV0aG9kICJhcmM1OV9zZW5kQXNzZXQoYXhmZXIsYWRkcmVzcyx1aW50NjQpYWRkcmVzcyIKaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKZnJhbWVfZGlnIC00Cml0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCmludCAwCml0b2IKaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKZnJhbWVfZGlnIDQKZnJhbWVfZGlnIC0yCmFzc2V0X2hvbGRpbmdfZ2V0IEFzc2V0QmFsYW5jZQpzdG9yZSA0NQpzdG9yZSA0NApsb2FkIDQ1CmJueiBhcmM1OXNlbmRhc2FhbmRhbGdvXzMzX2w2CmludCA0Cmdsb2JhbCBNaW5UeG5GZWUKKgpiIGFyYzU5c2VuZGFzYWFuZGFsZ29fMzNfbDEwCmFyYzU5c2VuZGFzYWFuZGFsZ29fMzNfbDY6CmludCAyCmdsb2JhbCBNaW5UeG5GZWUKKgpiIGFyYzU5c2VuZGFzYWFuZGFsZ29fMzNfbDEwCmFyYzU5c2VuZGFzYWFuZGFsZ29fMzNfbDc6Cml0eG5fYmVnaW4KaW50IGFwcGwKaXR4bl9maWVsZCBUeXBlRW51bQpieXRlICJhcmM1OV9hcHBfaWQiCmFwcF9nbG9iYWxfZ2V0Cml0eG5fZmllbGQgQXBwbGljYXRpb25JRAptZXRob2QgImFyYzU5X2dldE9yQ3JlYXRlSW5ib3goYWRkcmVzcylhZGRyZXNzIgppdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwpmcmFtZV9kaWcgLTQKaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKaW50IDQKZ2xvYmFsIE1pblR4bkZlZQoqCml0eG5fZmllbGQgRmVlCml0eG5fc3VibWl0Cml0eG4gTGFzdExvZwppbnQgNAppdHhuIExhc3RMb2cKbGVuCnN1YnN0cmluZzMKZnJhbWVfYnVyeSA0CmZyYW1lX2RpZyA0Cmdsb2JhbCBNaW5CYWxhbmNlCmdsb2JhbCBNaW5UeG5GZWUKY2FsbHN1YiBzZW5kYWxnb18yCmIgYXJjNTlzZW5kYXNhYW5kYWxnb18zM19sNAphcmM1OXNlbmRhc2FhbmRhbGdvXzMzX2w4OgppdHhuX2JlZ2luCmludCBhcHBsCml0eG5fZmllbGQgVHlwZUVudW0KYnl0ZSAiYXJjNTlfYXBwX2lkIgphcHBfZ2xvYmFsX2dldAppdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKbWV0aG9kICJhcmM1OV9vcHRSb3V0ZXJJbih1aW50NjQpdm9pZCIKaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKZnJhbWVfZGlnIC0yCml0b2IKaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKaW50IDIKZ2xvYmFsIE1pblR4bkZlZQoqCml0eG5fZmllbGQgRmVlCml0eG5fc3VibWl0CmIgYXJjNTlzZW5kYXNhYW5kYWxnb18zM19sMgphcmM1OXNlbmRhc2FhbmRhbGdvXzMzX2w5Ogpsb2FkIDQxCmZyYW1lX2RpZyAyCmdsb2JhbCBNaW5UeG5GZWUKY2FsbHN1YiBzZW5kYWxnb18yCmIgYXJjNTlzZW5kYXNhYW5kYWxnb18zM19sMQphcmM1OXNlbmRhc2FhbmRhbGdvXzMzX2wxMDoKaXR4bl9maWVsZCBGZWUKaXR4bl9zdWJtaXQKbG9hZCA0MwpnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwpiYWxhbmNlCi0Kc3RvcmUgNDMKZnJhbWVfZGlnIC00CmZyYW1lX2RpZyAtMwpsb2FkIDQzCi0KZ2xvYmFsIE1pblR4bkZlZQotCmdsb2JhbCBNaW5UeG5GZWUKY2FsbHN1YiBzZW5kYWxnb18yCnJldHN1YgoKLy8gcHJvdGVzdF9zdGFrZQpwcm90ZXN0c3Rha2VfMzQ6CnByb3RvIDAgMApieXRlICJjb250cmFjdF91cGdyYWRlIgphcHBfZ2xvYmFsX2dldApieXRlICIiCiE9CiEKYm56IHByb3Rlc3RzdGFrZV8zNF9sNgppbnQgMQpieXRlICJsc3RfaWQiCmFwcF9nbG9iYWxfZ2V0CmNhbGxzdWIgdmFsaWRhdGVhc2FwYXltZW50YmVmb3JlXzI5CnN0b3JlIDI4CmxvYWQgMjgKaW50IDEwMDAwMDAKPj0KIQpibnogcHJvdGVzdHN0YWtlXzM0X2w1CnR4biBTZW5kZXIKYm94X2xlbgpzdG9yZSAzMApzdG9yZSAyOQpsb2FkIDMwCmJueiBwcm90ZXN0c3Rha2VfMzRfbDQKYnl0ZSAicHJvdGVzdF9jbnQiCmludCAxCmJ5dGUgInByb3Rlc3RfY250IgphcHBfZ2xvYmFsX2dldAorCmFwcF9nbG9iYWxfcHV0CnR4biBTZW5kZXIKbG9hZCAyOAppdG9iCmJveF9wdXQKYiBwcm90ZXN0c3Rha2VfMzRfbDcKcHJvdGVzdHN0YWtlXzM0X2w0Ogp0eG4gU2VuZGVyCnR4biBTZW5kZXIKY2FsbHN1YiBnZXR1c2VycHJvdGVzdGluZ3N0YWtlXzQxCmxvYWQgMjgKKwppdG9iCmJveF9wdXQKYiBwcm90ZXN0c3Rha2VfMzRfbDcKcHJvdGVzdHN0YWtlXzM0X2w1OgpieXRlICJFUlIgTUlOIFBSVFNUIgpsb2cKZXJyCnByb3Rlc3RzdGFrZV8zNF9sNjoKYnl0ZSAiRVJSIE5PIFVQRyIKbG9nCmVycgpwcm90ZXN0c3Rha2VfMzRfbDc6CmJ5dGUgMHhiY2NhYTk4Zgpsb2FkIDI4Cml0b2IKY29uY2F0CmxvZwpieXRlICJwcm90ZXN0X3N1bSIKbG9hZCAyOApieXRlICJwcm90ZXN0X3N1bSIKYXBwX2dsb2JhbF9nZXQKKwphcHBfZ2xvYmFsX3B1dApyZXRzdWIKCi8vIHVucHJvdGVzdF9zdGFrZQp1bnByb3Rlc3RzdGFrZV8zNToKcHJvdG8gMCAwCnR4biBTZW5kZXIKaW50IDEKY2FsbHN1YiBpbnRlcm5hbHVucHJvdGVzdHN0YWtlXzM4CnJldHN1YgoKLy8gYWRtaW5fdW5wcm90ZXN0X3N0YWtlCmFkbWludW5wcm90ZXN0c3Rha2VfMzY6CnByb3RvIDEgMApjYWxsc3ViIGFzc2VydGZlZWFkbWluXzUKYnl0ZSAiY29udHJhY3RfdXBncmFkZSIKYXBwX2dsb2JhbF9nZXQKYnl0ZSAiIgo9PQohCmJ6IGFkbWludW5wcm90ZXN0c3Rha2VfMzZfbDIKYnl0ZSAiRVJSIFVQRyIKbG9nCmVycgphZG1pbnVucHJvdGVzdHN0YWtlXzM2X2wyOgpmcmFtZV9kaWcgLTEKaW50IDAKY2FsbHN1YiBpbnRlcm5hbHVucHJvdGVzdHN0YWtlXzM4CnJldHN1YgoKLy8gZGlzc29sdmVfcHJvdGVzdGluZ19zdGFrZQpkaXNzb2x2ZXByb3Rlc3RpbmdzdGFrZV8zNzoKcHJvdG8gMSAwCmNhbGxzdWIgYXNzZXJ0ZmVlYWRtaW5fNQpjYWxsc3ViIHByZW1pbnRvcnJlZGVlbV8xMwpwb3AKYnl0ZSAiY29udHJhY3RfdXBncmFkZSIKYXBwX2dsb2JhbF9nZXQKaW50IDAKZXh0cmFjdF91aW50MzIKZ2xvYmFsIExhdGVzdFRpbWVzdGFtcAo8CiEKYnogZGlzc29sdmVwcm90ZXN0aW5nc3Rha2VfMzdfbDIKYnl0ZSAiRVJSIEVBUkxZIgpsb2cKZXJyCmRpc3NvbHZlcHJvdGVzdGluZ3N0YWtlXzM3X2wyOgpmcmFtZV9kaWcgLTEKY2FsbHN1YiBnZXR1c2VycHJvdGVzdGluZ3N0YWtlXzQxCnN0b3JlIDM0CmZyYW1lX2RpZyAtMQpsb2FkIDM0Cmdsb2JhbCBNaW5UeG5GZWUKY2FsbHN1YiBpbnRlcm5hbHJlZGVlbV80MApmcmFtZV9kaWcgLTEKbG9hZCAzNApjYWxsc3ViIGludGVybmFsdW5wcm90ZXN0YWRqdXN0c3RhdGVfMzkKcmV0c3ViCgovLyBpbnRlcm5hbF91bnByb3Rlc3Rfc3Rha2UKaW50ZXJuYWx1bnByb3Rlc3RzdGFrZV8zODoKcHJvdG8gMiAwCmZyYW1lX2RpZyAtMgpjYWxsc3ViIGdldHVzZXJwcm90ZXN0aW5nc3Rha2VfNDEKc3RvcmUgMzMKZnJhbWVfZGlnIC0yCmJ5dGUgImxzdF9pZCIKYXBwX2dsb2JhbF9nZXQKbG9hZCAzMwppbnQgMApjYWxsc3ViIHNlbmRhc2FfMwpmcmFtZV9kaWcgLTIKbG9hZCAzMwpjYWxsc3ViIGludGVybmFsdW5wcm90ZXN0YWRqdXN0c3RhdGVfMzkKYnl0ZSAweDAyZGEyZTk2CmxvYWQgMzMKaXRvYgpjb25jYXQKZnJhbWVfZGlnIC0xCmJueiBpbnRlcm5hbHVucHJvdGVzdHN0YWtlXzM4X2wyCmJ5dGUgMHgwMApiIGludGVybmFsdW5wcm90ZXN0c3Rha2VfMzhfbDMKaW50ZXJuYWx1bnByb3Rlc3RzdGFrZV8zOF9sMjoKYnl0ZSAweDAxCmludGVybmFsdW5wcm90ZXN0c3Rha2VfMzhfbDM6CmNvbmNhdApsb2cKcmV0c3ViCgovLyBpbnRlcm5hbF91bnByb3Rlc3RfYWRqdXN0X3N0YXRlCmludGVybmFsdW5wcm90ZXN0YWRqdXN0c3RhdGVfMzk6CnByb3RvIDIgMApieXRlICJwcm90ZXN0X2NudCIKYnl0ZSAicHJvdGVzdF9jbnQiCmFwcF9nbG9iYWxfZ2V0CmludCAxCi0KYXBwX2dsb2JhbF9wdXQKYnl0ZSAicHJvdGVzdF9zdW0iCmJ5dGUgInByb3Rlc3Rfc3VtIgphcHBfZ2xvYmFsX2dldApmcmFtZV9kaWcgLTEKLQphcHBfZ2xvYmFsX3B1dApmcmFtZV9kaWcgLTIKYm94X2RlbAohCmJ6IGludGVybmFsdW5wcm90ZXN0YWRqdXN0c3RhdGVfMzlfbDIKYnl0ZSAiRVJSIEJPWCBERUwiCmxvZwplcnIKaW50ZXJuYWx1bnByb3Rlc3RhZGp1c3RzdGF0ZV8zOV9sMjoKcmV0c3ViCgovLyBpbnRlcm5hbF9yZWRlZW0KaW50ZXJuYWxyZWRlZW1fNDA6CnByb3RvIDMgMApmcmFtZV9kaWcgLTIKIQpibnogaW50ZXJuYWxyZWRlZW1fNDBfbDEzCmxvYWQgMjU1CmludCAyNTUyNTUyNTUKPT0KIQpibnogaW50ZXJuYWxyZWRlZW1fNDBfbDEyCmJ5dGUgInN0YWtlZCIKYXBwX2dsb2JhbF9nZXQKaW50IDAKPT0KYm56IGludGVybmFscmVkZWVtXzQwX2wxMQpieXRlICJyYXRlX3ByZWNpc2lvbiIKYXBwX2dsb2JhbF9nZXQKZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKYnl0ZSAiYXNhX2lkIgphcHBfZ2xvYmFsX2dldAphc3NldF9ob2xkaW5nX2dldCBBc3NldEJhbGFuY2UKc3RvcmUgMzcKbXVsdwppbnQgMApieXRlICJzdGFrZWQiCmFwcF9nbG9iYWxfZ2V0CmRpdm1vZHcKcG9wCnBvcApzd2FwCiEKYXNzZXJ0CmludGVybmFscmVkZWVtXzQwX2w0OgpzdG9yZSAzNQpieXRlIDB4OGE0ZGFmZTcKbG9hZCAzNQppdG9iCmNvbmNhdApsb2cKbG9hZCAzNQppbnQgMAo+CmJueiBpbnRlcm5hbHJlZGVlbV80MF9sNgppbnQgMApzdG9yZSAzNgpmcmFtZV9kaWcgLTMKZnJhbWVfZGlnIC0yCmZyYW1lX2RpZyAtMQotCmZyYW1lX2RpZyAtMQpjYWxsc3ViIHNlbmRhbGdvXzIKYiBpbnRlcm5hbHJlZGVlbV80MF9sMTQKaW50ZXJuYWxyZWRlZW1fNDBfbDY6CmZyYW1lX2RpZyAtMgpsb2FkIDM1Cm11bHcKaW50IDAKYnl0ZSAicmF0ZV9wcmVjaXNpb24iCmFwcF9nbG9iYWxfZ2V0CmRpdm1vZHcKcG9wCnBvcApzd2FwCiEKYXNzZXJ0CnN0b3JlIDM2CmZyYW1lX2RpZyAtMwpieXRlICJhc2FfaWQiCmFwcF9nbG9iYWxfZ2V0CmFzc2V0X2hvbGRpbmdfZ2V0IEFzc2V0QmFsYW5jZQpzdG9yZSAzOQpzdG9yZSAzOApsb2FkIDM5CmJueiBpbnRlcm5hbHJlZGVlbV80MF9sMTAKZnJhbWVfZGlnIC0xCmludCAwCj4KIQpibnogaW50ZXJuYWxyZWRlZW1fNDBfbDkKZnJhbWVfZGlnIC0zCmZyYW1lX2RpZyAtMgpieXRlICJhc2FfaWQiCmFwcF9nbG9iYWxfZ2V0CmxvYWQgMzYKY2FsbHN1YiBhcmM1OXNlbmRhc2FhbmRhbGdvXzMzCmIgaW50ZXJuYWxyZWRlZW1fNDBfbDE0CmludGVybmFscmVkZWVtXzQwX2w5OgpieXRlICJFUlIgRkVFUyIKbG9nCmVycgppbnRlcm5hbHJlZGVlbV80MF9sMTA6CmZyYW1lX2RpZyAtMwpieXRlICJhc2FfaWQiCmFwcF9nbG9iYWxfZ2V0CmxvYWQgMzYKZnJhbWVfZGlnIC0xCmNhbGxzdWIgc2VuZGFzYV8zCmZyYW1lX2RpZyAtMwpmcmFtZV9kaWcgLTIKaW50IDIKZnJhbWVfZGlnIC0xCioKLQpmcmFtZV9kaWcgLTEKY2FsbHN1YiBzZW5kYWxnb18yCmIgaW50ZXJuYWxyZWRlZW1fNDBfbDE0CmludGVybmFscmVkZWVtXzQwX2wxMToKaW50IDAKYiBpbnRlcm5hbHJlZGVlbV80MF9sNAppbnRlcm5hbHJlZGVlbV80MF9sMTI6CmJ5dGUgIkVSUiBOUCIKbG9nCmVycgppbnRlcm5hbHJlZGVlbV80MF9sMTM6CmJ5dGUgIkVSUiBaRVJPIgpsb2cKZXJyCmludGVybmFscmVkZWVtXzQwX2wxNDoKYnl0ZSAweDYyMzY0N2IwCmZyYW1lX2RpZyAtMgppdG9iCmNvbmNhdApsb2FkIDM2Cml0b2IKY29uY2F0CmxvZwpieXRlIDB4M2YyMzVlZTEKZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKYnl0ZSAiYXNhX2lkIgphcHBfZ2xvYmFsX2dldAphc3NldF9ob2xkaW5nX2dldCBBc3NldEJhbGFuY2UKc3RvcmUgNDAKaXRvYgpjb25jYXQKbG9nCmJ5dGUgInN0YWtlZCIKYnl0ZSAic3Rha2VkIgphcHBfZ2xvYmFsX2dldApmcmFtZV9kaWcgLTIKLQphcHBfZ2xvYmFsX3B1dApyZXRzdWIKCi8vIGdldF91c2VyX3Byb3Rlc3Rpbmdfc3Rha2UKZ2V0dXNlcnByb3Rlc3RpbmdzdGFrZV80MToKcHJvdG8gMSAxCmZyYW1lX2RpZyAtMQpib3hfZ2V0CnN0b3JlIDMyCnN0b3JlIDMxCmxvYWQgMzIKIQpieiBnZXR1c2VycHJvdGVzdGluZ3N0YWtlXzQxX2wyCmJ5dGUgIkVSUiBOTyBQUlRTVCIKbG9nCmVycgpnZXR1c2VycHJvdGVzdGluZ3N0YWtlXzQxX2wyOgpsb2FkIDMxCmJ0b2kKcmV0c3ViCgovLyBxdWV1ZV91cGdyYWRlCnF1ZXVldXBncmFkZV80MjoKcHJvdG8gMSAwCmNhbGxzdWIgYXNzZXJ0YWRtaW5fNApmcmFtZV9kaWcgLTEKZXh0cmFjdCAyIDAKbGVuCmludCAzMgolCmludCAwCj09CiEKYnogcXVldWV1cGdyYWRlXzQyX2wyCmJ5dGUgIkVSUiBIQVNIIExFTiIKbG9nCmVycgpxdWV1ZXVwZ3JhZGVfNDJfbDI6CmJ5dGUgImNvbnRyYWN0X3VwZ3JhZGUiCmdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKYnl0ZSAidXBncmFkZV9wZXJpb2QiCmFwcF9nbG9iYWxfZ2V0CisKaXRvYgpleHRyYWN0IDQgNApmcmFtZV9kaWcgLTEKZXh0cmFjdCAyIDAKY29uY2F0CmFwcF9nbG9iYWxfcHV0CnJldHN1YgoKLy8gcmVzZXRfdXBncmFkZQpyZXNldHVwZ3JhZGVfNDM6CnByb3RvIDAgMApjYWxsc3ViIGFzc2VydGFkbWlub3JmZWVhZG1pbl82CmJ5dGUgImNvbnRyYWN0X3VwZ3JhZGUiCmFwcF9nbG9iYWxfZ2V0CmJ5dGUgIiIKIT0KIQpieiByZXNldHVwZ3JhZGVfNDNfbDIKYnl0ZSAiRVJSIE5PIEMgVVBHUiIKbG9nCmVycgpyZXNldHVwZ3JhZGVfNDNfbDI6CmJ5dGUgImNvbnRyYWN0X3VwZ3JhZGUiCmJ5dGUgIiIKYXBwX2dsb2JhbF9wdXQKcmV0c3ViCgovLyBtaW50Cm1pbnRfNDQ6CnByb3RvIDAgMApieXRlICJsc3RfaWQiCmFwcF9nbG9iYWxfZ2V0CmludCAwCiE9CiEKYm56IG1pbnRfNDRfbDEyCmNhbGxzdWIgcHJlbWludG9ycmVkZWVtXzEzCnBvcAppbnQgMQpjYWxsc3ViIHZhbGlkYXRlYWxnb3BheW1lbnRhZnRlcl8zMApzdG9yZSA0NgpnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwpiYWxhbmNlCmxvYWQgNDYKKwpieXRlICJtYXhfYmFsYW5jZSIKYXBwX2dsb2JhbF9nZXQKPD0KIQpibnogbWludF80NF9sMTEKbG9hZCAyNTUKaW50IDI1NTI1NTI1NQo9PQohCmJueiBtaW50XzQ0X2wxMApieXRlICJzdGFrZWQiCmFwcF9nbG9iYWxfZ2V0CmludCAwCj09CmJueiBtaW50XzQ0X2w5CmJ5dGUgInJhdGVfcHJlY2lzaW9uIgphcHBfZ2xvYmFsX2dldApnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwpieXRlICJhc2FfaWQiCmFwcF9nbG9iYWxfZ2V0CmFzc2V0X2hvbGRpbmdfZ2V0IEFzc2V0QmFsYW5jZQpzdG9yZSA1MAptdWx3CmludCAwCmJ5dGUgInN0YWtlZCIKYXBwX2dsb2JhbF9nZXQKZGl2bW9kdwpwb3AKcG9wCnN3YXAKIQphc3NlcnQKbWludF80NF9sNToKc3RvcmUgNDcKYnl0ZSAweDhhNGRhZmU3CmxvYWQgNDcKaXRvYgpjb25jYXQKbG9nCmxvYWQgNDcKaW50IDAKPgpibnogbWludF80NF9sNwppbnQgMApzdG9yZSA0OQppbnQgMApzdG9yZSA0OApiIG1pbnRfNDRfbDEzCm1pbnRfNDRfbDc6CmxvYWQgNDYKbG9hZCA0NwptdWx3CmludCAwCmJ5dGUgInJhdGVfcHJlY2lzaW9uIgphcHBfZ2xvYmFsX2dldApkaXZtb2R3CnBvcApwb3AKc3dhcAohCmFzc2VydApzdG9yZSA0OAppbnQgMgpieXRlICJhc2FfaWQiCmFwcF9nbG9iYWxfZ2V0CmNhbGxzdWIgdmFsaWRhdGVhc2FwYXltZW50YWZ0ZXJfMjgKc3RvcmUgNDkKbG9hZCA0OApsb2FkIDQ5Cjw9CiEKYnogbWludF80NF9sMTMKYnl0ZSAiRVJSIFJBVEUiCmxvZwplcnIKbWludF80NF9sOToKaW50IDAKYiBtaW50XzQ0X2w1Cm1pbnRfNDRfbDEwOgpieXRlICJFUlIgTlAiCmxvZwplcnIKbWludF80NF9sMTE6CmJ5dGUgIkVSUiBNQVgiCmxvZwplcnIKbWludF80NF9sMTI6CmJ5dGUgIkVSUiAhUkRZIgpsb2cKZXJyCm1pbnRfNDRfbDEzOgpieXRlIDB4NWQ3N2MyMDMKbG9hZCA0NgppdG9iCmNvbmNhdApsb2FkIDQ4Cml0b2IKY29uY2F0CmxvYWQgNDkKaXRvYgpjb25jYXQKbG9nCmJ5dGUgMHgzZjIzNWVlMQpnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwpieXRlICJhc2FfaWQiCmFwcF9nbG9iYWxfZ2V0CmFzc2V0X2hvbGRpbmdfZ2V0IEFzc2V0QmFsYW5jZQpzdG9yZSA1MQpsb2FkIDQ5CisKaXRvYgpjb25jYXQKbG9nCmJ5dGUgInN0YWtlZCIKbG9hZCA0NgpieXRlICJzdGFrZWQiCmFwcF9nbG9iYWxfZ2V0CisKYXBwX2dsb2JhbF9wdXQKdHhuIFNlbmRlcgpieXRlICJsc3RfaWQiCmFwcF9nbG9iYWxfZ2V0CmxvYWQgNDYKaW50IDAKY2FsbHN1YiBzZW5kYXNhXzMKcmV0c3ViCgovLyByZWRlZW0KcmVkZWVtXzQ1Ogpwcm90byAwIDAKYnl0ZSAibHN0X2lkIgphcHBfZ2xvYmFsX2dldAppbnQgMAohPQohCmJ6IHJlZGVlbV80NV9sMgpieXRlICJFUlIgIVJEWSIKbG9nCmVycgpyZWRlZW1fNDVfbDI6CmNhbGxzdWIgcHJlbWludG9ycmVkZWVtXzEzCnBvcAp0eG4gU2VuZGVyCmludCAxCmJ5dGUgImxzdF9pZCIKYXBwX2dsb2JhbF9nZXQKY2FsbHN1YiB2YWxpZGF0ZWFzYXBheW1lbnRiZWZvcmVfMjkKaW50IDAKY2FsbHN1YiBpbnRlcm5hbHJlZGVlbV80MApyZXRzdWIKCi8vIGdldF9yYXRlCmdldHJhdGVfNDY6CnByb3RvIDAgMQppbnQgMApieXRlICJsc3RfaWQiCmFwcF9nbG9iYWxfZ2V0CmludCAwCiE9CiEKYm56IGdldHJhdGVfNDZfbDYKY2FsbHN1YiBwcmVtaW50b3JyZWRlZW1fMTMKcG9wCmxvYWQgMjU1CmludCAyNTUyNTUyNTUKPT0KIQpibnogZ2V0cmF0ZV80Nl9sNQpieXRlICJzdGFrZWQiCmFwcF9nbG9iYWxfZ2V0CmludCAwCj09CmJueiBnZXRyYXRlXzQ2X2w0CmJ5dGUgInJhdGVfcHJlY2lzaW9uIgphcHBfZ2xvYmFsX2dldApnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwpieXRlICJhc2FfaWQiCmFwcF9nbG9iYWxfZ2V0CmFzc2V0X2hvbGRpbmdfZ2V0IEFzc2V0QmFsYW5jZQpzdG9yZSA1MgptdWx3CmludCAwCmJ5dGUgInN0YWtlZCIKYXBwX2dsb2JhbF9nZXQKZGl2bW9kdwpwb3AKcG9wCnN3YXAKIQphc3NlcnQKYiBnZXRyYXRlXzQ2X2w3CmdldHJhdGVfNDZfbDQ6CmludCAwCmIgZ2V0cmF0ZV80Nl9sNwpnZXRyYXRlXzQ2X2w1OgpieXRlICJFUlIgTlAiCmxvZwplcnIKZ2V0cmF0ZV80Nl9sNjoKYnl0ZSAiRVJSICFSRFkiCmxvZwplcnIKZ2V0cmF0ZV80Nl9sNzoKZnJhbWVfYnVyeSAwCnJldHN1YgoKLy8gZ2V0X2NvbnRyYWN0X2xpc3RpbmcKZ2V0Y29udHJhY3RsaXN0aW5nXzQ3Ogpwcm90byAxIDEKYnl0ZSAiIgppbnQgMApkdXBuIDQKYnl0ZSAiIgppbnQgMApieXRlICIiCmR1cAppbnQgMApkdXBuIDcKYnl0ZSAiIgpkdXAKYnl0ZSAibHN0X2lkIgphcHBfZ2xvYmFsX2dldAppbnQgMAohPQohCmJueiBnZXRjb250cmFjdGxpc3RpbmdfNDdfbDkKYnl0ZSAibHN0X2lkIgphcHBfZ2xvYmFsX2dldAphc3NldF9wYXJhbXNfZ2V0IEFzc2V0TmFtZQpzdG9yZSA1NApzdG9yZSA1MwpieXRlICJhc2FfaWQiCmFwcF9nbG9iYWxfZ2V0CmFzc2V0X3BhcmFtc19nZXQgQXNzZXROYW1lCnN0b3JlIDU2CnN0b3JlIDU1CmJ5dGUgImFzYV9pZCIKYXBwX2dsb2JhbF9nZXQKYXNzZXRfcGFyYW1zX2dldCBBc3NldFVuaXROYW1lCnN0b3JlIDU4CnN0b3JlIDU3CmJ5dGUgImFzYV9pZCIKYXBwX2dsb2JhbF9nZXQKYXNzZXRfcGFyYW1zX2dldCBBc3NldERlY2ltYWxzCnN0b3JlIDYwCnN0b3JlIDU5Cmdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCmFjY3RfcGFyYW1zX2dldCBBY2N0SW5jZW50aXZlRWxpZ2libGUKc3RvcmUgNjIKc3RvcmUgNjEKZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKdm90ZXJfcGFyYW1zX2dldCBWb3RlckluY2VudGl2ZUVsaWdpYmxlCnN0b3JlIDY0CnN0b3JlIDYzCmdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCmJhbGFuY2UKZnJhbWVfYnVyeSAyCmdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCmJ5dGUgImFzYV9pZCIKYXBwX2dsb2JhbF9nZXQKYXNzZXRfaG9sZGluZ19nZXQgQXNzZXRCYWxhbmNlCnN0b3JlIDY1CmZyYW1lX2J1cnkgMwpieXRlICJzdGFrZWQiCmFwcF9nbG9iYWxfZ2V0CmZyYW1lX2J1cnkgNApieXRlICJsc3RfaWQiCmFwcF9nbG9iYWxfZ2V0CmZyYW1lX2J1cnkgNQpsb2FkIDUzCmZyYW1lX2J1cnkgNgpmcmFtZV9kaWcgNgpsZW4KaXRvYgpleHRyYWN0IDYgMApmcmFtZV9kaWcgNgpjb25jYXQKZnJhbWVfYnVyeSA2CmJ5dGUgImFzYV9pZCIKYXBwX2dsb2JhbF9nZXQKZnJhbWVfYnVyeSA3CmxvYWQgNTUKZnJhbWVfYnVyeSA4CmZyYW1lX2RpZyA4CmxlbgppdG9iCmV4dHJhY3QgNiAwCmZyYW1lX2RpZyA4CmNvbmNhdApmcmFtZV9idXJ5IDgKbG9hZCA1NwpmcmFtZV9idXJ5IDkKZnJhbWVfZGlnIDkKbGVuCml0b2IKZXh0cmFjdCA2IDAKZnJhbWVfZGlnIDkKY29uY2F0CmZyYW1lX2J1cnkgOQpsb2FkIDU5CmZyYW1lX2J1cnkgMTAKZnJhbWVfZGlnIDEwCmludCA2NTUzNgo8CmFzc2VydApjYWxsc3ViIHByZW1pbnRvcnJlZGVlbV8xMwohCiEKZnJhbWVfYnVyeSAxMQpsb2FkIDI1NQppbnQgMjU1MjU1MjU1Cj09CiEKYm56IGdldGNvbnRyYWN0bGlzdGluZ180N19sOApieXRlICJzdGFrZWQiCmFwcF9nbG9iYWxfZ2V0CmludCAwCj09CmJueiBnZXRjb250cmFjdGxpc3RpbmdfNDdfbDcKYnl0ZSAicmF0ZV9wcmVjaXNpb24iCmFwcF9nbG9iYWxfZ2V0Cmdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCmJ5dGUgImFzYV9pZCIKYXBwX2dsb2JhbF9nZXQKYXNzZXRfaG9sZGluZ19nZXQgQXNzZXRCYWxhbmNlCnN0b3JlIDY2Cm11bHcKaW50IDAKYnl0ZSAic3Rha2VkIgphcHBfZ2xvYmFsX2dldApkaXZtb2R3CnBvcApwb3AKc3dhcAohCmFzc2VydApnZXRjb250cmFjdGxpc3RpbmdfNDdfbDQ6CmZyYW1lX2J1cnkgMQpsb2FkIDYxCiEKIQpmcmFtZV9idXJ5IDEyCmxvYWQgNjQKIQohCmZyYW1lX2J1cnkgMTMKYnl0ZSAiY29udHJhY3RfdXBncmFkZSIKYXBwX2dsb2JhbF9nZXQKYnl0ZSAiIgohPQohCiEKZnJhbWVfYnVyeSAxNApmcmFtZV9kaWcgLTEKYm94X2xlbgpzdG9yZSA2OApzdG9yZSA2Nwpsb2FkIDY4CmJueiBnZXRjb250cmFjdGxpc3RpbmdfNDdfbDYKaW50IDAKYiBnZXRjb250cmFjdGxpc3RpbmdfNDdfbDEwCmdldGNvbnRyYWN0bGlzdGluZ180N19sNjoKZnJhbWVfZGlnIC0xCmNhbGxzdWIgZ2V0dXNlcnByb3Rlc3RpbmdzdGFrZV80MQpiIGdldGNvbnRyYWN0bGlzdGluZ180N19sMTAKZ2V0Y29udHJhY3RsaXN0aW5nXzQ3X2w3OgppbnQgMApiIGdldGNvbnRyYWN0bGlzdGluZ180N19sNApnZXRjb250cmFjdGxpc3RpbmdfNDdfbDg6CmJ5dGUgIkVSUiBOUCIKbG9nCmVycgpnZXRjb250cmFjdGxpc3RpbmdfNDdfbDk6CmJ5dGUgIkVSUiAhUkRZIgpsb2cKZXJyCmdldGNvbnRyYWN0bGlzdGluZ180N19sMTA6CmZyYW1lX2J1cnkgMTUKZnJhbWVfZGlnIDEKaXRvYgpmcmFtZV9kaWcgMgppdG9iCmNvbmNhdApmcmFtZV9kaWcgMwppdG9iCmNvbmNhdApmcmFtZV9kaWcgNAppdG9iCmNvbmNhdApmcmFtZV9kaWcgNQppdG9iCmNvbmNhdApmcmFtZV9kaWcgNgpmcmFtZV9idXJ5IDE5CmZyYW1lX2RpZyAxOQpmcmFtZV9idXJ5IDE4CmludCA2NQpmcmFtZV9idXJ5IDE2CmZyYW1lX2RpZyAxNgpmcmFtZV9kaWcgMTkKbGVuCisKZnJhbWVfYnVyeSAxNwpmcmFtZV9kaWcgMTcKaW50IDY1NTM2CjwKYXNzZXJ0CmZyYW1lX2RpZyAxNgppdG9iCmV4dHJhY3QgNiAwCmNvbmNhdApmcmFtZV9kaWcgNwppdG9iCmNvbmNhdApmcmFtZV9kaWcgOApmcmFtZV9idXJ5IDE5CmZyYW1lX2RpZyAxOApmcmFtZV9kaWcgMTkKY29uY2F0CmZyYW1lX2J1cnkgMTgKZnJhbWVfZGlnIDE3CmZyYW1lX2J1cnkgMTYKZnJhbWVfZGlnIDE2CmZyYW1lX2RpZyAxOQpsZW4KKwpmcmFtZV9idXJ5IDE3CmZyYW1lX2RpZyAxNwppbnQgNjU1MzYKPAphc3NlcnQKZnJhbWVfZGlnIDE2Cml0b2IKZXh0cmFjdCA2IDAKY29uY2F0CmZyYW1lX2RpZyA5CmZyYW1lX2J1cnkgMTkKZnJhbWVfZGlnIDE4CmZyYW1lX2RpZyAxOQpjb25jYXQKZnJhbWVfYnVyeSAxOApmcmFtZV9kaWcgMTcKZnJhbWVfYnVyeSAxNgpmcmFtZV9kaWcgMTYKaXRvYgpleHRyYWN0IDYgMApjb25jYXQKZnJhbWVfZGlnIDEwCml0b2IKZXh0cmFjdCA2IDAKY29uY2F0CmJ5dGUgMHgwMAppbnQgMApmcmFtZV9kaWcgMTEKc2V0Yml0CmludCAxCmZyYW1lX2RpZyAxMgpzZXRiaXQKaW50IDIKZnJhbWVfZGlnIDEzCnNldGJpdAppbnQgMwpmcmFtZV9kaWcgMTQKc2V0Yml0CmNvbmNhdApmcmFtZV9kaWcgMTUKaXRvYgpjb25jYXQKZnJhbWVfZGlnIDE4CmNvbmNhdApmcmFtZV9idXJ5IDAKcmV0c3ViCgovLyBnZXRfcmF0ZV9hbmRfYmFsYW5jZXMKZ2V0cmF0ZWFuZGJhbGFuY2VzXzQ4Ogpwcm90byAwIDEKYnl0ZSAiIgppbnQgMApkdXBuIDQKYnl0ZSAiIgpkdXAKYnl0ZSAibHN0X2lkIgphcHBfZ2xvYmFsX2dldAppbnQgMAohPQohCmJueiBnZXRyYXRlYW5kYmFsYW5jZXNfNDhfbDYKY2FsbHN1YiBwcmVtaW50b3JyZWRlZW1fMTMKcG9wCmxvYWQgMjU1CmludCAyNTUyNTUyNTUKPT0KIQpibnogZ2V0cmF0ZWFuZGJhbGFuY2VzXzQ4X2w1CmJ5dGUgInN0YWtlZCIKYXBwX2dsb2JhbF9nZXQKaW50IDAKPT0KYm56IGdldHJhdGVhbmRiYWxhbmNlc180OF9sNApieXRlICJyYXRlX3ByZWNpc2lvbiIKYXBwX2dsb2JhbF9nZXQKZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKYnl0ZSAiYXNhX2lkIgphcHBfZ2xvYmFsX2dldAphc3NldF9ob2xkaW5nX2dldCBBc3NldEJhbGFuY2UKc3RvcmUgNjkKbXVsdwppbnQgMApieXRlICJzdGFrZWQiCmFwcF9nbG9iYWxfZ2V0CmRpdm1vZHcKcG9wCnBvcApzd2FwCiEKYXNzZXJ0CmIgZ2V0cmF0ZWFuZGJhbGFuY2VzXzQ4X2w3CmdldHJhdGVhbmRiYWxhbmNlc180OF9sNDoKaW50IDAKYiBnZXRyYXRlYW5kYmFsYW5jZXNfNDhfbDcKZ2V0cmF0ZWFuZGJhbGFuY2VzXzQ4X2w1OgpieXRlICJFUlIgTlAiCmxvZwplcnIKZ2V0cmF0ZWFuZGJhbGFuY2VzXzQ4X2w2OgpieXRlICJFUlIgIVJEWSIKbG9nCmVycgpnZXRyYXRlYW5kYmFsYW5jZXNfNDhfbDc6CmZyYW1lX2J1cnkgMQpnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwpiYWxhbmNlCmZyYW1lX2J1cnkgMgpnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwpieXRlICJhc2FfaWQiCmFwcF9nbG9iYWxfZ2V0CmFzc2V0X2hvbGRpbmdfZ2V0IEFzc2V0QmFsYW5jZQpzdG9yZSA3MApmcmFtZV9idXJ5IDMKZnJhbWVfZGlnIDEKaXRvYgpmcmFtZV9kaWcgMgppdG9iCmNvbmNhdApmcmFtZV9kaWcgMwppdG9iCmNvbmNhdApmcmFtZV9idXJ5IDAKcmV0c3ViCgovLyBnZXRfbmVlZF9zd2FwCmdldG5lZWRzd2FwXzQ5Ogpwcm90byAwIDEKaW50IDAKYnl0ZSAibHN0X2lkIgphcHBfZ2xvYmFsX2dldAppbnQgMAohPQohCmJ6IGdldG5lZWRzd2FwXzQ5X2wyCmJ5dGUgIkVSUiAhUkRZIgpsb2cKZXJyCmdldG5lZWRzd2FwXzQ5X2wyOgpieXRlICJkZWxheV9vcHRpbiIKYXBwX2dsb2JhbF9nZXQKaW50IDAKPT0KZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKYmFsYW5jZQpnbG9iYWwgUGF5b3V0c01pbkJhbGFuY2UKPgp8fApieXRlICJzdGFrZWQiCmFwcF9nbG9iYWxfZ2V0CmludCAwCj4KJiYKY2FsbHN1YiBnZXRhY3R1YWxleHBlY3RlZGJhbGFuY2VkZWx0YV8xNwpnbG9iYWwgTWluVHhuRmVlCmludCAxMDAwCioKPgomJgohCiEKZnJhbWVfYnVyeSAwCnJldHN1YgoKLy8gc3dhcF9vcl9mYWlsCnN3YXBvcmZhaWxfNTA6CnByb3RvIDAgMApieXRlICJsc3RfaWQiCmFwcF9nbG9iYWxfZ2V0CmludCAwCiE9CiEKYm56IHN3YXBvcmZhaWxfNTBfbDUKY2FsbHN1YiBtYXliZWFwcGx5ZmVldXBkYXRlXzkKY2FsbHN1YiBtYXliZW9wdGluXzE1CmJ5dGUgImRlbGF5X29wdGluIgphcHBfZ2xvYmFsX2dldAppbnQgMAo9PQpnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwpiYWxhbmNlCmdsb2JhbCBQYXlvdXRzTWluQmFsYW5jZQo+Cnx8CmJ5dGUgInN0YWtlZCIKYXBwX2dsb2JhbF9nZXQKaW50IDAKPgomJgpjYWxsc3ViIGdldGFjdHVhbGV4cGVjdGVkYmFsYW5jZWRlbHRhXzE3Cmdsb2JhbCBNaW5UeG5GZWUKaW50IDEwMDAKKgo+CiYmCiEKYm56IHN3YXBvcmZhaWxfNTBfbDQKY2FsbHN1YiBzd2FwXzE0CiEKYnogc3dhcG9yZmFpbF81MF9sNgpieXRlICJFUlIgU1dQIgpsb2cKZXJyCnN3YXBvcmZhaWxfNTBfbDQ6CmJ5dGUgIkVSUiBOTyBTV1AiCmxvZwplcnIKc3dhcG9yZmFpbF81MF9sNToKYnl0ZSAiRVJSICFSRFkiCmxvZwplcnIKc3dhcG9yZmFpbF81MF9sNjoKcmV0c3ViCgovLyBudWxsdW4KbnVsbHVuXzUxOgpwcm90byAwIDAKaW50IDEKcmV0dXJuCgovLyBxdWV1ZV91cGRhdGVfZmVlc19jYXN0ZXIKcXVldWV1cGRhdGVmZWVzY2FzdGVyXzUyOgpwcm90byAwIDAKaW50IDAKZHVwbiAyCnR4bmEgQXBwbGljYXRpb25BcmdzIDEKYnRvaQpmcmFtZV9idXJ5IDEKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgpidG9pCmZyYW1lX2J1cnkgMgpmcmFtZV9kaWcgMQpmcmFtZV9kaWcgMgpjYWxsc3ViIHF1ZXVldXBkYXRlZmVlc18xMQpmcmFtZV9idXJ5IDAKYnl0ZSAweDE1MWY3Yzc1CmZyYW1lX2RpZyAwCml0b2IKY29uY2F0CmxvZwpyZXRzdWIKCi8vIHJlc2V0X3VwZGF0ZV9mZWVzX2Nhc3RlcgpyZXNldHVwZGF0ZWZlZXNjYXN0ZXJfNTM6CnByb3RvIDAgMApjYWxsc3ViIHJlc2V0dXBkYXRlZmVlc18xMgpyZXRzdWIKCi8vIGNvbmZpZ3VyZV9jYXN0ZXIKY29uZmlndXJlY2FzdGVyXzU0Ogpwcm90byAwIDAKaW50IDAKYnl0ZSAiIgpkdXAKaW50IDAKZHVwCmJ5dGUgIiIKZHVwbiAyCmludCAwCmR1cG4gNwpieXRlICIiCnR4bmEgQXBwbGljYXRpb25BcmdzIDEKYnRvaQpmcmFtZV9idXJ5IDAKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgpmcmFtZV9idXJ5IDEKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwpmcmFtZV9idXJ5IDIKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNApidG9pCmZyYW1lX2J1cnkgMwp0eG5hIEFwcGxpY2F0aW9uQXJncyA1CmJ0b2kKZnJhbWVfYnVyeSA0CnR4bmEgQXBwbGljYXRpb25BcmdzIDYKZnJhbWVfYnVyeSA1CnR4bmEgQXBwbGljYXRpb25BcmdzIDcKZnJhbWVfYnVyeSA2CnR4bmEgQXBwbGljYXRpb25BcmdzIDgKZnJhbWVfYnVyeSA3CnR4bmEgQXBwbGljYXRpb25BcmdzIDkKaW50IDAKaW50IDgKKgpnZXRiaXQKZnJhbWVfYnVyeSA4CnR4bmEgQXBwbGljYXRpb25BcmdzIDEwCmJ0b2kKZnJhbWVfYnVyeSA5CnR4bmEgQXBwbGljYXRpb25BcmdzIDExCmJ0b2kKZnJhbWVfYnVyeSAxMAp0eG5hIEFwcGxpY2F0aW9uQXJncyAxMgpidG9pCmZyYW1lX2J1cnkgMTEKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMTMKYnRvaQpmcmFtZV9idXJ5IDEyCnR4bmEgQXBwbGljYXRpb25BcmdzIDE0CmJ0b2kKZnJhbWVfYnVyeSAxMwp0eG5hIEFwcGxpY2F0aW9uQXJncyAxNQpmcmFtZV9idXJ5IDE2CmZyYW1lX2RpZyAxNgppbnQgMApleHRyYWN0X3VpbnQ2NApmcmFtZV9idXJ5IDE0CmZyYW1lX2RpZyAxNgppbnQgOApleHRyYWN0X3VpbnQ2NApmcmFtZV9idXJ5IDE1CmZyYW1lX2RpZyAwCmZyYW1lX2RpZyAxCmZyYW1lX2RpZyAyCmZyYW1lX2RpZyAzCmZyYW1lX2RpZyA0CmZyYW1lX2RpZyA1CmZyYW1lX2RpZyA2CmZyYW1lX2RpZyA3CmZyYW1lX2RpZyA4CmZyYW1lX2RpZyA5CmZyYW1lX2RpZyAxMApmcmFtZV9kaWcgMTEKZnJhbWVfZGlnIDEyCmZyYW1lX2RpZyAxMwpmcmFtZV9kaWcgMTQKZnJhbWVfZGlnIDE1CmNhbGxzdWIgY29uZmlndXJlXzE4CnJldHN1YgoKLy8gY29uZmlndXJlMl9jYXN0ZXIKY29uZmlndXJlMmNhc3Rlcl81NToKcHJvdG8gMCAwCmJ5dGUgIiIKZHVwbiAyCnR4bmEgQXBwbGljYXRpb25BcmdzIDEKZnJhbWVfYnVyeSAwCnR4bmEgQXBwbGljYXRpb25BcmdzIDIKZnJhbWVfYnVyeSAxCnR4bmEgQXBwbGljYXRpb25BcmdzIDMKZnJhbWVfYnVyeSAyCmZyYW1lX2RpZyAwCmZyYW1lX2RpZyAxCmZyYW1lX2RpZyAyCmNhbGxzdWIgY29uZmlndXJlMl8xOQpyZXRzdWIKCi8vIGNoYW5nZV9hZG1pbl8xX2Nhc3RlcgpjaGFuZ2VhZG1pbjFjYXN0ZXJfNTY6CnByb3RvIDAgMApieXRlICIiCnR4bmEgQXBwbGljYXRpb25BcmdzIDEKZnJhbWVfYnVyeSAwCmZyYW1lX2RpZyAwCmNhbGxzdWIgY2hhbmdlYWRtaW4xXzIwCnJldHN1YgoKLy8gY2hhbmdlX2FkbWluXzJfY2FzdGVyCmNoYW5nZWFkbWluMmNhc3Rlcl81NzoKcHJvdG8gMCAwCmNhbGxzdWIgY2hhbmdlYWRtaW4yXzIxCnJldHN1YgoKLy8gY2hhbmdlX25vZGVydW5uZXJfY2FzdGVyCmNoYW5nZW5vZGVydW5uZXJjYXN0ZXJfNTg6CnByb3RvIDAgMApieXRlICIiCnR4bmEgQXBwbGljYXRpb25BcmdzIDEKZnJhbWVfYnVyeSAwCmZyYW1lX2RpZyAwCmNhbGxzdWIgY2hhbmdlbm9kZXJ1bm5lcl8yMgpyZXRzdWIKCi8vIGNoYW5nZV9mZWVhZGRyX2Nhc3RlcgpjaGFuZ2VmZWVhZGRyY2FzdGVyXzU5Ogpwcm90byAwIDAKYnl0ZSAiIgp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCmZyYW1lX2J1cnkgMApmcmFtZV9kaWcgMApjYWxsc3ViIGNoYW5nZWZlZWFkZHJfMjMKcmV0c3ViCgovLyB1cGRhdGVfbWF4X2JhbGFuY2VfY2FzdGVyCnVwZGF0ZW1heGJhbGFuY2VjYXN0ZXJfNjA6CnByb3RvIDAgMAppbnQgMAp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCmJ0b2kKZnJhbWVfYnVyeSAwCmZyYW1lX2RpZyAwCmNhbGxzdWIgdXBkYXRlbWF4YmFsYW5jZV8yNApyZXRzdWIKCi8vIHZlcmlmeV9uZmRvbWFpbnNfY2FzdGVyCnZlcmlmeW5mZG9tYWluc2Nhc3Rlcl82MToKcHJvdG8gMCAwCmludCAwCmR1cApieXRlICIiCnR4bmEgQXBwbGljYXRpb25BcmdzIDEKYnRvaQpmcmFtZV9idXJ5IDAKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgpidG9pCmZyYW1lX2J1cnkgMQp0eG5hIEFwcGxpY2F0aW9uQXJncyAzCmZyYW1lX2J1cnkgMgpmcmFtZV9kaWcgMApmcmFtZV9kaWcgMQpmcmFtZV9kaWcgMgpjYWxsc3ViIHZlcmlmeW5mZG9tYWluc18yNQpyZXRzdWIKCi8vIHdpdGhkcmF3X25vZGVfcnVubmVyX2ZlZXNfY2FzdGVyCndpdGhkcmF3bm9kZXJ1bm5lcmZlZXNjYXN0ZXJfNjI6CnByb3RvIDAgMAppbnQgMAp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCmJ0b2kKZnJhbWVfYnVyeSAwCmZyYW1lX2RpZyAwCmNhbGxzdWIgd2l0aGRyYXdub2RlcnVubmVyZmVlc18yNgpyZXRzdWIKCi8vIHdpdGhkcmF3X3BsYXRmb3JtX2ZlZXNfY2FzdGVyCndpdGhkcmF3cGxhdGZvcm1mZWVzY2FzdGVyXzYzOgpwcm90byAwIDAKaW50IDAKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQpidG9pCmZyYW1lX2J1cnkgMApmcmFtZV9kaWcgMApjYWxsc3ViIHdpdGhkcmF3cGxhdGZvcm1mZWVzXzI3CnJldHN1YgoKLy8ga2V5cmVnX29ubGluZV9jYXN0ZXIKa2V5cmVnb25saW5lY2FzdGVyXzY0Ogpwcm90byAwIDAKYnl0ZSAiIgpkdXBuIDIKaW50IDAKZHVwbiAzCnR4bmEgQXBwbGljYXRpb25BcmdzIDEKZnJhbWVfYnVyeSAwCnR4bmEgQXBwbGljYXRpb25BcmdzIDIKZnJhbWVfYnVyeSAxCnR4bmEgQXBwbGljYXRpb25BcmdzIDMKZnJhbWVfYnVyeSAyCnR4bmEgQXBwbGljYXRpb25BcmdzIDQKYnRvaQpmcmFtZV9idXJ5IDMKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNQpidG9pCmZyYW1lX2J1cnkgNAp0eG5hIEFwcGxpY2F0aW9uQXJncyA2CmJ0b2kKZnJhbWVfYnVyeSA1CnR4bmEgQXBwbGljYXRpb25BcmdzIDcKYnRvaQpmcmFtZV9idXJ5IDYKZnJhbWVfZGlnIDAKZnJhbWVfZGlnIDEKZnJhbWVfZGlnIDIKZnJhbWVfZGlnIDMKZnJhbWVfZGlnIDQKZnJhbWVfZGlnIDUKZnJhbWVfZGlnIDYKY2FsbHN1YiBrZXlyZWdvbmxpbmVfMzEKcmV0c3ViCgovLyBrZXlyZWdfb2ZmbGluZV9jYXN0ZXIKa2V5cmVnb2ZmbGluZWNhc3Rlcl82NToKcHJvdG8gMCAwCmNhbGxzdWIga2V5cmVnb2ZmbGluZV8zMgpyZXRzdWIKCi8vIHByb3Rlc3Rfc3Rha2VfY2FzdGVyCnByb3Rlc3RzdGFrZWNhc3Rlcl82NjoKcHJvdG8gMCAwCmNhbGxzdWIgcHJvdGVzdHN0YWtlXzM0CnJldHN1YgoKLy8gdW5wcm90ZXN0X3N0YWtlX2Nhc3Rlcgp1bnByb3Rlc3RzdGFrZWNhc3Rlcl82NzoKcHJvdG8gMCAwCmNhbGxzdWIgdW5wcm90ZXN0c3Rha2VfMzUKcmV0c3ViCgovLyBhZG1pbl91bnByb3Rlc3Rfc3Rha2VfY2FzdGVyCmFkbWludW5wcm90ZXN0c3Rha2VjYXN0ZXJfNjg6CnByb3RvIDAgMApieXRlICIiCnR4bmEgQXBwbGljYXRpb25BcmdzIDEKZnJhbWVfYnVyeSAwCmZyYW1lX2RpZyAwCmNhbGxzdWIgYWRtaW51bnByb3Rlc3RzdGFrZV8zNgpyZXRzdWIKCi8vIGRpc3NvbHZlX3Byb3Rlc3Rpbmdfc3Rha2VfY2FzdGVyCmRpc3NvbHZlcHJvdGVzdGluZ3N0YWtlY2FzdGVyXzY5Ogpwcm90byAwIDAKYnl0ZSAiIgp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCmZyYW1lX2J1cnkgMApmcmFtZV9kaWcgMApjYWxsc3ViIGRpc3NvbHZlcHJvdGVzdGluZ3N0YWtlXzM3CnJldHN1YgoKLy8gcXVldWVfdXBncmFkZV9jYXN0ZXIKcXVldWV1cGdyYWRlY2FzdGVyXzcwOgpwcm90byAwIDAKYnl0ZSAiIgp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCmZyYW1lX2J1cnkgMApmcmFtZV9kaWcgMApjYWxsc3ViIHF1ZXVldXBncmFkZV80MgpyZXRzdWIKCi8vIHJlc2V0X3VwZ3JhZGVfY2FzdGVyCnJlc2V0dXBncmFkZWNhc3Rlcl83MToKcHJvdG8gMCAwCmNhbGxzdWIgcmVzZXR1cGdyYWRlXzQzCnJldHN1YgoKLy8gbWludF9jYXN0ZXIKbWludGNhc3Rlcl83MjoKcHJvdG8gMCAwCmNhbGxzdWIgbWludF80NApyZXRzdWIKCi8vIHJlZGVlbV9jYXN0ZXIKcmVkZWVtY2FzdGVyXzczOgpwcm90byAwIDAKY2FsbHN1YiByZWRlZW1fNDUKcmV0c3ViCgovLyBnZXRfcmF0ZV9jYXN0ZXIKZ2V0cmF0ZWNhc3Rlcl83NDoKcHJvdG8gMCAwCmludCAwCmNhbGxzdWIgZ2V0cmF0ZV80NgpmcmFtZV9idXJ5IDAKYnl0ZSAweDE1MWY3Yzc1CmZyYW1lX2RpZyAwCml0b2IKY29uY2F0CmxvZwpyZXRzdWIKCi8vIGdldF9jb250cmFjdF9saXN0aW5nX2Nhc3RlcgpnZXRjb250cmFjdGxpc3RpbmdjYXN0ZXJfNzU6CnByb3RvIDAgMApieXRlICIiCmR1cAp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCmZyYW1lX2J1cnkgMQpmcmFtZV9kaWcgMQpjYWxsc3ViIGdldGNvbnRyYWN0bGlzdGluZ180NwpmcmFtZV9idXJ5IDAKYnl0ZSAweDE1MWY3Yzc1CmZyYW1lX2RpZyAwCmNvbmNhdApsb2cKcmV0c3ViCgovLyBnZXRfcmF0ZV9hbmRfYmFsYW5jZXNfY2FzdGVyCmdldHJhdGVhbmRiYWxhbmNlc2Nhc3Rlcl83NjoKcHJvdG8gMCAwCmJ5dGUgIiIKY2FsbHN1YiBnZXRyYXRlYW5kYmFsYW5jZXNfNDgKZnJhbWVfYnVyeSAwCmJ5dGUgMHgxNTFmN2M3NQpmcmFtZV9kaWcgMApjb25jYXQKbG9nCnJldHN1YgoKLy8gZ2V0X25lZWRfc3dhcF9jYXN0ZXIKZ2V0bmVlZHN3YXBjYXN0ZXJfNzc6CnByb3RvIDAgMAppbnQgMApjYWxsc3ViIGdldG5lZWRzd2FwXzQ5CmZyYW1lX2J1cnkgMApieXRlIDB4MTUxZjdjNzUKYnl0ZSAweDAwCmludCAwCmZyYW1lX2RpZyAwCnNldGJpdApjb25jYXQKbG9nCnJldHN1YgoKLy8gc3dhcF9vcl9mYWlsX2Nhc3Rlcgpzd2Fwb3JmYWlsY2FzdGVyXzc4Ogpwcm90byAwIDAKY2FsbHN1YiBzd2Fwb3JmYWlsXzUwCnJldHN1YgoKLy8gbnVsbHVuX2Nhc3RlcgpudWxsdW5jYXN0ZXJfNzk6CnByb3RvIDAgMApjYWxsc3ViIG51bGx1bl81MQpyZXRzdWI=","clear":"I3ByYWdtYSB2ZXJzaW9uIDExCmludCAwCnJldHVybg=="},"bareActions":{"create":["NoOp"],"call":[]}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type ContractListing = {
  rate: bigint,
  algoBalance: bigint,
  asaBalance: bigint,
  staked: bigint,
  lstId: bigint,
  lstName: string,
  asaId: bigint,
  asaName: string,
  asaUnitName: string,
  asaDecimals: number,
  needSwap: boolean,
  incentiveEligible: boolean,
  isOnline: boolean,
  upgrading: boolean,
  userProtestingStake: bigint
}


/**
 * Converts the ABI tuple representation of a ContractListing to the struct representation
 */
export function ContractListingFromTuple(abiTuple: [bigint, bigint, bigint, bigint, bigint, string, bigint, string, string, number, boolean, boolean, boolean, boolean, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.ContractListing, APP_SPEC.structs) as ContractListing
}

/**
 * The argument types for the DualStakeContract contract
 */
export type DualStakeContractArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'queue_update_fees(uint64,uint64)uint64': {
      newPlatformFeeBps: bigint | number
      newNoderunnerFeeBps: bigint | number
    }
    'reset_update_fees()void': Record<string, never>
    'configure(uint64,byte[],byte[],uint64,uint64,address,address,address,bool,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void': {
      asaId: bigint | number
      lpType: Uint8Array
      lpId: Uint8Array
      platformFeeBps: bigint | number
      noderunnerFeeBps: bigint | number
      adminAddr: string
      feeAdminAddr: string
      noderunnerAddr: string
      delayOptin: boolean
      maxBalance: bigint | number
      upgradePeriod: bigint | number
      feeUpdatePeriod: bigint | number
      feeUpdateMaxDelta: bigint | number
      ratePrecision: bigint | number
      tm2AppId: bigint | number
      arc59AppId: bigint | number
    }
    'configure2(byte[],byte[],byte[])void': {
      lstAsaName: Uint8Array
      lstUnitName: Uint8Array
      lstUrl: Uint8Array
    }
    'change_admin_1(address)void': {
      newAdmin: string
    }
    'change_admin_2()void': Record<string, never>
    'change_noderunner(address)void': {
      newNoderunner: string
    }
    'change_feeaddr(address)void': {
      newFeeaddr: string
    }
    'update_max_balance(uint64)void': {
      newMaxBalance: bigint | number
    }
    'verify_nfdomains(uint64,uint64,byte[])void': {
      registryAppId: bigint | number
      nfdAppId: bigint | number
      name: Uint8Array
    }
    'withdraw_node_runner_fees(uint64)void': {
      amount: bigint | number
    }
    'withdraw_platform_fees(uint64)void': {
      amount: bigint | number
    }
    'keyreg_online(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void': {
      selectionKey: Uint8Array
      votingKey: Uint8Array
      spKey: Uint8Array
      firstRound: bigint | number
      lastRound: bigint | number
      keyDilution: bigint | number
      fee: bigint | number
    }
    'keyreg_offline()void': Record<string, never>
    'protest_stake()void': Record<string, never>
    'unprotest_stake()void': Record<string, never>
    'admin_unprotest_stake(address)void': {
      user: string
    }
    'dissolve_protesting_stake(address)void': {
      user: string
    }
    'queue_upgrade(byte[])void': {
      hashes: Uint8Array
    }
    'reset_upgrade()void': Record<string, never>
    'mint()void': Record<string, never>
    'redeem()void': Record<string, never>
    'get_rate()uint64': Record<string, never>
    'get_contract_listing(address)(uint64,uint64,uint64,uint64,uint64,string,uint64,string,string,uint16,bool,bool,bool,bool,uint64)': {
      user: string
    }
    'get_rate_and_balances()(uint64,uint64,uint64)': Record<string, never>
    'get_need_swap()bool': Record<string, never>
    'swap_or_fail()void': Record<string, never>
    'nullun()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'queue_update_fees(uint64,uint64)uint64': [newPlatformFeeBps: bigint | number, newNoderunnerFeeBps: bigint | number]
    'reset_update_fees()void': []
    'configure(uint64,byte[],byte[],uint64,uint64,address,address,address,bool,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void': [asaId: bigint | number, lpType: Uint8Array, lpId: Uint8Array, platformFeeBps: bigint | number, noderunnerFeeBps: bigint | number, adminAddr: string, feeAdminAddr: string, noderunnerAddr: string, delayOptin: boolean, maxBalance: bigint | number, upgradePeriod: bigint | number, feeUpdatePeriod: bigint | number, feeUpdateMaxDelta: bigint | number, ratePrecision: bigint | number, tm2AppId: bigint | number, arc59AppId: bigint | number]
    'configure2(byte[],byte[],byte[])void': [lstAsaName: Uint8Array, lstUnitName: Uint8Array, lstUrl: Uint8Array]
    'change_admin_1(address)void': [newAdmin: string]
    'change_admin_2()void': []
    'change_noderunner(address)void': [newNoderunner: string]
    'change_feeaddr(address)void': [newFeeaddr: string]
    'update_max_balance(uint64)void': [newMaxBalance: bigint | number]
    'verify_nfdomains(uint64,uint64,byte[])void': [registryAppId: bigint | number, nfdAppId: bigint | number, name: Uint8Array]
    'withdraw_node_runner_fees(uint64)void': [amount: bigint | number]
    'withdraw_platform_fees(uint64)void': [amount: bigint | number]
    'keyreg_online(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void': [selectionKey: Uint8Array, votingKey: Uint8Array, spKey: Uint8Array, firstRound: bigint | number, lastRound: bigint | number, keyDilution: bigint | number, fee: bigint | number]
    'keyreg_offline()void': []
    'protest_stake()void': []
    'unprotest_stake()void': []
    'admin_unprotest_stake(address)void': [user: string]
    'dissolve_protesting_stake(address)void': [user: string]
    'queue_upgrade(byte[])void': [hashes: Uint8Array]
    'reset_upgrade()void': []
    'mint()void': []
    'redeem()void': []
    'get_rate()uint64': []
    'get_contract_listing(address)(uint64,uint64,uint64,uint64,uint64,string,uint64,string,string,uint16,bool,bool,bool,bool,uint64)': [user: string]
    'get_rate_and_balances()(uint64,uint64,uint64)': []
    'get_need_swap()bool': []
    'swap_or_fail()void': []
    'nullun()void': []
  }
}

/**
 * The return type for each method
 */
export type DualStakeContractReturns = {
  'queue_update_fees(uint64,uint64)uint64': bigint
  'reset_update_fees()void': void
  'configure(uint64,byte[],byte[],uint64,uint64,address,address,address,bool,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void': void
  'configure2(byte[],byte[],byte[])void': void
  'change_admin_1(address)void': void
  'change_admin_2()void': void
  'change_noderunner(address)void': void
  'change_feeaddr(address)void': void
  'update_max_balance(uint64)void': void
  'verify_nfdomains(uint64,uint64,byte[])void': void
  'withdraw_node_runner_fees(uint64)void': void
  'withdraw_platform_fees(uint64)void': void
  'keyreg_online(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void': void
  'keyreg_offline()void': void
  'protest_stake()void': void
  'unprotest_stake()void': void
  'admin_unprotest_stake(address)void': void
  'dissolve_protesting_stake(address)void': void
  'queue_upgrade(byte[])void': void
  'reset_upgrade()void': void
  'mint()void': void
  'redeem()void': void
  'get_rate()uint64': bigint
  'get_contract_listing(address)(uint64,uint64,uint64,uint64,uint64,string,uint64,string,string,uint16,bool,bool,bool,bool,uint64)': ContractListing
  'get_rate_and_balances()(uint64,uint64,uint64)': [bigint, bigint, bigint]
  'get_need_swap()bool': boolean
  'swap_or_fail()void': void
  'nullun()void': void
}

/**
 * Defines the types of available calls and state of the DualStakeContract smart contract.
 */
export type DualStakeContractTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'queue_update_fees(uint64,uint64)uint64' | 'queue_update_fees', {
      argsObj: DualStakeContractArgs['obj']['queue_update_fees(uint64,uint64)uint64']
      argsTuple: DualStakeContractArgs['tuple']['queue_update_fees(uint64,uint64)uint64']
      returns: DualStakeContractReturns['queue_update_fees(uint64,uint64)uint64']
    }>
    & Record<'reset_update_fees()void' | 'reset_update_fees', {
      argsObj: DualStakeContractArgs['obj']['reset_update_fees()void']
      argsTuple: DualStakeContractArgs['tuple']['reset_update_fees()void']
      returns: DualStakeContractReturns['reset_update_fees()void']
    }>
    & Record<'configure(uint64,byte[],byte[],uint64,uint64,address,address,address,bool,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void' | 'configure', {
      argsObj: DualStakeContractArgs['obj']['configure(uint64,byte[],byte[],uint64,uint64,address,address,address,bool,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void']
      argsTuple: DualStakeContractArgs['tuple']['configure(uint64,byte[],byte[],uint64,uint64,address,address,address,bool,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void']
      returns: DualStakeContractReturns['configure(uint64,byte[],byte[],uint64,uint64,address,address,address,bool,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void']
    }>
    & Record<'configure2(byte[],byte[],byte[])void' | 'configure2', {
      argsObj: DualStakeContractArgs['obj']['configure2(byte[],byte[],byte[])void']
      argsTuple: DualStakeContractArgs['tuple']['configure2(byte[],byte[],byte[])void']
      returns: DualStakeContractReturns['configure2(byte[],byte[],byte[])void']
    }>
    & Record<'change_admin_1(address)void' | 'change_admin_1', {
      argsObj: DualStakeContractArgs['obj']['change_admin_1(address)void']
      argsTuple: DualStakeContractArgs['tuple']['change_admin_1(address)void']
      returns: DualStakeContractReturns['change_admin_1(address)void']
    }>
    & Record<'change_admin_2()void' | 'change_admin_2', {
      argsObj: DualStakeContractArgs['obj']['change_admin_2()void']
      argsTuple: DualStakeContractArgs['tuple']['change_admin_2()void']
      returns: DualStakeContractReturns['change_admin_2()void']
    }>
    & Record<'change_noderunner(address)void' | 'change_noderunner', {
      argsObj: DualStakeContractArgs['obj']['change_noderunner(address)void']
      argsTuple: DualStakeContractArgs['tuple']['change_noderunner(address)void']
      returns: DualStakeContractReturns['change_noderunner(address)void']
    }>
    & Record<'change_feeaddr(address)void' | 'change_feeaddr', {
      argsObj: DualStakeContractArgs['obj']['change_feeaddr(address)void']
      argsTuple: DualStakeContractArgs['tuple']['change_feeaddr(address)void']
      returns: DualStakeContractReturns['change_feeaddr(address)void']
    }>
    & Record<'update_max_balance(uint64)void' | 'update_max_balance', {
      argsObj: DualStakeContractArgs['obj']['update_max_balance(uint64)void']
      argsTuple: DualStakeContractArgs['tuple']['update_max_balance(uint64)void']
      returns: DualStakeContractReturns['update_max_balance(uint64)void']
    }>
    & Record<'verify_nfdomains(uint64,uint64,byte[])void' | 'verify_nfdomains', {
      argsObj: DualStakeContractArgs['obj']['verify_nfdomains(uint64,uint64,byte[])void']
      argsTuple: DualStakeContractArgs['tuple']['verify_nfdomains(uint64,uint64,byte[])void']
      returns: DualStakeContractReturns['verify_nfdomains(uint64,uint64,byte[])void']
    }>
    & Record<'withdraw_node_runner_fees(uint64)void' | 'withdraw_node_runner_fees', {
      argsObj: DualStakeContractArgs['obj']['withdraw_node_runner_fees(uint64)void']
      argsTuple: DualStakeContractArgs['tuple']['withdraw_node_runner_fees(uint64)void']
      returns: DualStakeContractReturns['withdraw_node_runner_fees(uint64)void']
    }>
    & Record<'withdraw_platform_fees(uint64)void' | 'withdraw_platform_fees', {
      argsObj: DualStakeContractArgs['obj']['withdraw_platform_fees(uint64)void']
      argsTuple: DualStakeContractArgs['tuple']['withdraw_platform_fees(uint64)void']
      returns: DualStakeContractReturns['withdraw_platform_fees(uint64)void']
    }>
    & Record<'keyreg_online(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void' | 'keyreg_online', {
      argsObj: DualStakeContractArgs['obj']['keyreg_online(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void']
      argsTuple: DualStakeContractArgs['tuple']['keyreg_online(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void']
      returns: DualStakeContractReturns['keyreg_online(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void']
    }>
    & Record<'keyreg_offline()void' | 'keyreg_offline', {
      argsObj: DualStakeContractArgs['obj']['keyreg_offline()void']
      argsTuple: DualStakeContractArgs['tuple']['keyreg_offline()void']
      returns: DualStakeContractReturns['keyreg_offline()void']
    }>
    & Record<'protest_stake()void' | 'protest_stake', {
      argsObj: DualStakeContractArgs['obj']['protest_stake()void']
      argsTuple: DualStakeContractArgs['tuple']['protest_stake()void']
      returns: DualStakeContractReturns['protest_stake()void']
    }>
    & Record<'unprotest_stake()void' | 'unprotest_stake', {
      argsObj: DualStakeContractArgs['obj']['unprotest_stake()void']
      argsTuple: DualStakeContractArgs['tuple']['unprotest_stake()void']
      returns: DualStakeContractReturns['unprotest_stake()void']
    }>
    & Record<'admin_unprotest_stake(address)void' | 'admin_unprotest_stake', {
      argsObj: DualStakeContractArgs['obj']['admin_unprotest_stake(address)void']
      argsTuple: DualStakeContractArgs['tuple']['admin_unprotest_stake(address)void']
      returns: DualStakeContractReturns['admin_unprotest_stake(address)void']
    }>
    & Record<'dissolve_protesting_stake(address)void' | 'dissolve_protesting_stake', {
      argsObj: DualStakeContractArgs['obj']['dissolve_protesting_stake(address)void']
      argsTuple: DualStakeContractArgs['tuple']['dissolve_protesting_stake(address)void']
      returns: DualStakeContractReturns['dissolve_protesting_stake(address)void']
    }>
    & Record<'queue_upgrade(byte[])void' | 'queue_upgrade', {
      argsObj: DualStakeContractArgs['obj']['queue_upgrade(byte[])void']
      argsTuple: DualStakeContractArgs['tuple']['queue_upgrade(byte[])void']
      returns: DualStakeContractReturns['queue_upgrade(byte[])void']
    }>
    & Record<'reset_upgrade()void' | 'reset_upgrade', {
      argsObj: DualStakeContractArgs['obj']['reset_upgrade()void']
      argsTuple: DualStakeContractArgs['tuple']['reset_upgrade()void']
      returns: DualStakeContractReturns['reset_upgrade()void']
    }>
    & Record<'mint()void' | 'mint', {
      argsObj: DualStakeContractArgs['obj']['mint()void']
      argsTuple: DualStakeContractArgs['tuple']['mint()void']
      returns: DualStakeContractReturns['mint()void']
    }>
    & Record<'redeem()void' | 'redeem', {
      argsObj: DualStakeContractArgs['obj']['redeem()void']
      argsTuple: DualStakeContractArgs['tuple']['redeem()void']
      returns: DualStakeContractReturns['redeem()void']
    }>
    & Record<'get_rate()uint64' | 'get_rate', {
      argsObj: DualStakeContractArgs['obj']['get_rate()uint64']
      argsTuple: DualStakeContractArgs['tuple']['get_rate()uint64']
      returns: DualStakeContractReturns['get_rate()uint64']
    }>
    & Record<'get_contract_listing(address)(uint64,uint64,uint64,uint64,uint64,string,uint64,string,string,uint16,bool,bool,bool,bool,uint64)' | 'get_contract_listing', {
      argsObj: DualStakeContractArgs['obj']['get_contract_listing(address)(uint64,uint64,uint64,uint64,uint64,string,uint64,string,string,uint16,bool,bool,bool,bool,uint64)']
      argsTuple: DualStakeContractArgs['tuple']['get_contract_listing(address)(uint64,uint64,uint64,uint64,uint64,string,uint64,string,string,uint16,bool,bool,bool,bool,uint64)']
      returns: DualStakeContractReturns['get_contract_listing(address)(uint64,uint64,uint64,uint64,uint64,string,uint64,string,string,uint16,bool,bool,bool,bool,uint64)']
    }>
    & Record<'get_rate_and_balances()(uint64,uint64,uint64)' | 'get_rate_and_balances', {
      argsObj: DualStakeContractArgs['obj']['get_rate_and_balances()(uint64,uint64,uint64)']
      argsTuple: DualStakeContractArgs['tuple']['get_rate_and_balances()(uint64,uint64,uint64)']
      returns: DualStakeContractReturns['get_rate_and_balances()(uint64,uint64,uint64)']
    }>
    & Record<'get_need_swap()bool' | 'get_need_swap', {
      argsObj: DualStakeContractArgs['obj']['get_need_swap()bool']
      argsTuple: DualStakeContractArgs['tuple']['get_need_swap()bool']
      returns: DualStakeContractReturns['get_need_swap()bool']
    }>
    & Record<'swap_or_fail()void' | 'swap_or_fail', {
      argsObj: DualStakeContractArgs['obj']['swap_or_fail()void']
      argsTuple: DualStakeContractArgs['tuple']['swap_or_fail()void']
      returns: DualStakeContractReturns['swap_or_fail()void']
    }>
    & Record<'nullun()void' | 'nullun', {
      argsObj: DualStakeContractArgs['obj']['nullun()void']
      argsTuple: DualStakeContractArgs['tuple']['nullun()void']
      returns: DualStakeContractReturns['nullun()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        version: bigint
        asaId: bigint
        lstId: bigint
        staked: bigint
        platformFees: bigint
        noderunnerFees: bigint
        platformFeeBps: bigint
        noderunnerFeeBps: bigint
        adminAddr: BinaryState
        feeAdminAddr: BinaryState
        noderunnerAddr: BinaryState
        lpType: BinaryState
        lpId: BinaryState
        delayOptin: bigint
        feeUpdate: BinaryState
        contractUpgrade: BinaryState
        protestCount: bigint
        protestSum: bigint
        upgradePeriod: bigint
        feeUpdatePeriod: bigint
        feeUpdateMaxDelta: bigint
        maxBalance: bigint
        ratePrecision: bigint
        tm2AppId: bigint
        arc59AppId: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type DualStakeContractSignatures = keyof DualStakeContractTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type DualStakeContractNonVoidMethodSignatures = keyof DualStakeContractTypes['methods'] extends infer T ? T extends keyof DualStakeContractTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the DualStakeContract smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends DualStakeContractSignatures> = DualStakeContractTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the DualStakeContract smart contract to the method's return type
 */
export type MethodReturn<TSignature extends DualStakeContractSignatures> = DualStakeContractTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = DualStakeContractTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type DualStakeContractCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type DualStakeContractDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: DualStakeContractCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the DualStakeContract smart contract
 */
export abstract class DualStakeContractParamsFactory {
  /**
   * Constructs a no op call for the queue_update_fees(uint64,uint64)uint64 ABI method
   *
  * Fee admin method. Changes enforced to +/- 2.5% delta max
  If increasing fees, schedules an update of the node+platform fees in bps. Decreasing fees are applied immediately. Return timestamp of applicability as uint64

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static queueUpdateFees(params: CallParams<DualStakeContractArgs['obj']['queue_update_fees(uint64,uint64)uint64'] | DualStakeContractArgs['tuple']['queue_update_fees(uint64,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'queue_update_fees(uint64,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newPlatformFeeBps, params.args.newNoderunnerFeeBps],
    }
  }
  /**
   * Constructs a no op call for the reset_update_fees()void ABI method
   *
   * Fee admin method. Cancel a scheudled params update
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static resetUpdateFees(params: CallParams<DualStakeContractArgs['obj']['reset_update_fees()void'] | DualStakeContractArgs['tuple']['reset_update_fees()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'reset_update_fees()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the configure(uint64,byte[],byte[],uint64,uint64,address,address,address,bool,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void ABI method
   *
   * Admin or fee admin method. Bootstrap; configure global storage except LST ID.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static configure(params: CallParams<DualStakeContractArgs['obj']['configure(uint64,byte[],byte[],uint64,uint64,address,address,address,bool,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'] | DualStakeContractArgs['tuple']['configure(uint64,byte[],byte[],uint64,uint64,address,address,address,bool,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'configure(uint64,byte[],byte[],uint64,uint64,address,address,address,bool,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asaId, params.args.lpType, params.args.lpId, params.args.platformFeeBps, params.args.noderunnerFeeBps, params.args.adminAddr, params.args.feeAdminAddr, params.args.noderunnerAddr, params.args.delayOptin, params.args.maxBalance, params.args.upgradePeriod, params.args.feeUpdatePeriod, params.args.feeUpdateMaxDelta, params.args.ratePrecision, params.args.tm2AppId, params.args.arc59AppId],
    }
  }
  /**
   * Constructs a no op call for the configure2(byte[],byte[],byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static configure2(params: CallParams<DualStakeContractArgs['obj']['configure2(byte[],byte[],byte[])void'] | DualStakeContractArgs['tuple']['configure2(byte[],byte[],byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'configure2(byte[],byte[],byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.lstAsaName, params.args.lstUnitName, params.args.lstUrl],
    }
  }
  /**
   * Constructs a no op call for the change_admin_1(address)void ABI method
   *
   * admin method. first of 2-step admin change process.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static changeAdmin_1(params: CallParams<DualStakeContractArgs['obj']['change_admin_1(address)void'] | DualStakeContractArgs['tuple']['change_admin_1(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'change_admin_1(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newAdmin],
    }
  }
  /**
   * Constructs a no op call for the change_admin_2()void ABI method
   *
   * public method. second of 2-step admin change process. called by new admin in atomic group after change_admin_1
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static changeAdmin_2(params: CallParams<DualStakeContractArgs['obj']['change_admin_2()void'] | DualStakeContractArgs['tuple']['change_admin_2()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'change_admin_2()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the change_noderunner(address)void ABI method
   *
  * fee admin/node runner method. change node runner address.
  node runner fees must be withdrawn before this, otherwise fee admin could steal node runner fees.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static changeNoderunner(params: CallParams<DualStakeContractArgs['obj']['change_noderunner(address)void'] | DualStakeContractArgs['tuple']['change_noderunner(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'change_noderunner(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newNoderunner],
    }
  }
  /**
   * Constructs a no op call for the change_feeaddr(address)void ABI method
   *
   * admin/fee admin method. change fee admin address
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static changeFeeaddr(params: CallParams<DualStakeContractArgs['obj']['change_feeaddr(address)void'] | DualStakeContractArgs['tuple']['change_feeaddr(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'change_feeaddr(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newFeeaddr],
    }
  }
  /**
   * Constructs a no op call for the update_max_balance(uint64)void ABI method
   *
   * Fee admin method. Updates max algo stake
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateMaxBalance(params: CallParams<DualStakeContractArgs['obj']['update_max_balance(uint64)void'] | DualStakeContractArgs['tuple']['update_max_balance(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_max_balance(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newMaxBalance],
    }
  }
  /**
   * Constructs a no op call for the verify_nfdomains(uint64,uint64,byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static verifyNfdomains(params: CallParams<DualStakeContractArgs['obj']['verify_nfdomains(uint64,uint64,byte[])void'] | DualStakeContractArgs['tuple']['verify_nfdomains(uint64,uint64,byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'verify_nfdomains(uint64,uint64,byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.registryAppId, params.args.nfdAppId, params.args.name],
    }
  }
  /**
   * Constructs a no op call for the withdraw_node_runner_fees(uint64)void ABI method
   *
  * fee admin/node runner method. withdraw node runner fees. hard coded to send to node runner address.
  the fee admin may call this to pay out the current node runner before changing node runner address

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdrawNodeRunnerFees(params: CallParams<DualStakeContractArgs['obj']['withdraw_node_runner_fees(uint64)void'] | DualStakeContractArgs['tuple']['withdraw_node_runner_fees(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdraw_node_runner_fees(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the withdraw_platform_fees(uint64)void ABI method
   *
   * fee admin method. withdraw platform fees
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdrawPlatformFees(params: CallParams<DualStakeContractArgs['obj']['withdraw_platform_fees(uint64)void'] | DualStakeContractArgs['tuple']['withdraw_platform_fees(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdraw_platform_fees(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the keyreg_online(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void ABI method
   *
  * Fee admin or node runner only. Send keyreg online.
  Required payment if fee is not zero. Fee must be 2A if escrow is not account eligible, otherwise zero (paid by outer) Fee amount is validated against Global eligibility fee parameter

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static keyregOnline(params: CallParams<DualStakeContractArgs['obj']['keyreg_online(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void'] | DualStakeContractArgs['tuple']['keyreg_online(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'keyreg_online(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.selectionKey, params.args.votingKey, params.args.spKey, params.args.firstRound, params.args.lastRound, params.args.keyDilution, params.args.fee],
    }
  }
  /**
   * Constructs a no op call for the keyreg_offline()void ABI method
   *
   * Fee admin or noderunner only. Send keyreg offline for an escrow account
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static keyregOffline(params: CallParams<DualStakeContractArgs['obj']['keyreg_offline()void'] | DualStakeContractArgs['tuple']['keyreg_offline()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'keyreg_offline()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the protest_stake()void ABI method
   *
  * public method. locks dualSTAKE LST stake on the contract as "upgrade protest".
  This blocks upgrading unless it is dissolved (redeemed & returned to user) The upgrade can also be cancelled, whereafter the dualSTAKE tokens can be returned to the user unchanged

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static protestStake(params: CallParams<DualStakeContractArgs['obj']['protest_stake()void'] | DualStakeContractArgs['tuple']['protest_stake()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'protest_stake()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the unprotest_stake()void ABI method
   *
   * public method. revoke protesting stake for self. Returns dualSTAKE tokens to user who protested with them.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static unprotestStake(params: CallParams<DualStakeContractArgs['obj']['unprotest_stake()void'] | DualStakeContractArgs['tuple']['unprotest_stake()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'unprotest_stake()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the admin_unprotest_stake(address)void ABI method
   *
   * fee admin method. callable when there is no upgrade scheduled. returns the protesting dualSTAKE tokens to user $user. If the user has opted out of the dualSTAKE asset, this fails and the user can undo the protest stake themselves.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static adminUnprotestStake(params: CallParams<DualStakeContractArgs['obj']['admin_unprotest_stake(address)void'] | DualStakeContractArgs['tuple']['admin_unprotest_stake(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'admin_unprotest_stake(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.user],
    }
  }
  /**
   * Constructs a no op call for the dissolve_protesting_stake(address)void ABI method
   *
  * fee admin method. called before upgrading to dissolve protesting stake for user $user. Redeems & returns ALGO and ASA to user.
  If the user has opted out of the ASA: 1) ARC59 asset inbox is used to send the ASA and 2) the transaction and MBR fees for asset inbox are subtractd from the ALGO amount.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static dissolveProtestingStake(params: CallParams<DualStakeContractArgs['obj']['dissolve_protesting_stake(address)void'] | DualStakeContractArgs['tuple']['dissolve_protesting_stake(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'dissolve_protesting_stake(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.user],
    }
  }
  /**
   * Constructs a no op call for the queue_upgrade(byte[])void ABI method
   *
  * admin method only.
  stage a contract upgrade. time applicability 2 weeks from current timestamp. hashes are variable length, 32b each, corresponding to SHA512_256 of approval program pages

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static queueUpgrade(params: CallParams<DualStakeContractArgs['obj']['queue_upgrade(byte[])void'] | DualStakeContractArgs['tuple']['queue_upgrade(byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'queue_upgrade(byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.hashes],
    }
  }
  /**
   * Constructs a no op call for the reset_upgrade()void ABI method
   *
  * admin or fee admin only.
  clear a staged contract upgrade

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static resetUpgrade(params: CallParams<DualStakeContractArgs['obj']['reset_upgrade()void'] | DualStakeContractArgs['tuple']['reset_upgrade()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'reset_upgrade()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the mint()void ABI method
   *
  * Public method. Mint dualSTAKE lst
  NEXT transaction in group must be payment in ALGO if rate != 0, 2 txns after must be payment in ASA will swap and apply fee updates if needed sends dualSTAKE tokens to caller

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static mint(params: CallParams<DualStakeContractArgs['obj']['mint()void'] | DualStakeContractArgs['tuple']['mint()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'mint()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the redeem()void ABI method
   *
  * Public method. Redeem dualSTAKE tokens back to ALGO+ASA.
  dualSTAKE:ALGO is always 1:1 dualSTAKE:ASA is (ASA balance):(global staked) will swap and apply fee updates if needed

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static redeem(params: CallParams<DualStakeContractArgs['obj']['redeem()void'] | DualStakeContractArgs['tuple']['redeem()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'redeem()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the get_rate()uint64 ABI method
   *
  * Public method. Returns the current rate as ABI uint64:
  1e8 * (ASA Balance) / (global staked) Returns zero if staked == 0 will swap and apply fee updates if needed

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getRate(params: CallParams<DualStakeContractArgs['obj']['get_rate()uint64'] | DualStakeContractArgs['tuple']['get_rate()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_rate()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the get_contract_listing(address)(uint64,uint64,uint64,uint64,uint64,string,uint64,string,string,uint16,bool,bool,bool,bool,uint64) ABI method
   *
  * Public method. Returns ABI struct ContractListing:
  rate (see get_rate)     escrow algo balance     escrow asa balance     staked balance     dualstake token ID     dualstake asset name     asa asset ID     asa asset name     asa unit name     asa decimals     need_swap     incentive_eligible     is_online     user_protesting_stake will swap and apply fee updates if needed

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getContractListing(params: CallParams<DualStakeContractArgs['obj']['get_contract_listing(address)(uint64,uint64,uint64,uint64,uint64,string,uint64,string,string,uint16,bool,bool,bool,bool,uint64)'] | DualStakeContractArgs['tuple']['get_contract_listing(address)(uint64,uint64,uint64,uint64,uint64,string,uint64,string,string,uint16,bool,bool,bool,bool,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_contract_listing(address)(uint64,uint64,uint64,uint64,uint64,string,uint64,string,string,uint16,bool,bool,bool,bool,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.user],
    }
  }
  /**
   * Constructs a no op call for the get_rate_and_balances()(uint64,uint64,uint64) ABI method
   *
  * Public method. Returns ABI tuple[3]:
  rate (see get_rate)     escrow algo balance     escrow asa balance will swap and apply fee updates if needed

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getRateAndBalances(params: CallParams<DualStakeContractArgs['obj']['get_rate_and_balances()(uint64,uint64,uint64)'] | DualStakeContractArgs['tuple']['get_rate_and_balances()(uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_rate_and_balances()(uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the get_need_swap()bool ABI method
   *
   * Public method. Returns whether the contract thinks it needs to swap
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getNeedSwap(params: CallParams<DualStakeContractArgs['obj']['get_need_swap()bool'] | DualStakeContractArgs['tuple']['get_need_swap()bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_need_swap()bool' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the swap_or_fail()void ABI method
   *
   * Public method. Perform swap or fail
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static swapOrFail(params: CallParams<DualStakeContractArgs['obj']['swap_or_fail()void'] | DualStakeContractArgs['tuple']['swap_or_fail()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'swap_or_fail()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the nullun()void ABI method
   *
   * Public empty method for opcode budget increase
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static nullun(params: CallParams<DualStakeContractArgs['obj']['nullun()void'] | DualStakeContractArgs['tuple']['nullun()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'nullun()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the dualSTAKE Contract smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class DualStakeContractFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `DualStakeContractFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new DualStakeContractClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new DualStakeContractClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the dualSTAKE Contract smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: DualStakeContractDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new DualStakeContractClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the dualSTAKE Contract smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the dualSTAKE Contract smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the dualSTAKE Contract smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new DualStakeContractClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the dualSTAKE Contract smart contract
 */
export class DualStakeContractClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `DualStakeContractClient`
   *
   * @param appClient An `AppClient` instance which has been created with the DualStakeContract app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `DualStakeContractClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends DualStakeContractNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `DualStakeContractClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<DualStakeContractClient> {
    return new DualStakeContractClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `DualStakeContractClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<DualStakeContractClient> {
    return new DualStakeContractClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the dualSTAKE Contract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `queue_update_fees(uint64,uint64)uint64` ABI method.
     *
    * Fee admin method. Changes enforced to +/- 2.5% delta max
    If increasing fees, schedules an update of the node+platform fees in bps. Decreasing fees are applied immediately. Return timestamp of applicability as uint64

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    queueUpdateFees: (params: CallParams<DualStakeContractArgs['obj']['queue_update_fees(uint64,uint64)uint64'] | DualStakeContractArgs['tuple']['queue_update_fees(uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DualStakeContractParamsFactory.queueUpdateFees(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `reset_update_fees()void` ABI method.
     *
     * Fee admin method. Cancel a scheudled params update
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    resetUpdateFees: (params: CallParams<DualStakeContractArgs['obj']['reset_update_fees()void'] | DualStakeContractArgs['tuple']['reset_update_fees()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(DualStakeContractParamsFactory.resetUpdateFees(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `configure(uint64,byte[],byte[],uint64,uint64,address,address,address,bool,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void` ABI method.
     *
     * Admin or fee admin method. Bootstrap; configure global storage except LST ID.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    configure: (params: CallParams<DualStakeContractArgs['obj']['configure(uint64,byte[],byte[],uint64,uint64,address,address,address,bool,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'] | DualStakeContractArgs['tuple']['configure(uint64,byte[],byte[],uint64,uint64,address,address,address,bool,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DualStakeContractParamsFactory.configure(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `configure2(byte[],byte[],byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    configure2: (params: CallParams<DualStakeContractArgs['obj']['configure2(byte[],byte[],byte[])void'] | DualStakeContractArgs['tuple']['configure2(byte[],byte[],byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DualStakeContractParamsFactory.configure2(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `change_admin_1(address)void` ABI method.
     *
     * admin method. first of 2-step admin change process.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    changeAdmin_1: (params: CallParams<DualStakeContractArgs['obj']['change_admin_1(address)void'] | DualStakeContractArgs['tuple']['change_admin_1(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DualStakeContractParamsFactory.changeAdmin_1(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `change_admin_2()void` ABI method.
     *
     * public method. second of 2-step admin change process. called by new admin in atomic group after change_admin_1
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    changeAdmin_2: (params: CallParams<DualStakeContractArgs['obj']['change_admin_2()void'] | DualStakeContractArgs['tuple']['change_admin_2()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(DualStakeContractParamsFactory.changeAdmin_2(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `change_noderunner(address)void` ABI method.
     *
    * fee admin/node runner method. change node runner address.
    node runner fees must be withdrawn before this, otherwise fee admin could steal node runner fees.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    changeNoderunner: (params: CallParams<DualStakeContractArgs['obj']['change_noderunner(address)void'] | DualStakeContractArgs['tuple']['change_noderunner(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DualStakeContractParamsFactory.changeNoderunner(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `change_feeaddr(address)void` ABI method.
     *
     * admin/fee admin method. change fee admin address
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    changeFeeaddr: (params: CallParams<DualStakeContractArgs['obj']['change_feeaddr(address)void'] | DualStakeContractArgs['tuple']['change_feeaddr(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DualStakeContractParamsFactory.changeFeeaddr(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `update_max_balance(uint64)void` ABI method.
     *
     * Fee admin method. Updates max algo stake
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateMaxBalance: (params: CallParams<DualStakeContractArgs['obj']['update_max_balance(uint64)void'] | DualStakeContractArgs['tuple']['update_max_balance(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DualStakeContractParamsFactory.updateMaxBalance(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `verify_nfdomains(uint64,uint64,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    verifyNfdomains: (params: CallParams<DualStakeContractArgs['obj']['verify_nfdomains(uint64,uint64,byte[])void'] | DualStakeContractArgs['tuple']['verify_nfdomains(uint64,uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DualStakeContractParamsFactory.verifyNfdomains(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `withdraw_node_runner_fees(uint64)void` ABI method.
     *
    * fee admin/node runner method. withdraw node runner fees. hard coded to send to node runner address.
    the fee admin may call this to pay out the current node runner before changing node runner address

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdrawNodeRunnerFees: (params: CallParams<DualStakeContractArgs['obj']['withdraw_node_runner_fees(uint64)void'] | DualStakeContractArgs['tuple']['withdraw_node_runner_fees(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DualStakeContractParamsFactory.withdrawNodeRunnerFees(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `withdraw_platform_fees(uint64)void` ABI method.
     *
     * fee admin method. withdraw platform fees
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdrawPlatformFees: (params: CallParams<DualStakeContractArgs['obj']['withdraw_platform_fees(uint64)void'] | DualStakeContractArgs['tuple']['withdraw_platform_fees(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DualStakeContractParamsFactory.withdrawPlatformFees(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `keyreg_online(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void` ABI method.
     *
    * Fee admin or node runner only. Send keyreg online.
    Required payment if fee is not zero. Fee must be 2A if escrow is not account eligible, otherwise zero (paid by outer) Fee amount is validated against Global eligibility fee parameter

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    keyregOnline: (params: CallParams<DualStakeContractArgs['obj']['keyreg_online(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void'] | DualStakeContractArgs['tuple']['keyreg_online(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DualStakeContractParamsFactory.keyregOnline(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `keyreg_offline()void` ABI method.
     *
     * Fee admin or noderunner only. Send keyreg offline for an escrow account
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    keyregOffline: (params: CallParams<DualStakeContractArgs['obj']['keyreg_offline()void'] | DualStakeContractArgs['tuple']['keyreg_offline()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(DualStakeContractParamsFactory.keyregOffline(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `protest_stake()void` ABI method.
     *
    * public method. locks dualSTAKE LST stake on the contract as "upgrade protest".
    This blocks upgrading unless it is dissolved (redeemed & returned to user) The upgrade can also be cancelled, whereafter the dualSTAKE tokens can be returned to the user unchanged

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    protestStake: (params: CallParams<DualStakeContractArgs['obj']['protest_stake()void'] | DualStakeContractArgs['tuple']['protest_stake()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(DualStakeContractParamsFactory.protestStake(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `unprotest_stake()void` ABI method.
     *
     * public method. revoke protesting stake for self. Returns dualSTAKE tokens to user who protested with them.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    unprotestStake: (params: CallParams<DualStakeContractArgs['obj']['unprotest_stake()void'] | DualStakeContractArgs['tuple']['unprotest_stake()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(DualStakeContractParamsFactory.unprotestStake(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `admin_unprotest_stake(address)void` ABI method.
     *
     * fee admin method. callable when there is no upgrade scheduled. returns the protesting dualSTAKE tokens to user $user. If the user has opted out of the dualSTAKE asset, this fails and the user can undo the protest stake themselves.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    adminUnprotestStake: (params: CallParams<DualStakeContractArgs['obj']['admin_unprotest_stake(address)void'] | DualStakeContractArgs['tuple']['admin_unprotest_stake(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DualStakeContractParamsFactory.adminUnprotestStake(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `dissolve_protesting_stake(address)void` ABI method.
     *
    * fee admin method. called before upgrading to dissolve protesting stake for user $user. Redeems & returns ALGO and ASA to user.
    If the user has opted out of the ASA: 1) ARC59 asset inbox is used to send the ASA and 2) the transaction and MBR fees for asset inbox are subtractd from the ALGO amount.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    dissolveProtestingStake: (params: CallParams<DualStakeContractArgs['obj']['dissolve_protesting_stake(address)void'] | DualStakeContractArgs['tuple']['dissolve_protesting_stake(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DualStakeContractParamsFactory.dissolveProtestingStake(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `queue_upgrade(byte[])void` ABI method.
     *
    * admin method only.
    stage a contract upgrade. time applicability 2 weeks from current timestamp. hashes are variable length, 32b each, corresponding to SHA512_256 of approval program pages

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    queueUpgrade: (params: CallParams<DualStakeContractArgs['obj']['queue_upgrade(byte[])void'] | DualStakeContractArgs['tuple']['queue_upgrade(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DualStakeContractParamsFactory.queueUpgrade(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `reset_upgrade()void` ABI method.
     *
    * admin or fee admin only.
    clear a staged contract upgrade

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    resetUpgrade: (params: CallParams<DualStakeContractArgs['obj']['reset_upgrade()void'] | DualStakeContractArgs['tuple']['reset_upgrade()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(DualStakeContractParamsFactory.resetUpgrade(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `mint()void` ABI method.
     *
    * Public method. Mint dualSTAKE lst
    NEXT transaction in group must be payment in ALGO if rate != 0, 2 txns after must be payment in ASA will swap and apply fee updates if needed sends dualSTAKE tokens to caller

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    mint: (params: CallParams<DualStakeContractArgs['obj']['mint()void'] | DualStakeContractArgs['tuple']['mint()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(DualStakeContractParamsFactory.mint(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `redeem()void` ABI method.
     *
    * Public method. Redeem dualSTAKE tokens back to ALGO+ASA.
    dualSTAKE:ALGO is always 1:1 dualSTAKE:ASA is (ASA balance):(global staked) will swap and apply fee updates if needed

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    redeem: (params: CallParams<DualStakeContractArgs['obj']['redeem()void'] | DualStakeContractArgs['tuple']['redeem()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(DualStakeContractParamsFactory.redeem(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `get_rate()uint64` ABI method.
     *
    * Public method. Returns the current rate as ABI uint64:
    1e8 * (ASA Balance) / (global staked) Returns zero if staked == 0 will swap and apply fee updates if needed

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getRate: (params: CallParams<DualStakeContractArgs['obj']['get_rate()uint64'] | DualStakeContractArgs['tuple']['get_rate()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(DualStakeContractParamsFactory.getRate(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `get_contract_listing(address)(uint64,uint64,uint64,uint64,uint64,string,uint64,string,string,uint16,bool,bool,bool,bool,uint64)` ABI method.
     *
    * Public method. Returns ABI struct ContractListing:
    rate (see get_rate)     escrow algo balance     escrow asa balance     staked balance     dualstake token ID     dualstake asset name     asa asset ID     asa asset name     asa unit name     asa decimals     need_swap     incentive_eligible     is_online     user_protesting_stake will swap and apply fee updates if needed

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getContractListing: (params: CallParams<DualStakeContractArgs['obj']['get_contract_listing(address)(uint64,uint64,uint64,uint64,uint64,string,uint64,string,string,uint16,bool,bool,bool,bool,uint64)'] | DualStakeContractArgs['tuple']['get_contract_listing(address)(uint64,uint64,uint64,uint64,uint64,string,uint64,string,string,uint16,bool,bool,bool,bool,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DualStakeContractParamsFactory.getContractListing(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `get_rate_and_balances()(uint64,uint64,uint64)` ABI method.
     *
    * Public method. Returns ABI tuple[3]:
    rate (see get_rate)     escrow algo balance     escrow asa balance will swap and apply fee updates if needed

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getRateAndBalances: (params: CallParams<DualStakeContractArgs['obj']['get_rate_and_balances()(uint64,uint64,uint64)'] | DualStakeContractArgs['tuple']['get_rate_and_balances()(uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(DualStakeContractParamsFactory.getRateAndBalances(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `get_need_swap()bool` ABI method.
     *
     * Public method. Returns whether the contract thinks it needs to swap
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getNeedSwap: (params: CallParams<DualStakeContractArgs['obj']['get_need_swap()bool'] | DualStakeContractArgs['tuple']['get_need_swap()bool']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(DualStakeContractParamsFactory.getNeedSwap(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `swap_or_fail()void` ABI method.
     *
     * Public method. Perform swap or fail
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    swapOrFail: (params: CallParams<DualStakeContractArgs['obj']['swap_or_fail()void'] | DualStakeContractArgs['tuple']['swap_or_fail()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(DualStakeContractParamsFactory.swapOrFail(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `nullun()void` ABI method.
     *
     * Public empty method for opcode budget increase
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    nullun: (params: CallParams<DualStakeContractArgs['obj']['nullun()void'] | DualStakeContractArgs['tuple']['nullun()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(DualStakeContractParamsFactory.nullun(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the dualSTAKE Contract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `queue_update_fees(uint64,uint64)uint64` ABI method.
     *
    * Fee admin method. Changes enforced to +/- 2.5% delta max
    If increasing fees, schedules an update of the node+platform fees in bps. Decreasing fees are applied immediately. Return timestamp of applicability as uint64

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    queueUpdateFees: (params: CallParams<DualStakeContractArgs['obj']['queue_update_fees(uint64,uint64)uint64'] | DualStakeContractArgs['tuple']['queue_update_fees(uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DualStakeContractParamsFactory.queueUpdateFees(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `reset_update_fees()void` ABI method.
     *
     * Fee admin method. Cancel a scheudled params update
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    resetUpdateFees: (params: CallParams<DualStakeContractArgs['obj']['reset_update_fees()void'] | DualStakeContractArgs['tuple']['reset_update_fees()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(DualStakeContractParamsFactory.resetUpdateFees(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `configure(uint64,byte[],byte[],uint64,uint64,address,address,address,bool,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void` ABI method.
     *
     * Admin or fee admin method. Bootstrap; configure global storage except LST ID.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    configure: (params: CallParams<DualStakeContractArgs['obj']['configure(uint64,byte[],byte[],uint64,uint64,address,address,address,bool,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'] | DualStakeContractArgs['tuple']['configure(uint64,byte[],byte[],uint64,uint64,address,address,address,bool,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DualStakeContractParamsFactory.configure(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `configure2(byte[],byte[],byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    configure2: (params: CallParams<DualStakeContractArgs['obj']['configure2(byte[],byte[],byte[])void'] | DualStakeContractArgs['tuple']['configure2(byte[],byte[],byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DualStakeContractParamsFactory.configure2(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `change_admin_1(address)void` ABI method.
     *
     * admin method. first of 2-step admin change process.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    changeAdmin_1: (params: CallParams<DualStakeContractArgs['obj']['change_admin_1(address)void'] | DualStakeContractArgs['tuple']['change_admin_1(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DualStakeContractParamsFactory.changeAdmin_1(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `change_admin_2()void` ABI method.
     *
     * public method. second of 2-step admin change process. called by new admin in atomic group after change_admin_1
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    changeAdmin_2: (params: CallParams<DualStakeContractArgs['obj']['change_admin_2()void'] | DualStakeContractArgs['tuple']['change_admin_2()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(DualStakeContractParamsFactory.changeAdmin_2(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `change_noderunner(address)void` ABI method.
     *
    * fee admin/node runner method. change node runner address.
    node runner fees must be withdrawn before this, otherwise fee admin could steal node runner fees.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    changeNoderunner: (params: CallParams<DualStakeContractArgs['obj']['change_noderunner(address)void'] | DualStakeContractArgs['tuple']['change_noderunner(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DualStakeContractParamsFactory.changeNoderunner(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `change_feeaddr(address)void` ABI method.
     *
     * admin/fee admin method. change fee admin address
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    changeFeeaddr: (params: CallParams<DualStakeContractArgs['obj']['change_feeaddr(address)void'] | DualStakeContractArgs['tuple']['change_feeaddr(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DualStakeContractParamsFactory.changeFeeaddr(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `update_max_balance(uint64)void` ABI method.
     *
     * Fee admin method. Updates max algo stake
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateMaxBalance: (params: CallParams<DualStakeContractArgs['obj']['update_max_balance(uint64)void'] | DualStakeContractArgs['tuple']['update_max_balance(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DualStakeContractParamsFactory.updateMaxBalance(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `verify_nfdomains(uint64,uint64,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    verifyNfdomains: (params: CallParams<DualStakeContractArgs['obj']['verify_nfdomains(uint64,uint64,byte[])void'] | DualStakeContractArgs['tuple']['verify_nfdomains(uint64,uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DualStakeContractParamsFactory.verifyNfdomains(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `withdraw_node_runner_fees(uint64)void` ABI method.
     *
    * fee admin/node runner method. withdraw node runner fees. hard coded to send to node runner address.
    the fee admin may call this to pay out the current node runner before changing node runner address

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdrawNodeRunnerFees: (params: CallParams<DualStakeContractArgs['obj']['withdraw_node_runner_fees(uint64)void'] | DualStakeContractArgs['tuple']['withdraw_node_runner_fees(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DualStakeContractParamsFactory.withdrawNodeRunnerFees(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `withdraw_platform_fees(uint64)void` ABI method.
     *
     * fee admin method. withdraw platform fees
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdrawPlatformFees: (params: CallParams<DualStakeContractArgs['obj']['withdraw_platform_fees(uint64)void'] | DualStakeContractArgs['tuple']['withdraw_platform_fees(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DualStakeContractParamsFactory.withdrawPlatformFees(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `keyreg_online(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void` ABI method.
     *
    * Fee admin or node runner only. Send keyreg online.
    Required payment if fee is not zero. Fee must be 2A if escrow is not account eligible, otherwise zero (paid by outer) Fee amount is validated against Global eligibility fee parameter

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    keyregOnline: (params: CallParams<DualStakeContractArgs['obj']['keyreg_online(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void'] | DualStakeContractArgs['tuple']['keyreg_online(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DualStakeContractParamsFactory.keyregOnline(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `keyreg_offline()void` ABI method.
     *
     * Fee admin or noderunner only. Send keyreg offline for an escrow account
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    keyregOffline: (params: CallParams<DualStakeContractArgs['obj']['keyreg_offline()void'] | DualStakeContractArgs['tuple']['keyreg_offline()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(DualStakeContractParamsFactory.keyregOffline(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `protest_stake()void` ABI method.
     *
    * public method. locks dualSTAKE LST stake on the contract as "upgrade protest".
    This blocks upgrading unless it is dissolved (redeemed & returned to user) The upgrade can also be cancelled, whereafter the dualSTAKE tokens can be returned to the user unchanged

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    protestStake: (params: CallParams<DualStakeContractArgs['obj']['protest_stake()void'] | DualStakeContractArgs['tuple']['protest_stake()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(DualStakeContractParamsFactory.protestStake(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `unprotest_stake()void` ABI method.
     *
     * public method. revoke protesting stake for self. Returns dualSTAKE tokens to user who protested with them.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    unprotestStake: (params: CallParams<DualStakeContractArgs['obj']['unprotest_stake()void'] | DualStakeContractArgs['tuple']['unprotest_stake()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(DualStakeContractParamsFactory.unprotestStake(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `admin_unprotest_stake(address)void` ABI method.
     *
     * fee admin method. callable when there is no upgrade scheduled. returns the protesting dualSTAKE tokens to user $user. If the user has opted out of the dualSTAKE asset, this fails and the user can undo the protest stake themselves.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    adminUnprotestStake: (params: CallParams<DualStakeContractArgs['obj']['admin_unprotest_stake(address)void'] | DualStakeContractArgs['tuple']['admin_unprotest_stake(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DualStakeContractParamsFactory.adminUnprotestStake(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `dissolve_protesting_stake(address)void` ABI method.
     *
    * fee admin method. called before upgrading to dissolve protesting stake for user $user. Redeems & returns ALGO and ASA to user.
    If the user has opted out of the ASA: 1) ARC59 asset inbox is used to send the ASA and 2) the transaction and MBR fees for asset inbox are subtractd from the ALGO amount.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    dissolveProtestingStake: (params: CallParams<DualStakeContractArgs['obj']['dissolve_protesting_stake(address)void'] | DualStakeContractArgs['tuple']['dissolve_protesting_stake(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DualStakeContractParamsFactory.dissolveProtestingStake(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `queue_upgrade(byte[])void` ABI method.
     *
    * admin method only.
    stage a contract upgrade. time applicability 2 weeks from current timestamp. hashes are variable length, 32b each, corresponding to SHA512_256 of approval program pages

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    queueUpgrade: (params: CallParams<DualStakeContractArgs['obj']['queue_upgrade(byte[])void'] | DualStakeContractArgs['tuple']['queue_upgrade(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DualStakeContractParamsFactory.queueUpgrade(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `reset_upgrade()void` ABI method.
     *
    * admin or fee admin only.
    clear a staged contract upgrade

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    resetUpgrade: (params: CallParams<DualStakeContractArgs['obj']['reset_upgrade()void'] | DualStakeContractArgs['tuple']['reset_upgrade()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(DualStakeContractParamsFactory.resetUpgrade(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `mint()void` ABI method.
     *
    * Public method. Mint dualSTAKE lst
    NEXT transaction in group must be payment in ALGO if rate != 0, 2 txns after must be payment in ASA will swap and apply fee updates if needed sends dualSTAKE tokens to caller

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    mint: (params: CallParams<DualStakeContractArgs['obj']['mint()void'] | DualStakeContractArgs['tuple']['mint()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(DualStakeContractParamsFactory.mint(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `redeem()void` ABI method.
     *
    * Public method. Redeem dualSTAKE tokens back to ALGO+ASA.
    dualSTAKE:ALGO is always 1:1 dualSTAKE:ASA is (ASA balance):(global staked) will swap and apply fee updates if needed

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    redeem: (params: CallParams<DualStakeContractArgs['obj']['redeem()void'] | DualStakeContractArgs['tuple']['redeem()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(DualStakeContractParamsFactory.redeem(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `get_rate()uint64` ABI method.
     *
    * Public method. Returns the current rate as ABI uint64:
    1e8 * (ASA Balance) / (global staked) Returns zero if staked == 0 will swap and apply fee updates if needed

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getRate: (params: CallParams<DualStakeContractArgs['obj']['get_rate()uint64'] | DualStakeContractArgs['tuple']['get_rate()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(DualStakeContractParamsFactory.getRate(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `get_contract_listing(address)(uint64,uint64,uint64,uint64,uint64,string,uint64,string,string,uint16,bool,bool,bool,bool,uint64)` ABI method.
     *
    * Public method. Returns ABI struct ContractListing:
    rate (see get_rate)     escrow algo balance     escrow asa balance     staked balance     dualstake token ID     dualstake asset name     asa asset ID     asa asset name     asa unit name     asa decimals     need_swap     incentive_eligible     is_online     user_protesting_stake will swap and apply fee updates if needed

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getContractListing: (params: CallParams<DualStakeContractArgs['obj']['get_contract_listing(address)(uint64,uint64,uint64,uint64,uint64,string,uint64,string,string,uint16,bool,bool,bool,bool,uint64)'] | DualStakeContractArgs['tuple']['get_contract_listing(address)(uint64,uint64,uint64,uint64,uint64,string,uint64,string,string,uint16,bool,bool,bool,bool,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DualStakeContractParamsFactory.getContractListing(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `get_rate_and_balances()(uint64,uint64,uint64)` ABI method.
     *
    * Public method. Returns ABI tuple[3]:
    rate (see get_rate)     escrow algo balance     escrow asa balance will swap and apply fee updates if needed

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getRateAndBalances: (params: CallParams<DualStakeContractArgs['obj']['get_rate_and_balances()(uint64,uint64,uint64)'] | DualStakeContractArgs['tuple']['get_rate_and_balances()(uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(DualStakeContractParamsFactory.getRateAndBalances(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `get_need_swap()bool` ABI method.
     *
     * Public method. Returns whether the contract thinks it needs to swap
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getNeedSwap: (params: CallParams<DualStakeContractArgs['obj']['get_need_swap()bool'] | DualStakeContractArgs['tuple']['get_need_swap()bool']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(DualStakeContractParamsFactory.getNeedSwap(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `swap_or_fail()void` ABI method.
     *
     * Public method. Perform swap or fail
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    swapOrFail: (params: CallParams<DualStakeContractArgs['obj']['swap_or_fail()void'] | DualStakeContractArgs['tuple']['swap_or_fail()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(DualStakeContractParamsFactory.swapOrFail(params))
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `nullun()void` ABI method.
     *
     * Public empty method for opcode budget increase
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    nullun: (params: CallParams<DualStakeContractArgs['obj']['nullun()void'] | DualStakeContractArgs['tuple']['nullun()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(DualStakeContractParamsFactory.nullun(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the dualSTAKE Contract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `queue_update_fees(uint64,uint64)uint64` ABI method.
     *
    * Fee admin method. Changes enforced to +/- 2.5% delta max
    If increasing fees, schedules an update of the node+platform fees in bps. Decreasing fees are applied immediately. Return timestamp of applicability as uint64

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    queueUpdateFees: async (params: CallParams<DualStakeContractArgs['obj']['queue_update_fees(uint64,uint64)uint64'] | DualStakeContractArgs['tuple']['queue_update_fees(uint64,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DualStakeContractParamsFactory.queueUpdateFees(params))
      return {...result, return: result.return as unknown as (undefined | DualStakeContractReturns['queue_update_fees(uint64,uint64)uint64'])}
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `reset_update_fees()void` ABI method.
     *
     * Fee admin method. Cancel a scheudled params update
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    resetUpdateFees: async (params: CallParams<DualStakeContractArgs['obj']['reset_update_fees()void'] | DualStakeContractArgs['tuple']['reset_update_fees()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(DualStakeContractParamsFactory.resetUpdateFees(params))
      return {...result, return: result.return as unknown as (undefined | DualStakeContractReturns['reset_update_fees()void'])}
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `configure(uint64,byte[],byte[],uint64,uint64,address,address,address,bool,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void` ABI method.
     *
     * Admin or fee admin method. Bootstrap; configure global storage except LST ID.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    configure: async (params: CallParams<DualStakeContractArgs['obj']['configure(uint64,byte[],byte[],uint64,uint64,address,address,address,bool,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'] | DualStakeContractArgs['tuple']['configure(uint64,byte[],byte[],uint64,uint64,address,address,address,bool,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DualStakeContractParamsFactory.configure(params))
      return {...result, return: result.return as unknown as (undefined | DualStakeContractReturns['configure(uint64,byte[],byte[],uint64,uint64,address,address,address,bool,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `configure2(byte[],byte[],byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    configure2: async (params: CallParams<DualStakeContractArgs['obj']['configure2(byte[],byte[],byte[])void'] | DualStakeContractArgs['tuple']['configure2(byte[],byte[],byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DualStakeContractParamsFactory.configure2(params))
      return {...result, return: result.return as unknown as (undefined | DualStakeContractReturns['configure2(byte[],byte[],byte[])void'])}
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `change_admin_1(address)void` ABI method.
     *
     * admin method. first of 2-step admin change process.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    changeAdmin_1: async (params: CallParams<DualStakeContractArgs['obj']['change_admin_1(address)void'] | DualStakeContractArgs['tuple']['change_admin_1(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DualStakeContractParamsFactory.changeAdmin_1(params))
      return {...result, return: result.return as unknown as (undefined | DualStakeContractReturns['change_admin_1(address)void'])}
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `change_admin_2()void` ABI method.
     *
     * public method. second of 2-step admin change process. called by new admin in atomic group after change_admin_1
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    changeAdmin_2: async (params: CallParams<DualStakeContractArgs['obj']['change_admin_2()void'] | DualStakeContractArgs['tuple']['change_admin_2()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(DualStakeContractParamsFactory.changeAdmin_2(params))
      return {...result, return: result.return as unknown as (undefined | DualStakeContractReturns['change_admin_2()void'])}
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `change_noderunner(address)void` ABI method.
     *
    * fee admin/node runner method. change node runner address.
    node runner fees must be withdrawn before this, otherwise fee admin could steal node runner fees.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    changeNoderunner: async (params: CallParams<DualStakeContractArgs['obj']['change_noderunner(address)void'] | DualStakeContractArgs['tuple']['change_noderunner(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DualStakeContractParamsFactory.changeNoderunner(params))
      return {...result, return: result.return as unknown as (undefined | DualStakeContractReturns['change_noderunner(address)void'])}
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `change_feeaddr(address)void` ABI method.
     *
     * admin/fee admin method. change fee admin address
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    changeFeeaddr: async (params: CallParams<DualStakeContractArgs['obj']['change_feeaddr(address)void'] | DualStakeContractArgs['tuple']['change_feeaddr(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DualStakeContractParamsFactory.changeFeeaddr(params))
      return {...result, return: result.return as unknown as (undefined | DualStakeContractReturns['change_feeaddr(address)void'])}
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `update_max_balance(uint64)void` ABI method.
     *
     * Fee admin method. Updates max algo stake
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateMaxBalance: async (params: CallParams<DualStakeContractArgs['obj']['update_max_balance(uint64)void'] | DualStakeContractArgs['tuple']['update_max_balance(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DualStakeContractParamsFactory.updateMaxBalance(params))
      return {...result, return: result.return as unknown as (undefined | DualStakeContractReturns['update_max_balance(uint64)void'])}
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `verify_nfdomains(uint64,uint64,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    verifyNfdomains: async (params: CallParams<DualStakeContractArgs['obj']['verify_nfdomains(uint64,uint64,byte[])void'] | DualStakeContractArgs['tuple']['verify_nfdomains(uint64,uint64,byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DualStakeContractParamsFactory.verifyNfdomains(params))
      return {...result, return: result.return as unknown as (undefined | DualStakeContractReturns['verify_nfdomains(uint64,uint64,byte[])void'])}
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `withdraw_node_runner_fees(uint64)void` ABI method.
     *
    * fee admin/node runner method. withdraw node runner fees. hard coded to send to node runner address.
    the fee admin may call this to pay out the current node runner before changing node runner address

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdrawNodeRunnerFees: async (params: CallParams<DualStakeContractArgs['obj']['withdraw_node_runner_fees(uint64)void'] | DualStakeContractArgs['tuple']['withdraw_node_runner_fees(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DualStakeContractParamsFactory.withdrawNodeRunnerFees(params))
      return {...result, return: result.return as unknown as (undefined | DualStakeContractReturns['withdraw_node_runner_fees(uint64)void'])}
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `withdraw_platform_fees(uint64)void` ABI method.
     *
     * fee admin method. withdraw platform fees
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdrawPlatformFees: async (params: CallParams<DualStakeContractArgs['obj']['withdraw_platform_fees(uint64)void'] | DualStakeContractArgs['tuple']['withdraw_platform_fees(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DualStakeContractParamsFactory.withdrawPlatformFees(params))
      return {...result, return: result.return as unknown as (undefined | DualStakeContractReturns['withdraw_platform_fees(uint64)void'])}
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `keyreg_online(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void` ABI method.
     *
    * Fee admin or node runner only. Send keyreg online.
    Required payment if fee is not zero. Fee must be 2A if escrow is not account eligible, otherwise zero (paid by outer) Fee amount is validated against Global eligibility fee parameter

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    keyregOnline: async (params: CallParams<DualStakeContractArgs['obj']['keyreg_online(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void'] | DualStakeContractArgs['tuple']['keyreg_online(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DualStakeContractParamsFactory.keyregOnline(params))
      return {...result, return: result.return as unknown as (undefined | DualStakeContractReturns['keyreg_online(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `keyreg_offline()void` ABI method.
     *
     * Fee admin or noderunner only. Send keyreg offline for an escrow account
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    keyregOffline: async (params: CallParams<DualStakeContractArgs['obj']['keyreg_offline()void'] | DualStakeContractArgs['tuple']['keyreg_offline()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(DualStakeContractParamsFactory.keyregOffline(params))
      return {...result, return: result.return as unknown as (undefined | DualStakeContractReturns['keyreg_offline()void'])}
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `protest_stake()void` ABI method.
     *
    * public method. locks dualSTAKE LST stake on the contract as "upgrade protest".
    This blocks upgrading unless it is dissolved (redeemed & returned to user) The upgrade can also be cancelled, whereafter the dualSTAKE tokens can be returned to the user unchanged

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    protestStake: async (params: CallParams<DualStakeContractArgs['obj']['protest_stake()void'] | DualStakeContractArgs['tuple']['protest_stake()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(DualStakeContractParamsFactory.protestStake(params))
      return {...result, return: result.return as unknown as (undefined | DualStakeContractReturns['protest_stake()void'])}
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `unprotest_stake()void` ABI method.
     *
     * public method. revoke protesting stake for self. Returns dualSTAKE tokens to user who protested with them.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    unprotestStake: async (params: CallParams<DualStakeContractArgs['obj']['unprotest_stake()void'] | DualStakeContractArgs['tuple']['unprotest_stake()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(DualStakeContractParamsFactory.unprotestStake(params))
      return {...result, return: result.return as unknown as (undefined | DualStakeContractReturns['unprotest_stake()void'])}
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `admin_unprotest_stake(address)void` ABI method.
     *
     * fee admin method. callable when there is no upgrade scheduled. returns the protesting dualSTAKE tokens to user $user. If the user has opted out of the dualSTAKE asset, this fails and the user can undo the protest stake themselves.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    adminUnprotestStake: async (params: CallParams<DualStakeContractArgs['obj']['admin_unprotest_stake(address)void'] | DualStakeContractArgs['tuple']['admin_unprotest_stake(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DualStakeContractParamsFactory.adminUnprotestStake(params))
      return {...result, return: result.return as unknown as (undefined | DualStakeContractReturns['admin_unprotest_stake(address)void'])}
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `dissolve_protesting_stake(address)void` ABI method.
     *
    * fee admin method. called before upgrading to dissolve protesting stake for user $user. Redeems & returns ALGO and ASA to user.
    If the user has opted out of the ASA: 1) ARC59 asset inbox is used to send the ASA and 2) the transaction and MBR fees for asset inbox are subtractd from the ALGO amount.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    dissolveProtestingStake: async (params: CallParams<DualStakeContractArgs['obj']['dissolve_protesting_stake(address)void'] | DualStakeContractArgs['tuple']['dissolve_protesting_stake(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DualStakeContractParamsFactory.dissolveProtestingStake(params))
      return {...result, return: result.return as unknown as (undefined | DualStakeContractReturns['dissolve_protesting_stake(address)void'])}
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `queue_upgrade(byte[])void` ABI method.
     *
    * admin method only.
    stage a contract upgrade. time applicability 2 weeks from current timestamp. hashes are variable length, 32b each, corresponding to SHA512_256 of approval program pages

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    queueUpgrade: async (params: CallParams<DualStakeContractArgs['obj']['queue_upgrade(byte[])void'] | DualStakeContractArgs['tuple']['queue_upgrade(byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DualStakeContractParamsFactory.queueUpgrade(params))
      return {...result, return: result.return as unknown as (undefined | DualStakeContractReturns['queue_upgrade(byte[])void'])}
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `reset_upgrade()void` ABI method.
     *
    * admin or fee admin only.
    clear a staged contract upgrade

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    resetUpgrade: async (params: CallParams<DualStakeContractArgs['obj']['reset_upgrade()void'] | DualStakeContractArgs['tuple']['reset_upgrade()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(DualStakeContractParamsFactory.resetUpgrade(params))
      return {...result, return: result.return as unknown as (undefined | DualStakeContractReturns['reset_upgrade()void'])}
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `mint()void` ABI method.
     *
    * Public method. Mint dualSTAKE lst
    NEXT transaction in group must be payment in ALGO if rate != 0, 2 txns after must be payment in ASA will swap and apply fee updates if needed sends dualSTAKE tokens to caller

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    mint: async (params: CallParams<DualStakeContractArgs['obj']['mint()void'] | DualStakeContractArgs['tuple']['mint()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(DualStakeContractParamsFactory.mint(params))
      return {...result, return: result.return as unknown as (undefined | DualStakeContractReturns['mint()void'])}
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `redeem()void` ABI method.
     *
    * Public method. Redeem dualSTAKE tokens back to ALGO+ASA.
    dualSTAKE:ALGO is always 1:1 dualSTAKE:ASA is (ASA balance):(global staked) will swap and apply fee updates if needed

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    redeem: async (params: CallParams<DualStakeContractArgs['obj']['redeem()void'] | DualStakeContractArgs['tuple']['redeem()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(DualStakeContractParamsFactory.redeem(params))
      return {...result, return: result.return as unknown as (undefined | DualStakeContractReturns['redeem()void'])}
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `get_rate()uint64` ABI method.
     *
    * Public method. Returns the current rate as ABI uint64:
    1e8 * (ASA Balance) / (global staked) Returns zero if staked == 0 will swap and apply fee updates if needed

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getRate: async (params: CallParams<DualStakeContractArgs['obj']['get_rate()uint64'] | DualStakeContractArgs['tuple']['get_rate()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(DualStakeContractParamsFactory.getRate(params))
      return {...result, return: result.return as unknown as (undefined | DualStakeContractReturns['get_rate()uint64'])}
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `get_contract_listing(address)(uint64,uint64,uint64,uint64,uint64,string,uint64,string,string,uint16,bool,bool,bool,bool,uint64)` ABI method.
     *
    * Public method. Returns ABI struct ContractListing:
    rate (see get_rate)     escrow algo balance     escrow asa balance     staked balance     dualstake token ID     dualstake asset name     asa asset ID     asa asset name     asa unit name     asa decimals     need_swap     incentive_eligible     is_online     user_protesting_stake will swap and apply fee updates if needed

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getContractListing: async (params: CallParams<DualStakeContractArgs['obj']['get_contract_listing(address)(uint64,uint64,uint64,uint64,uint64,string,uint64,string,string,uint16,bool,bool,bool,bool,uint64)'] | DualStakeContractArgs['tuple']['get_contract_listing(address)(uint64,uint64,uint64,uint64,uint64,string,uint64,string,string,uint16,bool,bool,bool,bool,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DualStakeContractParamsFactory.getContractListing(params))
      return {...result, return: result.return as unknown as (undefined | DualStakeContractReturns['get_contract_listing(address)(uint64,uint64,uint64,uint64,uint64,string,uint64,string,string,uint16,bool,bool,bool,bool,uint64)'])}
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `get_rate_and_balances()(uint64,uint64,uint64)` ABI method.
     *
    * Public method. Returns ABI tuple[3]:
    rate (see get_rate)     escrow algo balance     escrow asa balance will swap and apply fee updates if needed

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getRateAndBalances: async (params: CallParams<DualStakeContractArgs['obj']['get_rate_and_balances()(uint64,uint64,uint64)'] | DualStakeContractArgs['tuple']['get_rate_and_balances()(uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(DualStakeContractParamsFactory.getRateAndBalances(params))
      return {...result, return: result.return as unknown as (undefined | DualStakeContractReturns['get_rate_and_balances()(uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `get_need_swap()bool` ABI method.
     *
     * Public method. Returns whether the contract thinks it needs to swap
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getNeedSwap: async (params: CallParams<DualStakeContractArgs['obj']['get_need_swap()bool'] | DualStakeContractArgs['tuple']['get_need_swap()bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(DualStakeContractParamsFactory.getNeedSwap(params))
      return {...result, return: result.return as unknown as (undefined | DualStakeContractReturns['get_need_swap()bool'])}
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `swap_or_fail()void` ABI method.
     *
     * Public method. Perform swap or fail
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    swapOrFail: async (params: CallParams<DualStakeContractArgs['obj']['swap_or_fail()void'] | DualStakeContractArgs['tuple']['swap_or_fail()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(DualStakeContractParamsFactory.swapOrFail(params))
      return {...result, return: result.return as unknown as (undefined | DualStakeContractReturns['swap_or_fail()void'])}
    },

    /**
     * Makes a call to the dualSTAKE Contract smart contract using the `nullun()void` ABI method.
     *
     * Public empty method for opcode budget increase
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    nullun: async (params: CallParams<DualStakeContractArgs['obj']['nullun()void'] | DualStakeContractArgs['tuple']['nullun()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(DualStakeContractParamsFactory.nullun(params))
      return {...result, return: result.return as unknown as (undefined | DualStakeContractReturns['nullun()void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new DualStakeContractClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current dualSTAKE Contract app
   */
  state = {
    /**
     * Methods to access global state for the current dualSTAKE Contract app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          version: result.version,
          asaId: result.asa_id,
          lstId: result.lst_id,
          staked: result.staked,
          platformFees: result.platform_fees,
          noderunnerFees: result.noderunner_fees,
          platformFeeBps: result.platform_fee_bps,
          noderunnerFeeBps: result.noderunner_fee_bps,
          adminAddr: new BinaryStateValue(result.admin_addr),
          feeAdminAddr: new BinaryStateValue(result.fee_admin_addr),
          noderunnerAddr: new BinaryStateValue(result.noderunner_addr),
          lpType: new BinaryStateValue(result.lp_type),
          lpId: new BinaryStateValue(result.lp_id),
          delayOptin: result.delay_optin,
          feeUpdate: new BinaryStateValue(result.fee_update),
          contractUpgrade: new BinaryStateValue(result.contract_upgrade),
          protestCount: result.protest_count,
          protestSum: result.protest_sum,
          upgradePeriod: result.upgrade_period,
          feeUpdatePeriod: result.fee_update_period,
          feeUpdateMaxDelta: result.fee_update_max_delta,
          maxBalance: result.max_balance,
          ratePrecision: result.rate_precision,
          tm2AppId: result.tm2_app_id,
          arc59AppId: result.arc59_app_id,
        }
      },
      /**
       * Get the current value of the version key in global state
       */
      version: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("version")) as bigint | undefined },
      /**
       * Get the current value of the asa_id key in global state
       */
      asaId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("asa_id")) as bigint | undefined },
      /**
       * Get the current value of the lst_id key in global state
       */
      lstId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("lst_id")) as bigint | undefined },
      /**
       * Get the current value of the staked key in global state
       */
      staked: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("staked")) as bigint | undefined },
      /**
       * Get the current value of the platform_fees key in global state
       */
      platformFees: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("platform_fees")) as bigint | undefined },
      /**
       * Get the current value of the noderunner_fees key in global state
       */
      noderunnerFees: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("noderunner_fees")) as bigint | undefined },
      /**
       * Get the current value of the platform_fee_bps key in global state
       */
      platformFeeBps: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("platform_fee_bps")) as bigint | undefined },
      /**
       * Get the current value of the noderunner_fee_bps key in global state
       */
      noderunnerFeeBps: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("noderunner_fee_bps")) as bigint | undefined },
      /**
       * Get the current value of the admin_addr key in global state
       */
      adminAddr: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("admin_addr")) as Uint8Array | undefined) },
      /**
       * Get the current value of the fee_admin_addr key in global state
       */
      feeAdminAddr: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("fee_admin_addr")) as Uint8Array | undefined) },
      /**
       * Get the current value of the noderunner_addr key in global state
       */
      noderunnerAddr: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("noderunner_addr")) as Uint8Array | undefined) },
      /**
       * Get the current value of the lp_type key in global state
       */
      lpType: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("lp_type")) as Uint8Array | undefined) },
      /**
       * Get the current value of the lp_id key in global state
       */
      lpId: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("lp_id")) as Uint8Array | undefined) },
      /**
       * Get the current value of the delay_optin key in global state
       */
      delayOptin: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("delay_optin")) as bigint | undefined },
      /**
       * Get the current value of the fee_update key in global state
       */
      feeUpdate: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("fee_update")) as Uint8Array | undefined) },
      /**
       * Get the current value of the contract_upgrade key in global state
       */
      contractUpgrade: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("contract_upgrade")) as Uint8Array | undefined) },
      /**
       * Get the current value of the protest_count key in global state
       */
      protestCount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("protest_count")) as bigint | undefined },
      /**
       * Get the current value of the protest_sum key in global state
       */
      protestSum: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("protest_sum")) as bigint | undefined },
      /**
       * Get the current value of the upgrade_period key in global state
       */
      upgradePeriod: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("upgrade_period")) as bigint | undefined },
      /**
       * Get the current value of the fee_update_period key in global state
       */
      feeUpdatePeriod: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("fee_update_period")) as bigint | undefined },
      /**
       * Get the current value of the fee_update_max_delta key in global state
       */
      feeUpdateMaxDelta: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("fee_update_max_delta")) as bigint | undefined },
      /**
       * Get the current value of the max_balance key in global state
       */
      maxBalance: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("max_balance")) as bigint | undefined },
      /**
       * Get the current value of the rate_precision key in global state
       */
      ratePrecision: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("rate_precision")) as bigint | undefined },
      /**
       * Get the current value of the tm2_app_id key in global state
       */
      tm2AppId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("tm2_app_id")) as bigint | undefined },
      /**
       * Get the current value of the arc59_app_id key in global state
       */
      arc59AppId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("arc59_app_id")) as bigint | undefined },
    },
  }

  public newGroup(): DualStakeContractComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a queue_update_fees(uint64,uint64)uint64 method call against the dualSTAKE Contract contract
       */
      queueUpdateFees(params: CallParams<DualStakeContractArgs['obj']['queue_update_fees(uint64,uint64)uint64'] | DualStakeContractArgs['tuple']['queue_update_fees(uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.queueUpdateFees(params)))
        resultMappers.push((v) => client.decodeReturnValue('queue_update_fees(uint64,uint64)uint64', v))
        return this
      },
      /**
       * Add a reset_update_fees()void method call against the dualSTAKE Contract contract
       */
      resetUpdateFees(params: CallParams<DualStakeContractArgs['obj']['reset_update_fees()void'] | DualStakeContractArgs['tuple']['reset_update_fees()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.resetUpdateFees(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a configure(uint64,byte[],byte[],uint64,uint64,address,address,address,bool,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void method call against the dualSTAKE Contract contract
       */
      configure(params: CallParams<DualStakeContractArgs['obj']['configure(uint64,byte[],byte[],uint64,uint64,address,address,address,bool,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'] | DualStakeContractArgs['tuple']['configure(uint64,byte[],byte[],uint64,uint64,address,address,address,bool,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.configure(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a configure2(byte[],byte[],byte[])void method call against the dualSTAKE Contract contract
       */
      configure2(params: CallParams<DualStakeContractArgs['obj']['configure2(byte[],byte[],byte[])void'] | DualStakeContractArgs['tuple']['configure2(byte[],byte[],byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.configure2(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a change_admin_1(address)void method call against the dualSTAKE Contract contract
       */
      changeAdmin_1(params: CallParams<DualStakeContractArgs['obj']['change_admin_1(address)void'] | DualStakeContractArgs['tuple']['change_admin_1(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.changeAdmin_1(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a change_admin_2()void method call against the dualSTAKE Contract contract
       */
      changeAdmin_2(params: CallParams<DualStakeContractArgs['obj']['change_admin_2()void'] | DualStakeContractArgs['tuple']['change_admin_2()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.changeAdmin_2(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a change_noderunner(address)void method call against the dualSTAKE Contract contract
       */
      changeNoderunner(params: CallParams<DualStakeContractArgs['obj']['change_noderunner(address)void'] | DualStakeContractArgs['tuple']['change_noderunner(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.changeNoderunner(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a change_feeaddr(address)void method call against the dualSTAKE Contract contract
       */
      changeFeeaddr(params: CallParams<DualStakeContractArgs['obj']['change_feeaddr(address)void'] | DualStakeContractArgs['tuple']['change_feeaddr(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.changeFeeaddr(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a update_max_balance(uint64)void method call against the dualSTAKE Contract contract
       */
      updateMaxBalance(params: CallParams<DualStakeContractArgs['obj']['update_max_balance(uint64)void'] | DualStakeContractArgs['tuple']['update_max_balance(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateMaxBalance(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a verify_nfdomains(uint64,uint64,byte[])void method call against the dualSTAKE Contract contract
       */
      verifyNfdomains(params: CallParams<DualStakeContractArgs['obj']['verify_nfdomains(uint64,uint64,byte[])void'] | DualStakeContractArgs['tuple']['verify_nfdomains(uint64,uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.verifyNfdomains(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a withdraw_node_runner_fees(uint64)void method call against the dualSTAKE Contract contract
       */
      withdrawNodeRunnerFees(params: CallParams<DualStakeContractArgs['obj']['withdraw_node_runner_fees(uint64)void'] | DualStakeContractArgs['tuple']['withdraw_node_runner_fees(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withdrawNodeRunnerFees(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a withdraw_platform_fees(uint64)void method call against the dualSTAKE Contract contract
       */
      withdrawPlatformFees(params: CallParams<DualStakeContractArgs['obj']['withdraw_platform_fees(uint64)void'] | DualStakeContractArgs['tuple']['withdraw_platform_fees(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withdrawPlatformFees(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a keyreg_online(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void method call against the dualSTAKE Contract contract
       */
      keyregOnline(params: CallParams<DualStakeContractArgs['obj']['keyreg_online(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void'] | DualStakeContractArgs['tuple']['keyreg_online(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.keyregOnline(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a keyreg_offline()void method call against the dualSTAKE Contract contract
       */
      keyregOffline(params: CallParams<DualStakeContractArgs['obj']['keyreg_offline()void'] | DualStakeContractArgs['tuple']['keyreg_offline()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.keyregOffline(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a protest_stake()void method call against the dualSTAKE Contract contract
       */
      protestStake(params: CallParams<DualStakeContractArgs['obj']['protest_stake()void'] | DualStakeContractArgs['tuple']['protest_stake()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.protestStake(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a unprotest_stake()void method call against the dualSTAKE Contract contract
       */
      unprotestStake(params: CallParams<DualStakeContractArgs['obj']['unprotest_stake()void'] | DualStakeContractArgs['tuple']['unprotest_stake()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.unprotestStake(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a admin_unprotest_stake(address)void method call against the dualSTAKE Contract contract
       */
      adminUnprotestStake(params: CallParams<DualStakeContractArgs['obj']['admin_unprotest_stake(address)void'] | DualStakeContractArgs['tuple']['admin_unprotest_stake(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.adminUnprotestStake(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a dissolve_protesting_stake(address)void method call against the dualSTAKE Contract contract
       */
      dissolveProtestingStake(params: CallParams<DualStakeContractArgs['obj']['dissolve_protesting_stake(address)void'] | DualStakeContractArgs['tuple']['dissolve_protesting_stake(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.dissolveProtestingStake(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a queue_upgrade(byte[])void method call against the dualSTAKE Contract contract
       */
      queueUpgrade(params: CallParams<DualStakeContractArgs['obj']['queue_upgrade(byte[])void'] | DualStakeContractArgs['tuple']['queue_upgrade(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.queueUpgrade(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a reset_upgrade()void method call against the dualSTAKE Contract contract
       */
      resetUpgrade(params: CallParams<DualStakeContractArgs['obj']['reset_upgrade()void'] | DualStakeContractArgs['tuple']['reset_upgrade()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.resetUpgrade(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a mint()void method call against the dualSTAKE Contract contract
       */
      mint(params: CallParams<DualStakeContractArgs['obj']['mint()void'] | DualStakeContractArgs['tuple']['mint()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.mint(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a redeem()void method call against the dualSTAKE Contract contract
       */
      redeem(params: CallParams<DualStakeContractArgs['obj']['redeem()void'] | DualStakeContractArgs['tuple']['redeem()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.redeem(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a get_rate()uint64 method call against the dualSTAKE Contract contract
       */
      getRate(params: CallParams<DualStakeContractArgs['obj']['get_rate()uint64'] | DualStakeContractArgs['tuple']['get_rate()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getRate(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_rate()uint64', v))
        return this
      },
      /**
       * Add a get_contract_listing(address)(uint64,uint64,uint64,uint64,uint64,string,uint64,string,string,uint16,bool,bool,bool,bool,uint64) method call against the dualSTAKE Contract contract
       */
      getContractListing(params: CallParams<DualStakeContractArgs['obj']['get_contract_listing(address)(uint64,uint64,uint64,uint64,uint64,string,uint64,string,string,uint16,bool,bool,bool,bool,uint64)'] | DualStakeContractArgs['tuple']['get_contract_listing(address)(uint64,uint64,uint64,uint64,uint64,string,uint64,string,string,uint16,bool,bool,bool,bool,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getContractListing(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_contract_listing(address)(uint64,uint64,uint64,uint64,uint64,string,uint64,string,string,uint16,bool,bool,bool,bool,uint64)', v))
        return this
      },
      /**
       * Add a get_rate_and_balances()(uint64,uint64,uint64) method call against the dualSTAKE Contract contract
       */
      getRateAndBalances(params: CallParams<DualStakeContractArgs['obj']['get_rate_and_balances()(uint64,uint64,uint64)'] | DualStakeContractArgs['tuple']['get_rate_and_balances()(uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getRateAndBalances(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_rate_and_balances()(uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a get_need_swap()bool method call against the dualSTAKE Contract contract
       */
      getNeedSwap(params: CallParams<DualStakeContractArgs['obj']['get_need_swap()bool'] | DualStakeContractArgs['tuple']['get_need_swap()bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getNeedSwap(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_need_swap()bool', v))
        return this
      },
      /**
       * Add a swap_or_fail()void method call against the dualSTAKE Contract contract
       */
      swapOrFail(params: CallParams<DualStakeContractArgs['obj']['swap_or_fail()void'] | DualStakeContractArgs['tuple']['swap_or_fail()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.swapOrFail(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a nullun()void method call against the dualSTAKE Contract contract
       */
      nullun(params: CallParams<DualStakeContractArgs['obj']['nullun()void'] | DualStakeContractArgs['tuple']['nullun()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.nullun(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the dualSTAKE Contract contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as DualStakeContractComposer
  }
}
export type DualStakeContractComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the queue_update_fees(uint64,uint64)uint64 ABI method.
   *
  * Fee admin method. Changes enforced to +/- 2.5% delta max
  If increasing fees, schedules an update of the node+platform fees in bps. Decreasing fees are applied immediately. Return timestamp of applicability as uint64

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  queueUpdateFees(params?: CallParams<DualStakeContractArgs['obj']['queue_update_fees(uint64,uint64)uint64'] | DualStakeContractArgs['tuple']['queue_update_fees(uint64,uint64)uint64']>): DualStakeContractComposer<[...TReturns, DualStakeContractReturns['queue_update_fees(uint64,uint64)uint64'] | undefined]>

  /**
   * Calls the reset_update_fees()void ABI method.
   *
   * Fee admin method. Cancel a scheudled params update
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  resetUpdateFees(params?: CallParams<DualStakeContractArgs['obj']['reset_update_fees()void'] | DualStakeContractArgs['tuple']['reset_update_fees()void']>): DualStakeContractComposer<[...TReturns, DualStakeContractReturns['reset_update_fees()void'] | undefined]>

  /**
   * Calls the configure(uint64,byte[],byte[],uint64,uint64,address,address,address,bool,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void ABI method.
   *
   * Admin or fee admin method. Bootstrap; configure global storage except LST ID.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  configure(params?: CallParams<DualStakeContractArgs['obj']['configure(uint64,byte[],byte[],uint64,uint64,address,address,address,bool,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'] | DualStakeContractArgs['tuple']['configure(uint64,byte[],byte[],uint64,uint64,address,address,address,bool,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void']>): DualStakeContractComposer<[...TReturns, DualStakeContractReturns['configure(uint64,byte[],byte[],uint64,uint64,address,address,address,bool,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'] | undefined]>

  /**
   * Calls the configure2(byte[],byte[],byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  configure2(params?: CallParams<DualStakeContractArgs['obj']['configure2(byte[],byte[],byte[])void'] | DualStakeContractArgs['tuple']['configure2(byte[],byte[],byte[])void']>): DualStakeContractComposer<[...TReturns, DualStakeContractReturns['configure2(byte[],byte[],byte[])void'] | undefined]>

  /**
   * Calls the change_admin_1(address)void ABI method.
   *
   * admin method. first of 2-step admin change process.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  changeAdmin_1(params?: CallParams<DualStakeContractArgs['obj']['change_admin_1(address)void'] | DualStakeContractArgs['tuple']['change_admin_1(address)void']>): DualStakeContractComposer<[...TReturns, DualStakeContractReturns['change_admin_1(address)void'] | undefined]>

  /**
   * Calls the change_admin_2()void ABI method.
   *
   * public method. second of 2-step admin change process. called by new admin in atomic group after change_admin_1
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  changeAdmin_2(params?: CallParams<DualStakeContractArgs['obj']['change_admin_2()void'] | DualStakeContractArgs['tuple']['change_admin_2()void']>): DualStakeContractComposer<[...TReturns, DualStakeContractReturns['change_admin_2()void'] | undefined]>

  /**
   * Calls the change_noderunner(address)void ABI method.
   *
  * fee admin/node runner method. change node runner address.
  node runner fees must be withdrawn before this, otherwise fee admin could steal node runner fees.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  changeNoderunner(params?: CallParams<DualStakeContractArgs['obj']['change_noderunner(address)void'] | DualStakeContractArgs['tuple']['change_noderunner(address)void']>): DualStakeContractComposer<[...TReturns, DualStakeContractReturns['change_noderunner(address)void'] | undefined]>

  /**
   * Calls the change_feeaddr(address)void ABI method.
   *
   * admin/fee admin method. change fee admin address
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  changeFeeaddr(params?: CallParams<DualStakeContractArgs['obj']['change_feeaddr(address)void'] | DualStakeContractArgs['tuple']['change_feeaddr(address)void']>): DualStakeContractComposer<[...TReturns, DualStakeContractReturns['change_feeaddr(address)void'] | undefined]>

  /**
   * Calls the update_max_balance(uint64)void ABI method.
   *
   * Fee admin method. Updates max algo stake
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateMaxBalance(params?: CallParams<DualStakeContractArgs['obj']['update_max_balance(uint64)void'] | DualStakeContractArgs['tuple']['update_max_balance(uint64)void']>): DualStakeContractComposer<[...TReturns, DualStakeContractReturns['update_max_balance(uint64)void'] | undefined]>

  /**
   * Calls the verify_nfdomains(uint64,uint64,byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  verifyNfdomains(params?: CallParams<DualStakeContractArgs['obj']['verify_nfdomains(uint64,uint64,byte[])void'] | DualStakeContractArgs['tuple']['verify_nfdomains(uint64,uint64,byte[])void']>): DualStakeContractComposer<[...TReturns, DualStakeContractReturns['verify_nfdomains(uint64,uint64,byte[])void'] | undefined]>

  /**
   * Calls the withdraw_node_runner_fees(uint64)void ABI method.
   *
  * fee admin/node runner method. withdraw node runner fees. hard coded to send to node runner address.
  the fee admin may call this to pay out the current node runner before changing node runner address

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawNodeRunnerFees(params?: CallParams<DualStakeContractArgs['obj']['withdraw_node_runner_fees(uint64)void'] | DualStakeContractArgs['tuple']['withdraw_node_runner_fees(uint64)void']>): DualStakeContractComposer<[...TReturns, DualStakeContractReturns['withdraw_node_runner_fees(uint64)void'] | undefined]>

  /**
   * Calls the withdraw_platform_fees(uint64)void ABI method.
   *
   * fee admin method. withdraw platform fees
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawPlatformFees(params?: CallParams<DualStakeContractArgs['obj']['withdraw_platform_fees(uint64)void'] | DualStakeContractArgs['tuple']['withdraw_platform_fees(uint64)void']>): DualStakeContractComposer<[...TReturns, DualStakeContractReturns['withdraw_platform_fees(uint64)void'] | undefined]>

  /**
   * Calls the keyreg_online(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void ABI method.
   *
  * Fee admin or node runner only. Send keyreg online.
  Required payment if fee is not zero. Fee must be 2A if escrow is not account eligible, otherwise zero (paid by outer) Fee amount is validated against Global eligibility fee parameter

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  keyregOnline(params?: CallParams<DualStakeContractArgs['obj']['keyreg_online(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void'] | DualStakeContractArgs['tuple']['keyreg_online(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void']>): DualStakeContractComposer<[...TReturns, DualStakeContractReturns['keyreg_online(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void'] | undefined]>

  /**
   * Calls the keyreg_offline()void ABI method.
   *
   * Fee admin or noderunner only. Send keyreg offline for an escrow account
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  keyregOffline(params?: CallParams<DualStakeContractArgs['obj']['keyreg_offline()void'] | DualStakeContractArgs['tuple']['keyreg_offline()void']>): DualStakeContractComposer<[...TReturns, DualStakeContractReturns['keyreg_offline()void'] | undefined]>

  /**
   * Calls the protest_stake()void ABI method.
   *
  * public method. locks dualSTAKE LST stake on the contract as "upgrade protest".
  This blocks upgrading unless it is dissolved (redeemed & returned to user) The upgrade can also be cancelled, whereafter the dualSTAKE tokens can be returned to the user unchanged

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  protestStake(params?: CallParams<DualStakeContractArgs['obj']['protest_stake()void'] | DualStakeContractArgs['tuple']['protest_stake()void']>): DualStakeContractComposer<[...TReturns, DualStakeContractReturns['protest_stake()void'] | undefined]>

  /**
   * Calls the unprotest_stake()void ABI method.
   *
   * public method. revoke protesting stake for self. Returns dualSTAKE tokens to user who protested with them.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  unprotestStake(params?: CallParams<DualStakeContractArgs['obj']['unprotest_stake()void'] | DualStakeContractArgs['tuple']['unprotest_stake()void']>): DualStakeContractComposer<[...TReturns, DualStakeContractReturns['unprotest_stake()void'] | undefined]>

  /**
   * Calls the admin_unprotest_stake(address)void ABI method.
   *
   * fee admin method. callable when there is no upgrade scheduled. returns the protesting dualSTAKE tokens to user $user. If the user has opted out of the dualSTAKE asset, this fails and the user can undo the protest stake themselves.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  adminUnprotestStake(params?: CallParams<DualStakeContractArgs['obj']['admin_unprotest_stake(address)void'] | DualStakeContractArgs['tuple']['admin_unprotest_stake(address)void']>): DualStakeContractComposer<[...TReturns, DualStakeContractReturns['admin_unprotest_stake(address)void'] | undefined]>

  /**
   * Calls the dissolve_protesting_stake(address)void ABI method.
   *
  * fee admin method. called before upgrading to dissolve protesting stake for user $user. Redeems & returns ALGO and ASA to user.
  If the user has opted out of the ASA: 1) ARC59 asset inbox is used to send the ASA and 2) the transaction and MBR fees for asset inbox are subtractd from the ALGO amount.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  dissolveProtestingStake(params?: CallParams<DualStakeContractArgs['obj']['dissolve_protesting_stake(address)void'] | DualStakeContractArgs['tuple']['dissolve_protesting_stake(address)void']>): DualStakeContractComposer<[...TReturns, DualStakeContractReturns['dissolve_protesting_stake(address)void'] | undefined]>

  /**
   * Calls the queue_upgrade(byte[])void ABI method.
   *
  * admin method only.
  stage a contract upgrade. time applicability 2 weeks from current timestamp. hashes are variable length, 32b each, corresponding to SHA512_256 of approval program pages

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  queueUpgrade(params?: CallParams<DualStakeContractArgs['obj']['queue_upgrade(byte[])void'] | DualStakeContractArgs['tuple']['queue_upgrade(byte[])void']>): DualStakeContractComposer<[...TReturns, DualStakeContractReturns['queue_upgrade(byte[])void'] | undefined]>

  /**
   * Calls the reset_upgrade()void ABI method.
   *
  * admin or fee admin only.
  clear a staged contract upgrade

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  resetUpgrade(params?: CallParams<DualStakeContractArgs['obj']['reset_upgrade()void'] | DualStakeContractArgs['tuple']['reset_upgrade()void']>): DualStakeContractComposer<[...TReturns, DualStakeContractReturns['reset_upgrade()void'] | undefined]>

  /**
   * Calls the mint()void ABI method.
   *
  * Public method. Mint dualSTAKE lst
  NEXT transaction in group must be payment in ALGO if rate != 0, 2 txns after must be payment in ASA will swap and apply fee updates if needed sends dualSTAKE tokens to caller

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mint(params?: CallParams<DualStakeContractArgs['obj']['mint()void'] | DualStakeContractArgs['tuple']['mint()void']>): DualStakeContractComposer<[...TReturns, DualStakeContractReturns['mint()void'] | undefined]>

  /**
   * Calls the redeem()void ABI method.
   *
  * Public method. Redeem dualSTAKE tokens back to ALGO+ASA.
  dualSTAKE:ALGO is always 1:1 dualSTAKE:ASA is (ASA balance):(global staked) will swap and apply fee updates if needed

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  redeem(params?: CallParams<DualStakeContractArgs['obj']['redeem()void'] | DualStakeContractArgs['tuple']['redeem()void']>): DualStakeContractComposer<[...TReturns, DualStakeContractReturns['redeem()void'] | undefined]>

  /**
   * Calls the get_rate()uint64 ABI method.
   *
  * Public method. Returns the current rate as ABI uint64:
  1e8 * (ASA Balance) / (global staked) Returns zero if staked == 0 will swap and apply fee updates if needed

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getRate(params?: CallParams<DualStakeContractArgs['obj']['get_rate()uint64'] | DualStakeContractArgs['tuple']['get_rate()uint64']>): DualStakeContractComposer<[...TReturns, DualStakeContractReturns['get_rate()uint64'] | undefined]>

  /**
   * Calls the get_contract_listing(address)(uint64,uint64,uint64,uint64,uint64,string,uint64,string,string,uint16,bool,bool,bool,bool,uint64) ABI method.
   *
  * Public method. Returns ABI struct ContractListing:
  rate (see get_rate)     escrow algo balance     escrow asa balance     staked balance     dualstake token ID     dualstake asset name     asa asset ID     asa asset name     asa unit name     asa decimals     need_swap     incentive_eligible     is_online     user_protesting_stake will swap and apply fee updates if needed

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getContractListing(params?: CallParams<DualStakeContractArgs['obj']['get_contract_listing(address)(uint64,uint64,uint64,uint64,uint64,string,uint64,string,string,uint16,bool,bool,bool,bool,uint64)'] | DualStakeContractArgs['tuple']['get_contract_listing(address)(uint64,uint64,uint64,uint64,uint64,string,uint64,string,string,uint16,bool,bool,bool,bool,uint64)']>): DualStakeContractComposer<[...TReturns, DualStakeContractReturns['get_contract_listing(address)(uint64,uint64,uint64,uint64,uint64,string,uint64,string,string,uint16,bool,bool,bool,bool,uint64)'] | undefined]>

  /**
   * Calls the get_rate_and_balances()(uint64,uint64,uint64) ABI method.
   *
  * Public method. Returns ABI tuple[3]:
  rate (see get_rate)     escrow algo balance     escrow asa balance will swap and apply fee updates if needed

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getRateAndBalances(params?: CallParams<DualStakeContractArgs['obj']['get_rate_and_balances()(uint64,uint64,uint64)'] | DualStakeContractArgs['tuple']['get_rate_and_balances()(uint64,uint64,uint64)']>): DualStakeContractComposer<[...TReturns, DualStakeContractReturns['get_rate_and_balances()(uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the get_need_swap()bool ABI method.
   *
   * Public method. Returns whether the contract thinks it needs to swap
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getNeedSwap(params?: CallParams<DualStakeContractArgs['obj']['get_need_swap()bool'] | DualStakeContractArgs['tuple']['get_need_swap()bool']>): DualStakeContractComposer<[...TReturns, DualStakeContractReturns['get_need_swap()bool'] | undefined]>

  /**
   * Calls the swap_or_fail()void ABI method.
   *
   * Public method. Perform swap or fail
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  swapOrFail(params?: CallParams<DualStakeContractArgs['obj']['swap_or_fail()void'] | DualStakeContractArgs['tuple']['swap_or_fail()void']>): DualStakeContractComposer<[...TReturns, DualStakeContractReturns['swap_or_fail()void'] | undefined]>

  /**
   * Calls the nullun()void ABI method.
   *
   * Public empty method for opcode budget increase
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  nullun(params?: CallParams<DualStakeContractArgs['obj']['nullun()void'] | DualStakeContractArgs['tuple']['nullun()void']>): DualStakeContractComposer<[...TReturns, DualStakeContractReturns['nullun()void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the dualSTAKE Contract smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): DualStakeContractComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): DualStakeContractComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<DualStakeContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<DualStakeContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<DualStakeContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<DualStakeContractComposerResults<TReturns>>
}
export type DualStakeContractComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

